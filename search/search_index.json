{"config":{"indexing":"full","lang":["en","ja"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"引言 机器人是一个非常复杂的系统，硬件部分包括：各种各样感知环境信息的传感器、作为大脑进行计算的主控平台、执行动作的电机等等。软件层面包括：感知算法，规控算法，数据驱动的程式，操作系统等。 2022年6月，地平线机器人正式推出全新一代机器人开发平台，在软件、算法、工具层面给行业带来更多帮助。 本教程将会以旭日X3派为平台，介绍地平线机器人开发平台的使用原理与方法。 教程链接汇总 旭日X3派开发板使用手册： https://developer.horizon.ai/api/v1/fileData/documents_pi/index.html 机器人开发平台使用手册： https://developer.horizon.ai/api/v1/fileData/TogetherROS/index.html 视频课程： https://class.guyuehome.com/all/10284445/19617453 图文教程： https://hhp.guyuehome.com/ 教程问答： https://www.guyuehome.com/Bubble/circleDetail/id/92 博客泡圈： https://www.guyuehome.com/","text_tokens":["更","guyuehome","工具","软件","一代","ai","数据","全新","/","信息","行业","togetherros","2022","规控","、","使用手册","博客","视频","https","问答","各种","给",".","月","horizon","进行","等","机器人","filedata","层面","documents","感器","开发板","html","非常复杂","原理","动作","developer","泡圈","各样","旭日","com","非常","帮助","地平","驱动","硬件","x3","10284445","circledetail","92","id","是","推出","机器","操作系统","class","的"," ","操作","系统","包括","hhp","各种各样","在","复杂","bubble","主控","index","部分","计算","为","将会","课程","多","手册","v1","执行","方法","使用","_","引言","程式","算法","带来","汇总","以","链接","传感器","介绍","www",":","地平线","平台","all","正式","。","一个","与","pi","19617453","6","电机","感知","等等","教程","api","环境","大脑","本","开发","：","派","年","传感","，","图文","作为"],"title":"引言","title_tokens":["引言"]},{"location":"#_1","text":"机器人是一个非常复杂的系统，硬件部分包括：各种各样感知环境信息的传感器、作为大脑进行计算的主控平台、执行动作的电机等等。软件层面包括：感知算法，规控算法，数据驱动的程式，操作系统等。 2022年6月，地平线机器人正式推出全新一代机器人开发平台，在软件、算法、工具层面给行业带来更多帮助。 本教程将会以旭日X3派为平台，介绍地平线机器人开发平台的使用原理与方法。","text_tokens":["更","工具","软件","一代","数据","全新","信息","行业","2022","规控","、","各种","给","月","进行","等","机器人","层面","感器","非常复杂","原理","动作","各样","旭日","非常","帮助","地平","驱动","硬件","x3","是","推出","机器","操作系统","的"," ","操作","系统","包括","各种各样","在","复杂","主控","部分","计算","为","将会","多","执行","方法","使用","程式","算法","带来","以","传感器","介绍","地平线","平台","正式","。","一个","与","6","电机","感知","等等","教程","环境","大脑","本","开发","：","派","年","传感","，","作为"],"title":"引言","title_tokens":["引言"]},{"location":"#_2","text":"旭日X3派开发板使用手册： https://developer.horizon.ai/api/v1/fileData/documents_pi/index.html 机器人开发平台使用手册： https://developer.horizon.ai/api/v1/fileData/TogetherROS/index.html 视频课程： https://class.guyuehome.com/all/10284445/19617453 图文教程： https://hhp.guyuehome.com/ 教程问答： https://www.guyuehome.com/Bubble/circleDetail/id/92 博客泡圈： https://www.guyuehome.com/","text_tokens":["机器","guyuehome","www","class","developer","ai",":"," ","/","泡圈","平台","旭日","hhp","all","togetherros","com","使用手册","博客","视频","https","bubble","问答","19617453","pi","index",".","课程","教程","手册","v1","horizon","api","机器人","filedata","开发","使用","documents","：","x3","派","开发板","_","10284445","circledetail","html","92","图文","id"],"title":"教程链接汇总","title_tokens":["汇总","教程","链接"]},{"location":"about/","text":"学机器人，上古月居 古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。 版权声明 古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["违反","guyuehome","交流","企业","ai","校企","追究其","有权","、","视频","生态","任何",".","一体","集","学","作品","有限公司","限于","追究","进行","等","机器人","超过","2011","高校","传播","法律","个人","交流学习","赋能","网站","致力于","@","用户","明者","对本","面向未来","1000","不得","com","ros","销售","致力","将","法律责任","质量","课件","其它","及","有限","至今","人才培养","畅销","复制","源码","面向","累积","仅限","万人","模式","修改","构建","捆绑","创新","众多","出版","是","机器","依法","brand","的"," ","不","究其","图书","包括","+","均","或","声明者","努力","建立","被","许可","联系","合作","为","课程","未经","万字","镜像","提供","但","《","使用","小时","武汉","声明","社区","学习","培养","精锋","和","》","上","产品","抄录","）","高质","如需","所有","单位","www","创建","（","拥有","责任","人才","平台","请","通过","居","未来","上述","线上","。","与","华语","合法","微控","120","授权","古月","本","开发","科技","高质量","知名","地区","公司","书面","年","学习者","优质","实践","版权","内容","，"],"title":"关于我们","title_tokens":["关于","我们"]},{"location":"about/#_1","text":"古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。","text_tokens":["guyuehome","交流","企业","ai","校企","、","视频","生态",".","一体","集","等","机器人","超过","2011","高校","交流学习","赋能","致力于","用户","面向未来","1000","com","ros","致力","质量","及","至今","人才培养","畅销","面向","累积","万人","模式","构建","创新","众多","出版","是","机器","的"," ","图书","+","努力","建立","合作","为","课程","万字","提供","《","小时","社区","学习","培养","》","）","高质","www","创建","（","人才","平台","通过","居","未来","线上","。","与","华语","120","古月","开发","高质量","知名","地区","年","学习者","优质","实践","内容","，"],"title":"学机器人，上古月居","title_tokens":["居","学","机器","古月","机器人","上","，"]},{"location":"about/#_2","text":"古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["违反","guyuehome","追究其","有权","、","视频","任何",".","作品","有限公司","限于","追究","进行","等","法律","传播","个人","网站","@","用户","明者","对本","不得","com","销售","将","法律责任","课件","其它","有限","复制","源码","仅限","修改","捆绑","依法","brand","的","不"," ","究其","包括","均","或","声明者","被","许可","联系","为","课程","未经","镜像","但","使用","武汉","声明","学习","精锋","和","产品","抄录","如需","所有","单位","拥有","责任","请","居","上述","。","与","合法","微控","授权","古月","本","科技","书面","公司","版权","，"],"title":"版权声明","title_tokens":["声明","版权"]},{"location":"hhp/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/","text":"智能机器人发展与现状 智能机器人正在改变着我们的生活，想象这样一种场景。 也许不知不觉的某一天，我们就会发现类似这样的机器人会真实出现在生活当中。 科技的发展日新月异，智能机器人也突飞猛进，伴随机器人发展而生的机器人操作系统，也是机器人重要的发展动力之一。 智能机器人举例 提到智能机器人，大家脑海里会映射出什么样的情景呢？ 是不是会有很多科幻电影中变形金刚、大白机器人、星球大战等场景呢？ 智能机器人这个概念，只是一个科幻词汇么？当然不是的，其实在我们身边，已经有越来越多智能机器人出现，我们来看看他们都在哪里？ 扫地机器人 先来看一个大家最熟悉的一个类型——扫地机器人。现在的扫地机器人，除了可以完成扫地、拖地这样一些基本功能之外，还搭载了激光雷达、相机、红外等十几种传感器。 一个全新的扫地机器人虽然是第一次来到你家，但是它可能用到 5 分到 10 分钟时间，很快就可以通过它的传感器对你的家庭环境了如指掌，也就是把实际的家庭环境做成了一张地图，这样他就会知道哪里是卧室，哪里是餐厅，哪里是厨房，不同的区域用多大的风力，用多大的水量来去清扫最为合适，它都会智能化地来做判断。 除此之外，它还得知道怎么样去躲避各种障碍物，比如说家里面的宠物、地上摆放的插线板，各种各样的杂物等等。 所以看似非常小的一个扫地机器人，其实已经是一个很智能化的家用设备了，正在潜移默化地改变着我们的生活。 自动化仓储 第二个案例，虽然大部分人在生活中不会直接接触，但却和每一个人息息相关，那就是自动化仓储。 这是京东某个实际部署运营的一套自动化的仓库，在里面可以看到各种各样的机器人，比如工业机械臂、移动机器人等等，这套立体仓库当中大量的货架也是自动化的，这就是一个典型的机器人应用场景。 之前有一个关于京东的新闻报道，里边讲到，从我们下单那刻开始，到商品分拣出来放到快递员手上，只需要20分钟。比如我们要买个手机，下单付款，20分钟之后，这个手机已经从这么庞大的仓库中顺利找到，并且完成了包装、打标、分配等一系列工序。这样，我们在绝大部分城市，基本都可以体验到下单之后，当天或者隔天收货的体验，为什么它可以做到如此高效，就是因为背后这一套由机器人组成的自动化系统，借助大数据的分析，甚至可以做到在你下单之前，平台就知道你将要买什么东西。比如说你会按照一个月的频率买米买面，那平台就可以预测到上个月你买的米应该快吃完了，然后就会在距离你家最近的一个仓库里面备货。 当你下单之后，这袋米可能半个小时送到你手上了。 自动驾驶 第三个案例，那就是当今最为热门的技术之一——自动驾驶。 自动驾驶汽车也是典型的移动机器人系统，为了保证绝对安全的驾驶过程，汽车上装配了非常多的传感器，以及极为复杂的控制算法。 视频中我们看到的是华为自动驾驶系统在实际路面上测试的效果，自动驾驶汽车通过多个相机、雷达、超声波，实时构建周围环境的三维信息，不仅可以动态识别路面上的行人车辆、车道线、交通指示灯等，还可以安全完成超车、会车、跟车、转向等重要功能，同时对突发状况也可以及时处理，比如躲避突然出现的车辆、礼让行人等，最终自动行驶入库，把我们安全顺利的送到目的地。 虽然自动驾驶相关的技术和法律法规还在不断完善中，但是相信有一天我们每个人都可以体验自动驾驶的乐趣，而且这一天不会太远。 智能机器人发展 机器人的发展横跨几十年，经历了三个重要时期。 2000年前，机器人主要应用于工业生产，俗称工业机器人，由示教器操控，帮助工厂释放劳动力，此时的机器人并没有太多智能而言，完全按照人类的命令执行动作，更加关注电气层面驱动器、伺服电机、减速机、控制器等设备，这是机器人的电气时代。 2000年后，计算机和视觉技术逐渐应用，机器人的类型不断丰富，出现了AGV、视觉检测等应用，此时的机器人传感器更加丰富，但是依然缺少自主思考的过程，智能化有限，只能感知局部环境，这是机器人的数字时代，不过这也是机器人大时代的前夜。 2015年之后，随着人工智能技术的快速发展，机器人成为了AI技术的最佳载体，家庭服务机器人、送餐机器人、四足仿生机器狗、自动驾驶汽车等应用呈井喷状爆发，智能机器人时代正式拉开序幕。 2015年之后，智能机器人市场迅速爆发，到2025年，国内人工智能市场有望达到1164亿元，而作为人工智能重要载体的机器人，市场更会达到1463亿元。 行业的快速发展，必将带动大量专业人才的需求，人才缺口也将逐年扩大，2025年，预计国内机器人行业的人才缺口将超过450万，人工智能方面的缺口更会达到1000万。 面对如此严峻的人才需求，国内各高校从2016年起，陆续开设机器人和人工智能专业，为人才的供给提供有力保障。 智能机器人的快速发展，必将对机器人开发提出更高的要求，软件层面最为热点的技术之一就是机器人操作系统，这也是我们课程的主角。 机器人操作系统 对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是机器人操作系统。 ROS的诞生 2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣、做饭、收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法：既然自己做不到，那为什么不联合所有人一起干呢？如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人——PR2，Personal Robot 2代。 在这几个图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面，却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。 ROS怀揣“提高机器人软件复用率”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。 ROS的特点 提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化 的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的 应用案例在社区中沉淀 下来； ROS本身也是完全开源的， 商业许可证非常宽松 ； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品， 缩短了产品的上市时间 ； ROS也可以 跨平台使用 ，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多 支持工业应用 的新特性和新技术，促使ROS在越来越多领域中被使用。 ROS的社区 社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。","text_tokens":["得","事情","就","a","全新","处理","开发工具","行业","障碍","保证","举例","交通","法规","陆续","问答","跟车","做成","目的地","有力","宠物","地图","线","看似","万","任何","核心","并且","风力","工厂","只","全人","最终","机器人","前夜","超过","找到","用多大","个人","近几年","一系","乐意","站","是不是","查看","每个","对于","陪","标准","正如","推进","缺少","摆放","检测","国内","绝大部分","爆发","条","正在","及时处理","必将","杂物","用户","不觉","访问量","模块化","着","已经","太","简单","基本","为了","1000","450","指示灯","算是","非常","20","你","自主","到","系列","windows","至今","斯坦福","不想","三维","搭载","只是","学术","频繁","会","送到","向前走","明智","如果","向前","新增","不到","衣服","思考","电路","整合","买米","当然","新闻","零部件","一家","沉淀","页面","需要","组成","横跨","这个","独立","光靠","领域","有","不断完善","要求","资源","答案","维基百科","逐年","多个","的","外观","系统","robot","却","各种各样","你家","轰动","一天","障碍物","减速机","大学","报道","伺服","仿生","其中","放到","科幻电影","许可","十几种","绝大","总称","计算","这是","几十年","中","全球化","怀揣","怎么","生产","仓储","超车","扩大","默化","立体仓库","还","提供","一款","热门","市场","水下","那","包装","更加","真实","功能","他","局部","供给","知道","1463","社区","发表","浏览量","增长速度","差不多","人工","趋势","上","操控","产品","看看","有志","算法","目的","距离","以","才","时至今日","情况","其他","传感器","四项","尝试","提高","嵌入","不多","案例","包","发布","一系列","索引","地域","。","一个","城市","激光","猛进","1164","容易","玩耍","那刻","映射","教程","等等","这款","应用","分析","红外","之","公司","这套","生态系统","用","之一","无论","状","严峻","当","完成","也许","四足","personal","庞大","地来","么","不断丰富","工具","ai","软件","大部","更会","也","情景","信息","人","已有","达到","数字","、","完","现状","把","突飞猛进","团队","收拾","突发状况","因","开始","各种","相信","电气","扫地","时候","给","想象","出","代表",".","复合","许可证","月","可能","实现","回答","不知不觉","买面","三个","人工智能","方面","嵌入式","控制算法","感器","了如指掌","如此","律法","只要","几年","不要","一步","程度","手上","星球大战","呈","合适","最近","动作","创意","人数","他们","伴随","分钟","动力","不断","主角","百科","ros","新鲜","清晰","华为","将","狗","新闻报道","这么","关注","有限","洗衣","起","出来","按照","人才需求","分享","带动","识别","帮助","上边","采购","驱动","路面","重新","说干就干","息息相关","访问","经历","低","哪里","柔性","加","是","行人","剪头发","里会","远","直接","计算机","效率","操作系统","时代","隔天","井喷","操作","大量","同时","活跃度","基本功能","一切","先","复杂","背后","浪潮","词汇","车道","制造","排名","不知","来到","或者","半个","大有可为","部分","将要","毛巾","为","各项","课程","需求","友好","亿元","京东","开源","斯坦福大学","总体","长远","诞生","全人类","家","造","特性","呢","助推","劳动","应用软件","和","突发","教器","一种","手机","减速","所有","东西","有人","从中","说明","一起","四大","躲避","甚至","只能","地上","两个","以及","平台","大步","买个","发状","逐渐","基本上","及时","想法","激光雷达","与","从","今日","2000","当天","感知","我们","什么样","在生活中","工序","超声波","第二","轮子","科技","：","完善","宽松","大战","wiki","一些","收货","自己","比如说","效果","拖地","，","算机","作为","发现","开设","超声","变形金刚","预计","上去","统统","为例","载体","结晶","工业生产","释放","一个月","2007","活跃","餐厅","突然","智慧","类型","5","视频","员","如何","不过","分拣","装配","没有","不是","各","来看","熟悉","无聊","叠","2025","零","拉开序幕","下单","依然","迅速","个","由","高校","法律","干","100","层面","25","随着","还是","全球","越来","上个","第三个","法律法规","张图","典型","潜移默化","周围环境","上市","几种","不仅","主要","日常","革命","；","推动","年前","最为","促使","礼让","人类","潜移","但是","充足","拉开","这袋","问题","商业","开发者","跑","40","多项","水量","国家","转向","2015","多媒体","以叠","曲线","类似","最","尽量","都","围绕","款","万人","某个","之后","discourse","复用","论坛","基本功","苹果","线板","安全","除此","实验室","一套","元素","这一波","缩短","c","不","基于","出现","顺利","打","上个月","实时","当时","行驶","现在","针对","做","第二个","仓库","250","物体","十年","最佳","体系","强悍","10","接触","执行","org","小","要","左右","其实","但","由示","率","使用","小时","车","本身","所有人","维基","移动","雷达","提到","分","吃","熨烫","木头","很","当今","状况","商品","变形","自动","这些","身影","而且","之前","机制","存储","第一","商业化","因为","讨论","之外","集合","不同","维基百","场景","通常","智能","闻报","正式","软件系统","linux","生态系","快速","多媒体系统","电机","肯定","应该","可以","时期","此","真的","发展","无疑","万左右","除了","热点","当中","实验","15","用于","大部分","环境","设备","后期","模块","相关","大白","涉及","一群","性能","预测","立体","周围","插","并","得到","此时","然后","速度","总而言之","车辆","做到","去","生活","一张","实际","动态","有没有","虽然","数据库","更","一大步","有望","跨平台","同理","台球","迅猛","命令","数据","对","重要","区域","星球","米","ros2","服务","付款","科幻","生态","时间","完全","清扫","同一","控制","讲","后","以上","新月","进步","等","”","怎么样","特点","大家","根据","二个","巨人","可为","为什么","大","它","分配","来讲","网站","劳动力","汽车","驾驶","起来","这里","金刚","相机","打标","乐趣","2016","地","提出","最高","answers","各样","代","研究","伺服电机","繁荣","成果","高","臂","专业","统计","人形","十几","驱动器","改变","厨房","几个","而","浏览","很快","每","无论是","参考","方式","记录","所以","概念","做法","这样","给出","agv","源码","packages","序幕","一次","整理","移动机器人","缺口","保障","构建","运营","高效","而言","了","下载","买","增长","80","青年","具备","研发","身边","于","之内","150","机器","精致","初期","？","里边","过程","活动","上图"," ","丰富","自动化","技术","部件","测试","广泛","动机","家庭","在","脑海","电影","很多","家用","做出","媒体","肩膀","pr2","专业人才","index","第三","被","用到","送餐","设计","一大","看到","图中","多","绝对","视觉","最后","控制器","快递","新","头发","原型","频率","“","b","圈","通信","关于","几十","框架","棒","资金","极为","除此之外","入库","做饭","家庭环境","突飞","这","面对","目标","不会","第一次","次数","来","多万","卧室","声波","人才","新鲜事","通过","体验","自身","判断","既然","就是","什么","成为","得以","部署","比如","机械","2","某","备货","借助","同样","引擎","里面","越来越","更为","太远","深知","日新月异","联合","开发","俗称","ros1","工业","智能化","货架","年","传感","别人","普遍","下来","指示","据库","支持","业生","快","福大","—","而生","度","聊天"],"title":"智能机器人发展现状","title_tokens":["发展","智能","机器","现状","机器人"]},{"location":"hhp/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#_1","text":"智能机器人正在改变着我们的生活，想象这样一种场景。 也许不知不觉的某一天，我们就会发现类似这样的机器人会真实出现在生活当中。 科技的发展日新月异，智能机器人也突飞猛进，伴随机器人发展而生的机器人操作系统，也是机器人重要的发展动力之一。","text_tokens":["不觉","机器","操作系统","的","就","伴随"," ","着","动力","操作","系统","也","出现","重要","场景","一天","在","智能","突飞猛进","。","改变","不知","某","猛进","想象","发展","我们","当中","新月","不知不觉","机器人","这样","会","日新月异","类似","科技","真实","之一","一种","也许","，","突飞","生活","而生","是","发现","正在"],"title":"智能机器人发展与现状","title_tokens":["发展","智能","机器","现状","与","机器人"]},{"location":"hhp/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#_2","text":"提到智能机器人，大家脑海里会映射出什么样的情景呢？ 是不是会有很多科幻电影中变形金刚、大白机器人、星球大战等场景呢？ 智能机器人这个概念，只是一个科幻词汇么？当然不是的，其实在我们身边，已经有越来越多智能机器人出现，我们来看看他们都在哪里？","text_tokens":["变形金刚","里会","有","机器","么","他们","？","的","来"," ","已经","情景","出现","星球","脑海","电影","、","很多","智能","场景","在","科幻","词汇","什么","一个","科幻电影","不是","出","中","映射","越来越","我们","什么样","多","只是","概念","等","机器人","会","其实","大家","大白","越来","都","是不是","呢","大战","提到","当然","哪里","，","变形","星球大战","看看","身边","金刚","这个"],"title":"智能机器人举例","title_tokens":["举例","智能","机器","机器人"]},{"location":"hhp/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#_3","text":"先来看一个大家最熟悉的一个类型——扫地机器人。现在的扫地机器人，除了可以完成扫地、拖地这样一些基本功能之外，还搭载了激光雷达、相机、红外等十几种传感器。 一个全新的扫地机器人虽然是第一次来到你家，但是它可能用到 5 分到 10 分钟时间，很快就可以通过它的传感器对你的家庭环境了如指掌，也就是把实际的家庭环境做成了一张地图，这样他就会知道哪里是卧室，哪里是餐厅，哪里是厨房，不同的区域用多大的风力，用多大的水量来去清扫最为合适，它都会智能化地来做判断。 除此之外，它还得知道怎么样去躲避各种障碍物，比如说家里面的宠物、地上摆放的插线板，各种各样的杂物等等。 所以看似非常小的一个扫地机器人，其实已经是一个很智能化的家用设备了，正在潜移默化地改变着我们的生活。","text_tokens":["得","地来","就","全新","对","也","区域","障碍","、","餐厅","把","类型","5","做成","宠物","时间","地图","清扫","各种","看似","扫地","来看","熟悉","风力","可能","等","机器人","怎么样","用多大","大家","感器","了如指掌","它","潜移默化","摆放","几种","相机","合适","正在","杂物","最为","地","分钟","潜移","已经","各样","着","但是","基本","非常","你","到","十几","厨房","改变","水量","很快","搭载","所以","会","这样","最","一次","都","基本功","线板","了","哪里","是","除此","机器","的"," ","基本功能","各种各样","先","你家","家庭","家用","障碍物","现在","来到","十几种","用到","做","怎么","10","默化","小","还","其实","家","功能","雷达","他","分","知道","很","除此之外","家庭环境","第一次","传感器","第一","来","躲避","卧室","地上","之外","不同","通过","智能","判断","。","就是","一个","激光雷达","比如","激光","可以","里面","除了","等等","我们","环境","设备","红外","智能化","传感","一些","插","比如说","—","完成","拖地","，","生活","去","一张","实际","虽然"],"title":"扫地机器人","title_tokens":["机器","机器人","扫地"]},{"location":"hhp/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#_4","text":"第二个案例，虽然大部分人在生活中不会直接接触，但却和每一个人息息相关，那就是自动化仓储。 这是京东某个实际部署运营的一套自动化的仓库，在里面可以看到各种各样的机器人，比如工业机械臂、移动机器人等等，这套立体仓库当中大量的货架也是自动化的，这就是一个典型的机器人应用场景。 之前有一个关于京东的新闻报道，里边讲到，从我们下单那刻开始，到商品分拣出来放到快递员手上，只需要20分钟。比如我们要买个手机，下单付款，20分钟之后，这个手机已经从这么庞大的仓库中顺利找到，并且完成了包装、打标、分配等一系列工序。这样，我们在绝大部分城市，基本都可以体验到下单之后，当天或者隔天收货的体验，为什么它可以做到如此高效，就是因为背后这一套由机器人组成的自动化系统，借助大数据的分析，甚至可以做到在你下单之前，平台就知道你将要买什么东西。比如说你会按照一个月的频率买米买面，那平台就可以预测到上个月你买的米应该快吃完了，然后就会在距离你家最近的一个仓库里面备货。 当你下单之后，这袋米可能半个小时送到你手上了。","text_tokens":["庞大","就","数据","大部","也","米","人","一个月","、","完","付款","员","分拣","开始","各种","并且","讲","下单","只","可能","等","机器人","由","买面","找到","一系","二个","上个","为什么","如此","大","它","分配","典型","手上","绝大部分","打标","最近","分钟","已经","各样","基本","臂","20","你","这袋","到","系列","新闻报道","这么","出来","按照","每","会","这样","送到","息息相关","都","某个","之后","移动机器人","运营","高效","新闻","了","买米","买","需要","组成","是","这个","有","直接","机器","一套","里边","的","隔天"," ","自动化","大量","系统","却","顺利","各种各样","动机","你家","上个月","在","背后","报道","放到","半个","或者","绝大","第二个","仓库","部分","将要","这是","中","看到","仓储","接触","京东","立体仓库","快递","要","但","频率","小时","那","包装","关于","移动","知道","吃","和","手机","商品","自动","这","之前","距离","东西","不会","做到","甚至","因为","案例","平台","买个","场景","体验","闻报","一系列","。","就是","一个","什么","从","部署","比如","机械","城市","备货","借助","应该","可以","当天","那刻","里面","等等","当中","我们","在生活中","工序","大部分","应用","第二","分析","相关","工业","货架","预测","立体","这套","收货","快","比如说","然后","当","完成","，","生活","实际","虽然"],"title":"自动化仓储","title_tokens":["仓储","自动化","自动"]},{"location":"hhp/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#_5","text":"第三个案例，那就是当今最为热门的技术之一——自动驾驶。 自动驾驶汽车也是典型的移动机器人系统，为了保证绝对安全的驾驶过程，汽车上装配了非常多的传感器，以及极为复杂的控制算法。 视频中我们看到的是华为自动驾驶系统在实际路面上测试的效果，自动驾驶汽车通过多个相机、雷达、超声波，实时构建周围环境的三维信息，不仅可以动态识别路面上的行人车辆、车道线、交通指示灯等，还可以安全完成超车、会车、跟车、转向等重要功能，同时对突发状况也可以及时处理，比如躲避突然出现的车辆、礼让行人等，最终自动行驶入库，把我们安全顺利的送到目的地。 虽然自动驾驶相关的技术和法律法规还在不断完善中，但是相信有一天我们每个人都可以体验自动驾驶的乐趣，而且这一天不会太远。","text_tokens":["处理","也","实际","信息","重要","对","人","保证","、","突然","交通","法规","把","视频","突发状况","跟车","目的地","装配","线","相信","控制","最终","等","机器人","法律","三个","控制算法","感器","第三个","律法","每个","法律法规","典型","汽车","驾驶","周围环境","不仅","相机","及时处理","乐趣","最为","礼让","不断","但是","为了","指示灯","非常","华为","转向","三维","识别","会","路面","送到","都","移动机器人","构建","了","安全","是","行人","不断完善","有","机器","多个","的","过程"," ","技术","系统","同时","测试","出现","顺利","动机","在","实时","一天","行驶","复杂","车道","第三","中","看到","多","超车","绝对","还","热门","车","那","移动","雷达","功能","和","极为","突发","当今","上","入库","状况","自动","这","算法","目的","而且","不会","传感器","躲避","案例","声波","以及","发状","通过","体验","及时","。","就是","比如","可以","我们","超声波","太远","环境","相关","完善","周围","传感","之一","指示","效果","—","完成","，","车辆","动态","虽然","超声"],"title":"自动驾驶","title_tokens":["驾驶","自动"]},{"location":"hhp/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#_6","text":"机器人的发展横跨几十年，经历了三个重要时期。 2000年前，机器人主要应用于工业生产，俗称工业机器人，由示教器操控，帮助工厂释放劳动力，此时的机器人并没有太多智能而言，完全按照人类的命令执行动作，更加关注电气层面驱动器、伺服电机、减速机、控制器等设备，这是机器人的电气时代。 2000年后，计算机和视觉技术逐渐应用，机器人的类型不断丰富，出现了AGV、视觉检测等应用，此时的机器人传感器更加丰富，但是依然缺少自主思考的过程，智能化有限，只能感知局部环境，这是机器人的数字时代，不过这也是机器人大时代的前夜。 2015年之后，随着人工智能技术的快速发展，机器人成为了AI技术的最佳载体，家庭服务机器人、送餐机器人、四足仿生机器狗、自动驾驶汽车等应用呈井喷状爆发，智能机器人时代正式拉开序幕。 2015年之后，智能机器人市场迅速爆发，到2025年，国内人工智能市场有望达到1164亿元，而作为人工智能重要载体的机器人，市场更会达到1463亿元。 行业的快速发展，必将带动大量专业人才的需求，人才缺口也将逐年扩大，2025年，预计国内机器人行业的人才缺口将超过450万，人工智能方面的缺口更会达到1000万。 面对如此严峻的人才需求，国内各高校从2016年起，陆续开设机器人和人工智能专业，为人才的供给提供有力保障。 智能机器人的快速发展，必将对机器人开发提出更高的要求，软件层面最为热点的技术之一就是机器人操作系统，这也是我们课程的主角。","text_tokens":["更","有望","不断丰富","ai","软件","命令","载体","更会","工业生产","重要","释放","也","对","行业","服务","数字","达到","、","类型","陆续","不过","有力","没有","完全","电气","各","万","控制","后","2025","工厂","拉开序幕","依然","迅速","等","机器人","前夜","超过","高校","三个","层面","人工智能","方面","随着","感器","如此","大","劳动力","缺少","驾驶","汽车","检测","国内","呈","主要","爆发","动作","必将","年前","最为","2016","提出","人类","动力","不断","太","但是","伺服电机","主角","1000","高","450","拉开","专业","自主","将","到","狗","驱动器","关注","有限","而","起","按照","人才需求","带动","帮助","2015","驱动","agv","序幕","之后","思考","经历","缺口","保障","而言","了","是","横跨","于","机器","计算机","要求","时代","操作系统","逐年","的","过程"," ","丰富","井喷","操作","技术","大量","系统","出现","家庭","减速机","仿生","伺服","专业人才","送餐","计算","几十年","这是","为","十年","最佳","生产","多","需求","课程","亿元","视觉","扩大","执行","控制器","提供","由示","市场","更加","局部","几十","供给","劳动","1463","教器","和","人工","操控","这","减速","自动","面对","传感器","只能","人才","逐渐","智能","正式","。","成为","就是","快速","从","2000","电机","1164","时期","发展","感知","热点","我们","环境","设备","应用","开发","俗称","工业","智能化","年","传感","之一","状","业生","并","严峻","此时","，","四足","算机","作为","开设","预计"],"title":"智能机器人发展","title_tokens":["发展","智能","机器","机器人"]},{"location":"hhp/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#_7","text":"对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是机器人操作系统。","text_tokens":["机器","答案","操作系统","尝试","的","已经","操作","技术","系统","重要","人","非常","智能","复杂","问题","大学","团队","如何","。","就是","一个","针对","不是","或者","这个","可以","斯坦福","越来越","机器人","层面","斯坦福大学","给出","开发","一群","那","越来","对于","高效","福大","上","完成","，","青年","有志","是","独立"],"title":"机器人操作系统","title_tokens":["机器","操作系统","机器人","操作","系统"]},{"location":"hhp/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#ros","text":"2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣、做饭、收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法：既然自己做不到，那为什么不联合所有人一起干呢？如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人——PR2，Personal Robot 2代。 在这几个图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面，却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。 ROS怀揣“提高机器人软件复用率”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。","text_tokens":["一大步","更","统统","为例","台球","软件","事情","就","处理","也","重要","2007","服务","、","收拾","5","因","没有","各种","时候","同一","无聊","叠","复合","可能","实现","只","个","等","机器人","干","100","”","找到","层面","个人","大家","一系","还是","为什么","只要","陪","标准","条","推动","促使","他们","分钟","已经","代","研究","但是","繁荣","臂","充足","专业","ros","你","人形","系列","几个","洗衣","至今","出来","很快","无论是","不想","分享","帮助","所以","学术","以叠","这样","类似","向前走","如果","向前","说干就干","都","一次","款","整理","不到","衣服","复用","电路","移动机器人","苹果","了","零部件","柔性","低","组成","是","横跨","这个","独立","之内","实验室","光靠","剪头发","有","领域","机器","精致","初期","效率","一套","？","的"," ","不","部件","外观","基于","一切","robot","打","却","系统","广泛","动机","在","做出","当时","很多","轰动","复杂","其中","pr2","做","毛巾","设计","物体","一大","中","看到","图中","强悍","多","怀揣","最后","要","还","原型","一款","头发","“","诞生","率","水下","那","圈","家","所有人","功能","呢","社区","移动","框架","应用软件","熨烫","资金","和","木头","很","上","做饭","手机","这","目标","身影","而且","所有","有人","才","第一次","时至今日","从中","第一","一起","提高","甚至","因为","平台","大步","一系列","软件系统","既然","想法","。","一个","什么","得以","就是","机械","2","成为","肯定","快速","今日","容易","可以","玩耍","同样","真的","发展","我们","实验","这款","有没有","用于","深知","联合","应用","后期","开发","涉及","性能","：","年","别人","普遍","用","无论","一些","自己","并","此时","—","完成","而生","，","聊天","personal","虽然"],"title":"ROS的诞生","title_tokens":["诞生","ros","的"]},{"location":"hhp/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#ros_1","text":"提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化 的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的 应用案例在社区中沉淀 下来； ROS本身也是完全开源的， 商业许可证非常宽松 ； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品， 缩短了产品的上市时间 ； ROS也可以 跨平台使用 ，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多 支持工业应用 的新特性和新技术，促使ROS在越来越多领域中被使用。","text_tokens":["更","跨平台","同理","工具","软件","就","结晶","a","也","开发工具","对","已有","ros2","、","智慧","把","做成","生态","各种","完全","时间","不是","给","代表","核心","零","许可证","实现","全人","进步","由","机器人","嵌入式","特点","大家","全球","巨人","越来","站","不要","来讲","正如","一步","推进","汽车","上市","这里","创意","；","促使","他们","人类","模块化","着","各样","简单","成果","非常","ros","将","到","商业","跑","多项","windows","分享","做法","多媒体","会","采购","这样","重新","向前走","明智","向前","尽量","新增","都","围绕","复用","整合","一家","沉淀","了","具备","组成","是","这个","领域","远","有","机器","直接","的","缩短","c"," ","同时","系统","技术","各种各样","在","肩膀","很多","媒体","制造","许可","被","做","总称","部分","全球化","设计","中","体系","多","友好","最后","新","开源","还","长远","率","使用","b","那","家","造","通信","社区","功能","全人类","本身","特性","和","上","目标","这些","这","产品","机制","以","一起","提高","商业化","四大","来","嵌入","案例","人才","集合","平台","自身","通常","智能","linux","生态系","。","就是","一个","从","多媒体系统","比如","可以","引擎","此","发展","越来越","我们","应用","轮子","模块","开发","之","ros1","智能化","：","工业","公司","别人","下来","生态系统","宽松","支持","自己","并","，","做到","上去"],"title":"ROS的特点","title_tokens":["ros","的","特点"]},{"location":"hhp/1.1_%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%91%E5%B1%95%E4%B8%8E%E7%8E%B0%E7%8A%B6/#ros_2","text":"社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。","text_tokens":["迅猛","就","数据","大部","重要","人","活跃","、","问答","各种","给","任何","代表",".","来看","万","核心","月","回答","以上","等","机器人","25","大家","近几年","根据","乐意","全球","越来","可为","查看","大","每个","几年","张图","程度","网站","起来","这里","绝大部分","日常","正在","革命","；","用户","人数","最为","提出","访问量","最高","动力","answers","已经","百科","基本","算是","统计","非常","ros","新鲜","清晰","20","问题","到","开发者","几个","40","国家","浏览","参考","每","方式","记录","上边","曲线","频繁","源码","packages","都","万人","discourse","访问","论坛","整合","下载","而言","了","增长","80","页面","加","研发","是","资源","有","150","机器","元素","维基百科","？","活动","的","上图","这一波"," ","不","活跃度","在","很多","现在","其中","浪潮","排名","index","绝大","大有可为","部分","250","这是","中","各项","看到","多","org","左右","新","总体","其实","使用","维基","关于","功能","社区","呢","发表","浏览量","增长速度","助推","差不多","棒","和","很","趋势","上","这些","这","存储","情况","四项","其他","次数","说明","多万","不多","讨论","包","两个","维基百","不同","新鲜事","通过","发布","基本上","索引","地域","。","就是","什么","快速","一个","从","比如","可以","无疑","发展","万左右","15","教程","我们","等等","越来越","更为","大部分","应用","开发","相关","：","据库","wiki","快","得到","总而言之","速度","，","度","数据库","作为"],"title":"ROS的社区","title_tokens":["ros","社区","的"]},{"location":"hhp/1.2_%E5%9C%B0%E5%B9%B3%E7%BA%BF%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E5%B9%B3%E5%8F%B0%E4%BB%8B%E7%BB%8D/","text":"地平线机器人开发平台介绍 机器人是一个非常复杂的系统，硬件部分包括：各种各样感知环境信息的传感器、作为大脑进行计算的主控平台、执行动作的电机等等。软件层面包括：感知算法，规控算法，数据驱动的程式，操作系统等。 以操作系统为例，应用最为广泛的ROS系统在不断迭代，不过在智能时代洪流的冲击下，还是涌现出一些问题。 ROS的一些问题 ROS逐渐成为标准，大量机器人应用被贡献到社区，虽然提高了代码的通用性，但却难以发挥硬件的完整性能； 大量应用聚焦在机器人运动控制与定位导航等基础功能，智能化的应用较少； 在软件资源格外丰富的社区中，还缺少系统化的内容，帮助用户快速实现相关资源的复用。 很多开发者都在魔改ROS，去适配自己的机器人，所以机器人的研发成本非常高。从机械选型、系统定制、算法开发到数据闭环，每个过程都要付出高昂的成本，在这么高昂的成本下，做机器人是非常困难的一件事情。 在算法层面，机器人算法仍处于早期阶段，很多感知算法还停留在理论阶段，无法服务与实际场景，机器学习发展迅速，不过对于很多开发者来讲，数据的采集、标注、训练都是一个庞大的工作量，部署运行不仅十分困难，还要消耗大量的算力成本。 智能机器人涉及的领域和方法较多，目前整体的学习成本偏高，想要实现智能化应用的难度就更高，问题的出现，也带来了机遇与挑战。 地平线机器人开发平台 2022年6月，地平线机器人正式推出全新一代机器人开发平台——Horizon Hobot Platform（HHP），在软件、算法、工具层面给行业带来更多帮助。这套机器人开发平台的目的是打造软硬协同、极致优化、丰富易用的机器人开发组件与生态，由图中这几个部分组成，我们来看下。 平台的底层主要依托于地平线AIOT边缘AI芯片——旭日3和旭日5，内部集成了地平线最先进的伯努利2.0架构的AI 引擎，可提供 5TOPS 以上的等效算力。如此强大的算力支持，保证了智能机器人开发的基础条件。 芯片是基础建设，在此之上更重要的是一系列软件设施，正如我们电脑上的windows和linux，一套优质的操作系统，是上层应用软件开发的必要条件，TogetherROS在ROS系统的基础上，进行了大量的改良和优化，可以为开发者提供高效实用的系统环境。 在此之上，平台还会提供大量的机器人参考算法和应用功能示例，比如常用的建图、定位、导航，还有智能机器人中至关重要的智能化功能，比如一些基础算法，图像分类、图像分割、目标检测等，还有应用功能，人脸检测、人体跟踪、骨骼点检测、手势识别、语音处理等等，提供基于大量数据训练的模型，借助底层AI引擎的支持，可以快速、稳定的实现各种各样的智能应用。 同时平台还会配套一系列加速机器人开发的工具链，比如代码编写工具、系统调试工具、数据标注和训练工具等。 古月居和地平线也会共同打造机器人开发者社区，持续分享技术内容，沉淀更多开发者的智慧，更多机器人产业中的合作伙伴也会陆续加入，共同打造最为丰富的机器人开发者套件，建设智能机器人开发的生态圈。 在这个机器人开发平台之中，最为重要的就是TogetherROS系统了，起到了承上启下、连接各项功能的作用。 TogetherROS的特点 在ROS系统庞大社区资源的基础上，结合智能机器人的发展和产业需求，TogetherROS应运而生。 TogetherROS有三个核心特点： 开源兼容，秉承开源精神的力量 TogetherROS和ROS系统一样，也是一套完全开源的系统，所有开发者都可以继续二次开发，接口方面和ROS2完全兼容，ROS2原有的功能也都可以继续复用，已有的机器人代码可以十分便利的迁移过来。 极致性能优化 相比ROS的通用化，TogetherROS更多考虑的是如何充分挖掘底层硬件的性能，比如提高数据传输的效率、增强人工智能处理的能力，在后续的使用案例中，大家可以充分感受到这一点。 丰富易用的软硬件组件 比如各种各样的传感器和开发套件，再比如算法模块、感知应用、机器人功能，还有提高开发效率的各种编程、部署工具。 TogetherROS系统框架 具体展开来看，TogetherROS的系统框架如图所示，其中深蓝色部分为地平线优化、新增的模块，其他是目前复用ROS2中的模块： 在系统通信的中间件部分，保留了ROS2中原本针对不同DDS的通信框架，与ROS2 foxy版本的接口完全兼容，方便复用ROS丰富工具包进行原型验证，在此之上增加了“zero-copy” 零拷贝 的通信机制，降低大数据传输时延和系统资源消耗。 在组件功能部分，TogetherROS提供“hobot CV” 视觉加速库 ，软硬件协同，可以提升CV算子性能、降低系统资源消耗；针对AI模型的推理，封装了“hobot_dnn” 功能包，可以调用底层芯片的AI引擎，简化板端AI开发与部署，释放BPU的算力。可以支持丰富的机器人传感器型号，比如相机、雷达、IMU、GPS等，节省驱动开发的时间，可以聚焦在机器人应用开发上。 除此之外，TogetherROS还会提供丰富的 软件调试和性能调优工具 ，方便用户定位问题和优化系统性能，在具体的行业应用中，还支持最小化和模块化的剪裁，利于部署在资源受限的嵌入式产品中。 总之，TogetherROS出于ROS，又不止于ROS，ROS原有的功能依然继承，重点是借助硬件能力，充分优化系统的性能，提高机器人开发的效率。","text_tokens":["事情","就","全新","处理","aiot","行业","保证","陆续","数据传输","核心","还会","付出","hobot","机器人","应运而生","一系","copy","还有","bpu","高昂","至关","每个","对于","标准","正如","魔","缺少","挑战","中间件","检测","增强","冲击","所示","用户","无法","模块化","非常","到","系列","伯努利","windows","作用","会","新增","dnn","沉淀","连接","还要","组成","这个","架构","领域","资源","有","封装","的","系统","边缘","却","各种各样","其中","调优","主控","集成","目前","计算","仍","中","节省","板端","方法","稳定","还","提供","导航","社区","功能","人工","上","产品","算法","总之","目的","一点","如图所示","以","深蓝","其他","介绍","传感器","提高","嵌入","案例","包","居","一系列","。","一个","必要","6","等等","通用化","运动","定位","应用","下","zero","这套","过来","精神","庞大","工具","软件","ai","3","通用","也","信息","已有","语音","定位导航","、","各种","给","电脑","系统资源","月","力量","实现","三个","人工智能","方面","嵌入式","感器","如此","动作","少","不断","分割","配套","ros","具体","现出","手势","这么","强大","采集","软硬件","分享","帮助","识别","底层","驱动","据传","成本","2.0","蓝色","是","效率","操作系统","时代","编写","调用","之中","操作","大量","同时","提升","复杂","利于","再","较","部分","工作量","合作","为","各项","需求","开源","建图","出于","_","一样","等效","应用软件","和","芯片","程式","点","停留","所有","实用","秉承","平台","剪裁","逐渐","foxy","涌现","接口","代码","模型","与","从","人脸","工具包","改良","图像","感知","我们","组件","训练","大脑","：","建设","生态圈","一些","自己","涌现出","十分困难","，","作为","机遇","为例","释放","之上","适配","格外","智慧","伙伴","5","如何","依托","不过","合作伙伴","迁移","深蓝色","来看","定制","传输","零","依然","迅速","进行","常用","展开","挖掘","层面","还是","社区资源","打造","起到","设施","不仅","主要","；","库","可","最为","极致","阶段","协同","旭日","二次","加速","不止","问题","先进","共同","开发者","软硬","platform","5tops","工作","硬件","持续","最","消耗","都","十分","能力","复用","偏高","系统化","后续","推出","除此","标注","一套","包括","出现","基于","hhp","改","相比","条件","针对","做","结合","想要","执行","聚焦","产业","要","但","使用","雷达","验证","由图","至关重要","带来","机制","（","难以","增加","之外","便利","不同","场景","智能","正式","linux","困难","感受","保留","快速","电机","可以","此","发展","早期","受限","环境","模块","相关","性能","涉及","整体","dds","骨骼","继续","内部","承上启下","加入","处于","去","链","实际","虽然","闭环","更","一代","跟踪","数据","拷贝","重要","togetherros","服务","2022","规控","ros2","重点","生态","完全","时间","降低","控制","cv","一件","horizon","以上","等","通用性","”","特点","大家","原有","大","非常复杂","来讲","运行","简化","贡献","相机","套件","示例","各样","高","难度","最小化","人体","洪流","几个","参考","所以","-","算子","地平","软件资源","发挥","基础","选型","高效","了","研发","充分","于","机器","调试","迭代","过程"," ","丰富","编程","技术","广泛","在","很多","兼容","被","考虑","imu","多","视觉","原型","“","通信","学习","应运","框架","除此之外","目标","这","易用","上层","）","推理","算力","二次开发","地平线","型号","分类","优化","成为","就是","又","部署","机械","比如","时延","必要条件","借助","版本","原本","引擎","继承","古月","方便","gps","中间","开发","智能化","最小","理论","年","传感","优质","完整","内容","支持","—","定位问题"],"title":"TogetherROS介绍","title_tokens":["介绍","togetherros"]},{"location":"hhp/1.2_%E5%9C%B0%E5%B9%B3%E7%BA%BF%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E5%B9%B3%E5%8F%B0%E4%BB%8B%E7%BB%8D/#_1","text":"机器人是一个非常复杂的系统，硬件部分包括：各种各样感知环境信息的传感器、作为大脑进行计算的主控平台、执行动作的电机等等。软件层面包括：感知算法，规控算法，数据驱动的程式，操作系统等。 以操作系统为例，应用最为广泛的ROS系统在不断迭代，不过在智能时代洪流的冲击下，还是涌现出一些问题。","text_tokens":["机器","传感器","为例","操作系统","最为","时代","软件","迭代","的","数据"," ","各样","操作","不断","系统","包括","信息","平台","各种各样","广泛","在","非常","、","规控","ros","复杂","智能","洪流","涌现","问题","现出","主控","。","一个","不过","算法","各种","电机","部分","程式","计算","感知","等等","以","执行","进行","环境","机器人","大脑","硬件","驱动","层面","等","应用","还是","：","下","感器","冲击","传感","一些","非常复杂","涌现出","，","作为","是","动作"],"title":"地平线机器人开发平台介绍","title_tokens":["机器","介绍","地平","机器人","开发","地平线","平台"]},{"location":"hhp/1.2_%E5%9C%B0%E5%B9%B3%E7%BA%BF%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E5%B9%B3%E5%8F%B0%E4%BB%8B%E7%BB%8D/#ros","text":"ROS逐渐成为标准，大量机器人应用被贡献到社区，虽然提高了代码的通用性，但却难以发挥硬件的完整性能； 大量应用聚焦在机器人运动控制与定位导航等基础功能，智能化的应用较少； 在软件资源格外丰富的社区中，还缺少系统化的内容，帮助用户快速实现相关资源的复用。 很多开发者都在魔改ROS，去适配自己的机器人，所以机器人的研发成本非常高。从机械选型、系统定制、算法开发到数据闭环，每个过程都要付出高昂的成本，在这么高昂的成本下，做机器人是非常困难的一件事情。 在算法层面，机器人算法仍处于早期阶段，很多感知算法还停留在理论阶段，无法服务与实际场景，机器学习发展迅速，不过对于很多开发者来讲，数据的采集、标注、训练都是一个庞大的工作量，部署运行不仅十分困难，还要消耗大量的算力成本。 智能机器人涉及的领域和方法较多，目前整体的学习成本偏高，想要实现智能化应用的难度就更高，问题的出现，也带来了机遇与挑战。","text_tokens":["庞大","更","机遇","软件","事情","就","数据","通用","也","适配","定位导航","格外","服务","、","不过","控制","定制","一件","付出","实现","迅速","等","机器人","通用性","层面","高昂","每个","对于","标准","来讲","运行","魔","缺少","挑战","不仅","贡献","；","用户","少","无法","阶段","高","难度","非常","ros","问题","到","开发者","这么","工作","采集","帮助","所以","硬件","软件资源","消耗","都","十分","发挥","复用","基础","选型","了","成本","研发","偏高","系统化","还要","是","领域","资源","机器","标注","的","过程"," ","丰富","大量","系统","却","出现","在","改","很多","较","被","做","目前","工作量","仍","中","想要","多","聚焦","方法","要","还","但","导航","社区","功能","学习","和","带来","算法","算力","停留","提高","难以","逐渐","场景","智能","困难","。","成为","代码","与","快速","从","机械","一个","部署","发展","感知","早期","训练","运动","定位","应用","开发","相关","性能","涉及","智能化","整体","下","理论","完整","内容","自己","十分困难","，","处于","去","实际","虽然","闭环"],"title":"ROS的一些问题","title_tokens":["ros","一些","的","问题"]},{"location":"hhp/1.2_%E5%9C%B0%E5%B9%B3%E7%BA%BF%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E5%B9%B3%E5%8F%B0%E4%BB%8B%E7%BB%8D/#_2","text":"2022年6月，地平线机器人正式推出全新一代机器人开发平台——Horizon Hobot Platform（HHP），在软件、算法、工具层面给行业带来更多帮助。这套机器人开发平台的目的是打造软硬协同、极致优化、丰富易用的机器人开发组件与生态，由图中这几个部分组成，我们来看下。 平台的底层主要依托于地平线AIOT边缘AI芯片——旭日3和旭日5，内部集成了地平线最先进的伯努利2.0架构的AI 引擎，可提供 5TOPS 以上的等效算力。如此强大的算力支持，保证了智能机器人开发的基础条件。 芯片是基础建设，在此之上更重要的是一系列软件设施，正如我们电脑上的windows和linux，一套优质的操作系统，是上层应用软件开发的必要条件，TogetherROS在ROS系统的基础上，进行了大量的改良和优化，可以为开发者提供高效实用的系统环境。 在此之上，平台还会提供大量的机器人参考算法和应用功能示例，比如常用的建图、定位、导航，还有智能机器人中至关重要的智能化功能，比如一些基础算法，图像分类、图像分割、目标检测等，还有应用功能，人脸检测、人体跟踪、骨骼点检测、手势识别、语音处理等等，提供基于大量数据训练的模型，借助底层AI引擎的支持，可以快速、稳定的实现各种各样的智能应用。 同时平台还会配套一系列加速机器人开发的工具链，比如代码编写工具、系统调试工具、数据标注和训练工具等。 古月居和地平线也会共同打造机器人开发者社区，持续分享技术内容，沉淀更多开发者的智慧，更多机器人产业中的合作伙伴也会陆续加入，共同打造最为丰富的机器人开发者套件，建设智能机器人开发的生态圈。 在这个机器人开发平台之中，最为重要的就是TogetherROS系统了，起到了承上启下、连接各项功能的作用。","text_tokens":["更","工具","软件","一代","ai","3","跟踪","全新","数据","处理","也","重要","aiot","行业","之上","togetherros","2022","保证","、","语音","智慧","伙伴","5","陆续","依托","合作伙伴","生态","各种","给","电脑","来看","月","hobot","还会","horizon","以上","常用","进行","实现","等","机器人","层面","一系","还有","如此","至关","打造","正如","起到","设施","检测","主要","可","最为","极致","套件","示例","各样","协同","旭日","人体","分割","配套","ros","加速","先进","共同","开发者","手势","软硬","系列","platform","几个","伯努利","windows","5tops","强大","参考","分享","帮助","识别","作用","地平","底层","会","持续","最","基础","高效","沉淀","了","2.0","连接","组成","是","于","推出","这个","架构","机器","一套","操作系统","编写","调试","标注","的"," ","丰富","之中","操作","大量","系统","边缘","基于","同时","hhp","各种各样","技术","在","集成","条件","部分","合作","为","中","各项","多","产业","稳定","提供","建图","功能","导航","社区","等效","应用软件","和","上","目标","芯片","由图","易用","这","上层","带来","）","算法","目的","至关重要","点","算力","实用","（","地平线","平台","居","智能","正式","一系列","linux","分类","。","优化","必要","与","模型","人脸","比如","6","快速","代码","就是","必要条件","借助","可以","改良","引擎","此","图像","我们","组件","等等","训练","古月","环境","定位","应用","开发","智能化","下","这套","年","建设","优质","骨骼","生态圈","一些","支持","内容","内部","承上启下","—","加入","，","链"],"title":"地平线机器人开发平台","title_tokens":["机器","地平","机器人","开发","地平线","平台"]},{"location":"hhp/1.2_%E5%9C%B0%E5%B9%B3%E7%BA%BF%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E5%B9%B3%E5%8F%B0%E4%BB%8B%E7%BB%8D/#togetherros","text":"在ROS系统庞大社区资源的基础上，结合智能机器人的发展和产业需求，TogetherROS应运而生。 TogetherROS有三个核心特点： 开源兼容，秉承开源精神的力量 TogetherROS和ROS系统一样，也是一套完全开源的系统，所有开发者都可以继续二次开发，接口方面和ROS2完全兼容，ROS2原有的功能也都可以继续复用，已有的机器人代码可以十分便利的迁移过来。 极致性能优化 相比ROS的通用化，TogetherROS更多考虑的是如何充分挖掘底层硬件的性能，比如提高数据传输的效率、增强人工智能处理的能力，在后续的使用案例中，大家可以充分感受到这一点。 丰富易用的软硬件组件 比如各种各样的传感器和开发套件，再比如算法模块、感知应用、机器人功能，还有提高开发效率的各种编程、部署工具。","text_tokens":["庞大","更","工具","数据","通用","处理","也","已有","togetherros","ros2","、","如何","迁移","完全","各种","数据传输","核心","力量","传输","机器人","挖掘","三个","人工智能","应运而生","方面","特点","大家","社区资源","原有","感器","还有","增强","极致","套件","各样","二次","ros","到","开发者","软硬","软硬件","底层","硬件","据传","都","十分","能力","复用","基础","充分","是","后续","资源","有","机器","效率","一套","的"," ","丰富","编程","系统","各种各样","在","兼容","相比","再","考虑","结合","中","需求","多","产业","开源","使用","功能","社区","应运","一样","和","人工","上","这","易用","算法","一点","所有","传感器","二次开发","提高","秉承","案例","便利","智能","接口","感受","。","代码","优化","部署","比如","可以","发展","感知","通用化","组件","应用","开发","模块","性能","：","传感","继续","过来","，","精神"],"title":"TogetherROS的特点","title_tokens":["的","togetherros","特点"]},{"location":"hhp/1.2_%E5%9C%B0%E5%B9%B3%E7%BA%BF%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E5%B9%B3%E5%8F%B0%E4%BB%8B%E7%BB%8D/#togetherros_1","text":"具体展开来看，TogetherROS的系统框架如图所示，其中深蓝色部分为地平线优化、新增的模块，其他是目前复用ROS2中的模块： 在系统通信的中间件部分，保留了ROS2中原本针对不同DDS的通信框架，与ROS2 foxy版本的接口完全兼容，方便复用ROS丰富工具包进行原型验证，在此之上增加了“zero-copy” 零拷贝 的通信机制，降低大数据传输时延和系统资源消耗。 在组件功能部分，TogetherROS提供“hobot CV” 视觉加速库 ，软硬件协同，可以提升CV算子性能、降低系统资源消耗；针对AI模型的推理，封装了“hobot_dnn” 功能包，可以调用底层芯片的AI引擎，简化板端AI开发与部署，释放BPU的算力。可以支持丰富的机器人传感器型号，比如相机、雷达、IMU、GPS等，节省驱动开发的时间，可以聚焦在机器人应用开发上。 除此之外，TogetherROS还会提供丰富的 软件调试和性能调优工具 ，方便用户定位问题和优化系统性能，在具体的行业应用中，还支持最小化和模块化的剪裁，利于部署在资源受限的嵌入式产品中。 总之，TogetherROS出于ROS，又不止于ROS，ROS原有的功能依然继承，重点是借助硬件能力，充分优化系统的性能，提高机器人开发的效率。","text_tokens":["工具","ai","软件","拷贝","数据","释放","之上","togetherros","ros2","行业","重点","、","深蓝色","完全","时间","降低","数据传输","来看","系统资源","cv","零","传输","hobot","还会","依然","展开","进行","等","机器人","”","嵌入式","原有","copy","bpu","感器","大","简化","中间件","相机","所示","；","库","用户","模块化","协同","最小化","加速","ros","具体","不止","问题","软硬","软硬件","-","算子","地平","底层","驱动","硬件","据传","消耗","新增","dnn","能力","复用","了","蓝色","充分","是","于","除此","资源","机器","效率","封装","调试","调用","的"," ","丰富","系统","提升","在","兼容","利于","其中","调优","针对","imu","部分","目前","为","中","节省","板端","视觉","聚焦","还","原型","提供","“","通信","出于","功能","_","雷达","框架","和","上","验证","除此之外","产品","芯片","推理","总之","机制","如图所示","算力","深蓝","其他","传感器","提高","增加","嵌入","包","之外","地平线","不同","型号","剪裁","foxy","接口","保留","优化","。","与","工具包","模型","时延","部署","比如","又","借助","版本","可以","原本","此","引擎","组件","继承","受限","方便","定位","gps","应用","中间","模块","开发","性能","：","dds","最小","zero","传感","支持","，","定位问题"],"title":"TogetherROS系统框架","title_tokens":["系统","togetherros","框架"]},{"location":"hhp/1.3_TogetherROS%E4%B8%8EROS%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94/","text":"TogetherROS与ROS性能对比 ROS2 vs ROS1 先来看下两个大版本ROS的系统架构。 在这张图中，左侧是ROS1，右侧是ROS2，两者最明显的变化，就是Master。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery——自发现机制，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的DDS系统。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于共享内存的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了，Linux、windows、MacOS、RTOS都可以。 ROS2系统架构 ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个ROS Middleware，简称RMW，也就是制定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。 TogetherROS vs ROS2 TogetherROS就是在这样一个ROS2架构的基础上，继续进行了优化，原本DDS通信的部分依然保留，可以适配不同厂家的DDS通信系统，在此之上，针对功能性的组件进行了众多优化和补充，在上一节中我们也给大家介绍了这套框架。 TogetherROS在数据传输和AI处理方面，到底有多少提升呢，我们来看具体的对比数据。 通信效率量化对比 先来看下操作系统至关重要的数据通信功能，我们针对ROS中最为常用的大数据传输模式——话题通信进行了测试。 在单元测试中，使用同样的算力平台，分别安装TogetherROS和ROS2系统，然后在其中运行一个话题通信的发布者与订阅者，实现不同数据量的传输。经过数据统计，我们可以看到，在数据通信延时方面，随着数据量的增加，ROS2系统在通信延时、发送端和接收端的CPU占用率上，都会程线性增加，可以预想，在数据量较大的情况下，系统的通信负荷会非常严重。 而在TogetherROS中，由于使用了零拷贝的传输机制，传输数据量的增加，并不会导致延时和CPU占用率的增加，极大程度节省了系统资源。 在场景测试中，我们尽量模拟真实机器人的应用，使用TogetherROS和ROS2系统连接了多个相机、雷达和里程计等传感器，作为大量数据的输入来源，继续进行了测试，结果和之前的单元测试类似，ROS2系统此时的CPU占用率已经超过90%，想要运行数据传输之外的应用功能，几乎是不可能的，通信延时也达到了15ms以上，这在某些实时性要求比较高的应用中，是不可接受的。 而在TogetherROS中，CPU占用和通信延时也微乎其微，更多系统资源都可以让给应用处理。 CV图像处理量化对比 再来看下智能机器人中视觉感知层面的处理，TogetherROS集成了地平线Hobot CV视觉加速库，通过底层芯片中的硬件引擎，软硬件协同，可以提升常用CV算子的性能，降低系统资源的消耗，例如高斯滤波、图像缩放、畸变校正等常用的视觉处理方法。 而且在接口风格上兼容OpenCV，可以做到与OpenCV混合编程，便于视觉应用的开发。 具体测试CV加速库的效率，与OpenCV中软件实现的效率进行对比，我们分别对比图像缩放的帧率，图像旋转的帧率，高斯滤波的帧率，通过Hobot CV视觉加速库运行的帧率可以做到OpenCV的2到3倍，甚至更多倍。 模型推理 在AI处理方面，ROS2原生系统中并没有太多支持，只能依赖社区中的资源，很难充分发挥硬件的算力。 对此，TogetherROS集成了Hobot DNN模型推理库，集成了众多开源模型，借助底层芯片中的AI引擎BPU，提供充足的算力保障，开发者实际使用中，就不用花费很多时间在模型的调教和数据的训练上，基于这套系统，很快就可以部署人工智能应用啦。 传感器驱动管理 在传感器层面，是大量数据传输的来源，TogetherROS也重点进行了优化，针对常用的传感器类型，系统中内置参数配置、系统调用和内存管理机制，同样是在芯片的硬件层面进行了加速和隔离，保障数据流的稳定生成。 机器人开发工具 机器人开发过程中的性能优化和调试，也是非常繁杂的工作，TogetherROS自带火焰图等工具，可以实现系统层面的调优和测试，便于开发者挖掘系统性能。 以上这些都是TogetherROS在ROS系统之上的优化和补充，未来更多特性也会不断迭代推出，让智能机器人的开发更加简单。","text_tokens":["得","通信接口","切换","就","处理","开发工具","会成","配置","分别","广泛应用","数据传输","国际标准","对比","花费","hobot","机器人","超过","找到","丢","还有","bpu","收","至关","每个","对于","标准","90%","校正","补充","接收","线性","用户","生成","无法","已经","太","简单","基本","rtos","为了","里程计","非常","到","windows","时","discovery","频繁","会","ceo","如果","严重","模式","dnn","打交道","一家","当然","产品开发","写","连接","需要","这个","架构","发成","有","资源","内","要求","封装","内置","多个","的","系统","右侧","分发","风格","该","其中","调优","集成","从而","定义","rmw","中","节省","延时","稳定","方法","提供","自家","更换","更加","功能","社区","数据量","真实","程序","人工","上","产品","单元测试","情况","其他","介绍","传感器","由于","提高","帧","属性","接收端","发布者","极大","发布","某些","指挥","。","一个","可选项","能够","缩放","应用","单元","下","公司","tcp","这套","用","会程","过来","举","管理","么","对此","软件","ai","开发成本","3","工具","选项","彼此","也","信息","达到","、","完","把","很难","各种","给","时候","系统资源","共享内存","实现","可能","共享","人工智能","方面","感器","诟病","只要","轻松","程度","国际","者","左侧","vs","另","走","不断","数据流","ros","具体","将","理器","有且","按照","软硬件","底层","驱动","重新","传输数据","据传","发","成本","另外","是","效率","操作系统","例子","调用","可选","火焰","操作","大量","提升","变得","先","原生","复杂","fastrtps","再","部分","让给","为","延迟","需求","来源","实时性","满足","master","开源","多倍","结果","特性","呢","一样","opencv","和","占用率","一种","功能性","芯片","移植","所有","交道","名字","甚至","只能","两个","一节","平台","依赖","opensplice","哪些","接口","代码","模型","与","经过","图像","占用","感知","我们","乱麻","组件","模拟","训练","几乎","完善","协议","，","参数","作为","发现","客户端","之上","适配","突然","类型","如何","不过","没有","不是","来看","熟悉","畸变","加密","下边","传输","零","依然","常用","进行","啦","层面","挖掘","随着","张图","不可","主要","库","交付","最为","一团乱麻","层","消失","符合","不太","协同","接入","充足","加速","滤波","问题","商业","开发者","软硬","工作","充分发挥","而已","减少","解决","硬件","类似","最","尽量","消耗","都","不用","自带","复用","一团","联网","输入","推出","一套","不","里","成","厂家","基于","只有","两者","改","实时","相比","建立","针对","做","想要","常","要","其实","但","例如","率","使用","雷达","这些","udp","至关重要","间层","带来","机制","而且","之前","话题","增加","之外","不同","请","场景","智能","linux","软件系统","保留","繁杂","肯定","预想","应该","可以","此","除了","应用层","性能","端","dds","安装","继续","通信协议","进程","并","此时","然后","隔离","做到","里程","实际","更","库会","物","调教","数据","/","拷贝","重要","ros2","togetherros","重点","较大","图像处理","时间","降低","cv","数据通信","以上","等","负荷","大家","一行","大","它","厂商","来讲","运行","这里","到底","相机","只不过","一团乱","内存","高","最大","统计","cpu","15ms","而","很快","唯一","每","发送","数据通","所以","算子","地平","管理器","简称","这样","比较","不爽","发挥","基础","保障","多少","了","众多","充分","于","机器","调试","？","听","过程","迭代","丰富"," ","编程","测试","明显","广泛","角色","在","接受","很多","兼容","图","macos","量化","设计","交给","看到","多","制定","视觉","节点","省略","便于","导致","高斯","听说","通信","框架","自","目标","这","订阅","中间层","推理","倍","算力","不会","变化","地平线","通过","未来","好","用率","优化","就是","适用","部署","比如","2","某","借助","版本","旋转","同样","原本","引擎","客户","管理机制","选择","中间","开发","ros1","简单明了","5g","传感","微乎其微","支持","让","middleware","—","混合","量"],"title":"TogetherROS与ROS性能对比","title_tokens":["ros","与","性能","对比","togetherros"]},{"location":"hhp/1.3_TogetherROS%E4%B8%8EROS%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94/#togetherrosros","text":"","text_tokens":[],"title":"TogetherROS与ROS性能对比","title_tokens":["ros","与","性能","对比","togetherros"]},{"location":"hhp/1.3_TogetherROS%E4%B8%8EROS%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94/#ros2-vs-ros1","text":"先来看下两个大版本ROS的系统架构。 在这张图中，左侧是ROS1，右侧是ROS2，两者最明显的变化，就是Master。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery——自发现机制，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的DDS系统。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于共享内存的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了，Linux、windows、MacOS、RTOS都可以。","text_tokens":["管理","得","通信接口","库会","就","数据","选项","彼此","也","重要","信息","客户端","ros2","会成","、","突然","把","不过","时候","来看","下边","共享内存","进行","共享","找到","至关","大","它","张图","标准","左侧","主要","接收","只不过","一团乱","一团乱麻","走","内存","层","消失","简单","不太","rtos","ros","将","理器","windows","有且","而","discovery","而已","管理器","频繁","会","底层","驱动","ceo","类似","最","如果","都","打交道","了","一团","另外","写","连接","需要","是","这个","架构","内","封装","一套","操作系统","听","调用","的","可选"," ","里","不","成","大量","系统","基于","操作","明显","变得","右侧","先","角色","两者","在","只有","很多","复杂","再","建立","从而","macos","中","节点","稳定","方法","master","提供","但","更换","通信","更加","雷达","一样","自","程序","和","上","这些","这","udp","至关重要","间层","中间层","机制","所有","交道","名字","变化","两个","请","通过","发布","依赖","好","哪些","linux","指挥","接口","。","就是","一个","可选项","比如","肯定","版本","可以","图像","我们","乱麻","客户","应用层","应用","中间","开发","ros1","简单明了","完善","下","dds","公司","tcp","安装","通信协议","进程","让","协议","—","，","发现"],"title":"ROS2 vs ROS1","title_tokens":[" ","ros2","vs","ros1"]},{"location":"hhp/1.3_TogetherROS%E4%B8%8EROS%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94/#ros2","text":"ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个ROS Middleware，简称RMW，也就是制定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。","text_tokens":["得","更","么","切换","物","软件","就","开发成本","/","数据","也","ros2","配置","适配","、","完","把","如何","不过","各种","广泛应用","不是","国际标准","给","熟悉","加密","实现","等","层面","丢","还有","一行","诟病","收","只要","每个","对于","轻松","标准","厂商","来讲","国际","这里","用户","交付","另","无法","符合","简单","基本","为了","最大","接入","ros","问题","商业","时","按照","唯一","每","所以","简称","频繁","底层","解决","这样","减少","重新","类似","最","如果","不爽","发","都","不用","复用","一家","当然","了","成本","联网","产品开发","写","是","于","这个","发成","？","多个","的","例子","丰富"," ","厂家","不","系统","基于","广泛","先","在","改","相比","fastrtps","该","再","定义","做","为","设计","中","想要","延迟","rmw","交给","多","需求","制定","常","省略","满足","master","要","开源","提供","其实","稳定","率","自家","更换","听说","通信","功能","社区","一样","程序","一种","目标","udp","这","这些","产品","带来","移植","其他","提高","属性","变化","之外","不同","场景","opensplice","好","软件系统","接口","。","就是","一个","适用","代码","部署","比如","肯定","能够","某","版本","应该","可以","除了","我们","应用","选择","开发","ros1","性能","dds","5g","tcp","安装","用","通信协议","协议","并","middleware","然后","过来","，","举"],"title":"ROS2系统架构","title_tokens":["架构","系统","ros2"]},{"location":"hhp/1.3_TogetherROS%E4%B8%8EROS%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94/#togetherros-vs-ros2","text":"TogetherROS就是在这样一个ROS2架构的基础上，继续进行了优化，原本DDS通信的部分依然保留，可以适配不同厂家的DDS通信系统，在此之上，针对功能性的组件进行了众多优化和补充，在上一节中我们也给大家介绍了这套框架。 TogetherROS在数据传输和AI处理方面，到底有多少提升呢，我们来看具体的对比数据。","text_tokens":["架构","有","介绍","ai","的","厂家"," ","数据","系统","也","处理","提升","不同","一节","之上","ros2","togetherros","在","适配","具体","保留","就是","一个","优化","针对","。","数据传输","给","来看","部分","对比","可以","原本","此","中","我们","组件","传输","依然","进行","这样","方面","大家","据传","dds","通信","这套","功能","呢","框架","继续","基础","和","多少","上","了","功能性","，","众多","补充","到底"],"title":"TogetherROS vs ROS2","title_tokens":[" ","ros2","togetherros","vs"]},{"location":"hhp/1.3_TogetherROS%E4%B8%8EROS%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94/#_1","text":"先来看下操作系统至关重要的数据通信功能，我们针对ROS中最为常用的大数据传输模式——话题通信进行了测试。 在单元测试中，使用同样的算力平台，分别安装TogetherROS和ROS2系统，然后在其中运行一个话题通信的发布者与订阅者，实现不同数据量的传输。经过数据统计，我们可以看到，在数据通信延时方面，随着数据量的增加，ROS2系统在通信延时、发送端和接收端的CPU占用率上，都会程线性增加，可以预想，在数据量较大的情况下，系统的通信负荷会非常严重。 而在TogetherROS中，由于使用了零拷贝的传输机制，传输数据量的增加，并不会导致延时和CPU占用率的增加，极大程度节省了系统资源。 在场景测试中，我们尽量模拟真实机器人的应用，使用TogetherROS和ROS2系统连接了多个相机、雷达和里程计等传感器，作为大量数据的输入来源，继续进行了测试，结果和之前的单元测试类似，ROS2系统此时的CPU占用率已经超过90%，想要运行数据传输之外的应用功能，几乎是不可能的，通信延时也达到了15ms以上，这在某些实时性要求比较高的应用中，是不可接受的。 而在TogetherROS中，CPU占用和通信延时也微乎其微，更多系统资源都可以让给应用处理。","text_tokens":["更","数据","拷贝","处理","也","重要","togetherros","ros2","达到","分别","、","较大","数据传输","来看","系统资源","数据通信","传输","实现","零","可能","常用","进行","以上","等","机器人","超过","负荷","方面","随着","感器","至关","大","程度","运行","者","90%","不可","接收","相机","线性","最为","已经","高","里程计","统计","非常","ros","cpu","15ms","而","发送","数据通","会","类似","传输数据","比较","据传","尽量","都","严重","模式","了","连接","是","输入","资源","机器","要求","操作系统","多个","的"," ","不","操作","大量","系统","测试","先","在","实时","接受","其中","针对","让给","中","节省","想要","看到","多","延时","来源","实时性","导致","使用","结果","通信","功能","真实","数据量","雷达","和","占用率","上","这","订阅","至关重要","单元测试","机制","之前","算力","情况","不会","传感器","由于","话题","增加","接收端","发布者","极大","之外","平台","不同","场景","发布","某些","用率","。","一个","与","预想","经过","同样","可以","占用","我们","模拟","几乎","应用","单元","端","下","传感","安装","会程","继续","微乎其微","并","此时","—","然后","，","作为","里程","量"],"title":"通信效率量化对比","title_tokens":["对比","量化","效率","通信"]},{"location":"hhp/1.3_TogetherROS%E4%B8%8EROS%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94/#cv","text":"再来看下智能机器人中视觉感知层面的处理，TogetherROS集成了地平线Hobot CV视觉加速库，通过底层芯片中的硬件引擎，软硬件协同，可以提升常用CV算子的性能，降低系统资源的消耗，例如高斯滤波、图像缩放、畸变校正等常用的视觉处理方法。 而且在接口风格上兼容OpenCV，可以做到与OpenCV混合编程，便于视觉应用的开发。 具体测试CV加速库的效率，与OpenCV中软件实现的效率进行对比，我们分别对比图像缩放的帧率，图像旋转的帧率，高斯滤波的帧率，通过Hobot CV视觉加速库运行的帧率可以做到OpenCV的2到3倍，甚至更多倍。","text_tokens":["更","软件","3","处理","togetherros","分别","、","降低","来看","系统资源","对比","cv","畸变","hobot","实现","常用","进行","等","机器人","层面","运行","校正","库","协同","加速","具体","滤波","到","软硬","软硬件","算子","地平","底层","硬件","消耗","了","资源","机器","效率","的"," ","编程","系统","提升","测试","风格","在","兼容","再","集成","中","视觉","方法","多倍","便于","例如","率","高斯","opencv","上","芯片","而且","倍","做到","甚至","帧","地平线","通过","智能","接口","。","与","2","旋转","可以","引擎","图像","感知","我们","缩放","应用","开发","性能","下","，","混合"],"title":"CV图像处理量化对比","title_tokens":["图像","图像处理","处理","对比","cv","量化"]},{"location":"hhp/1.3_TogetherROS%E4%B8%8EROS%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94/#_2","text":"在AI处理方面，ROS2原生系统中并没有太多支持，只能依赖社区中的资源，很难充分发挥硬件的算力。 对此，TogetherROS集成了Hobot DNN模型推理库，集成了众多开源模型，借助底层芯片中的AI引擎BPU，提供充足的算力保障，开发者实际使用中，就不用花费很多时间在模型的调教和数据的训练上，基于这套系统，很快就可以部署人工智能应用啦。","text_tokens":["资源","库","对此","ai","的","就","调教"," ","只能","数据","太","处理","系统","基于","充足","分发","ros2","togetherros","在","依赖","很多","原生","智能","很难","开发者","。","模型","集成","部署","没有","时间","借助","可以","引擎","花费","中","很快","多","充分发挥","hobot","训练","底层","硬件","开源","提供","人工智能","应用","方面","开发","使用","推理","啦","bpu","不用","这套","社区","dnn","发挥","保障","支持","和","人工","并","了","上","芯片","，","众多","充分","实际","算力"],"title":"模型推理","title_tokens":["推理","模型"]},{"location":"hhp/1.3_TogetherROS%E4%B8%8EROS%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94/#_3","text":"在传感器层面，是大量数据传输的来源，TogetherROS也重点进行了优化，针对常用的传感器类型，系统中内置参数配置、系统调用和内存管理机制，同样是在芯片的硬件层面进行了加速和隔离，保障数据流的稳定生成。","text_tokens":["管理","传感器","内置","调用","的","生成","数据","内存","大量","系统","也","数据流","togetherros","配置","重点","在","、","加速","类型","。","优化","针对","数据传输","同样","中","传输","常用","进行","来源","管理机制","稳定","硬件","层面","据传","感器","传感","保障","和","了","隔离","芯片","，","参数","是","机制"],"title":"传感器驱动管理","title_tokens":["管理","传感","传感器","驱动","感器"]},{"location":"hhp/1.3_TogetherROS%E4%B8%8EROS%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94/#_4","text":"机器人开发过程中的性能优化和调试，也是非常繁杂的工作，TogetherROS自带火焰图等工具，可以实现系统层面的调优和测试，便于开发者挖掘系统性能。 以上这些都是TogetherROS在ROS系统之上的优化和补充，未来更多特性也会不断迭代推出，让智能机器人的开发更加简单。","text_tokens":["更","机器","调试","工具","迭代","过程","的"," ","火焰","不断","系统","也","测试","简单","之上","togetherros","在","非常","ros","未来","智能","图","开发者","调优","。","优化","繁杂","可以","工作","中","多","实现","以上","等","机器人","会","挖掘","层面","便于","开发","性能","都","特性","更加","自带","和","让","这些","，","补充","是","推出"],"title":"机器人开发工具","title_tokens":["机器","工具","机器人","开发工具","开发"]},{"location":"hhp/1.4_TogetherROS%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/","text":"TogetherROS应用场景 相比手机、电脑等通用平台，机器人的类型可是千变万化，构建机器人操作系统的难度就远比手机和电脑的操作系统要复杂很多。机器人的主流应用大致可以分为 服务机器人、工业机器人、特种机器人 三个方向，无论是在哪一方向，都会面临很多问题。比如传感器、执行器等器件选型复杂，不同场景下需要的性能和参数都有所不同，这就要求操作系统得兼容尽量多的器件。 不同场景下的计算平台算力和资源差异很大，一般都需要进行定制化的裁剪和优化，这就得有一系列工具便于系统的定制和裁剪。每个场景中的应用功能变化也很大，各种算法的集成和开发要尽量简单，算法基于的数据也在持续迭代，需要一套工具链来提供迭代和升级。 针对各种各样的需求变化，TogetherROS都提供了支持。 服务机器人 在服务机器人领域，场景和功能尤其复杂，有家里的扫地机器人，有餐厅里的送餐机器人，有咖啡店里的双臂机器人，还有物流送货的飞行机器人，虽然每一个机器人平台的构型不同，但都需要动态处理多种多样的环境变化，这就需要TogetherROS基于大量数据的AI处理和丰富的组件功能支持，快速推动各种功能的落地。 工业机器人 在工业机器人领域，目前的机器人主要以工业机械臂和物流移动机器人形态为主，场景相比服务机器人要标准很多，核心目的是要提高生产效率，这就要求机器人可以长期稳定的运行，同时实时处理各项运动功能，TogetherROS可裁剪和性能稳定等特点，都可以符合要求。 特种机器人 而在特种机器人的应用领域，结合了服务和工业场景中的不少特点，机器人形态多变，得动态处理各种复杂场景里的事件，例如火灾、地震、管道等场景，更是会发生很多不可预料的情况，TogetherROS中的AI处理可以较好的保障不同环境中的感知效果，同时端云联动，可以实现大量数据的训练和部署，不断提高对复杂环境的处理能力。 可见，TogetherROS充分考虑了众多应用场景的需求，不仅可以满足智能机器人开发过程中的每一个环节，也考虑到了机器人未来在产业中的应用效果。","text_tokens":["得","一","工具","ai","就","长期","数据","通用","处理","也","对","togetherros","服务","、","餐厅","管道","类型","尤其","多变","发生","化","各种","电脑","扫地","环节","定制","核心","实现","进行","等","机器人","比","多种","为主","三个","特点","地震","一系","大致","感器","很大","还有","每个","标准","运行","不可","主要","不仅","物流","推动","可","不断","有所","各样","家里","符合","简单","难度","臂","问题","到","系列","而","预料","无论是","每","实时处理","会","多种多样","持续","执行器","尽量","都","面临","能力","移动机器人","器件","构建","保障","选型","了","需要","众多","充分","是","领域","远","资源","机器","要求","差异","有","操作系统","一套","咖啡","迭代","效率","的","过程"," ","里","丰富","操作","大量","系统","基于","形态","同时","各种各样","动机","在","实时","很多","兼容","复杂","相比","集成","针对","较","可见","更是","考虑","构型","送餐","多样","目前","计算","结合","方向","中","送货","落地","各项","需求","多","生产","充分考虑","执行","千变万化","双臂","稳定","哪","要","满足","产业","提供","便于","但","应用领域","例如","裁剪","事件","有所不同","功能","移动","分为","可是","飞行","联动","端云","和","手机","这","升级","算法","目的","算力","以","情况","传感器","提高","变化","平台","不同","场景","未来","主流","好","一系列","智能","。","优化","一个","快速","部署","比如","机械","符合要求","可以","火灾","一般","感知","组件","训练","运动","特种","咖啡店","环境","应用","链来","开发","性能","工业","下","传感","无论","支持","不少","效果","，","参数","动态","虽然"],"title":"TogetherROS应用场景","title_tokens":["应用","togetherros","场景"]},{"location":"hhp/1.4_TogetherROS%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/#togetherros","text":"相比手机、电脑等通用平台，机器人的类型可是千变万化，构建机器人操作系统的难度就远比手机和电脑的操作系统要复杂很多。机器人的主流应用大致可以分为 服务机器人、工业机器人、特种机器人 三个方向，无论是在哪一方向，都会面临很多问题。比如传感器、执行器等器件选型复杂，不同场景下需要的性能和参数都有所不同，这就要求操作系统得兼容尽量多的器件。 不同场景下的计算平台算力和资源差异很大，一般都需要进行定制化的裁剪和优化，这就得有一系列工具便于系统的定制和裁剪。每个场景中的应用功能变化也很大，各种算法的集成和开发要尽量简单，算法基于的数据也在持续迭代，需要一套工具链来提供迭代和升级。 针对各种各样的需求变化，TogetherROS都提供了支持。","text_tokens":["得","一","工具","就","数据","通用","也","togetherros","服务","、","类型","化","各种","电脑","定制","进行","等","机器人","比","三个","一系","大致","感器","很大","每个","有所","各样","简单","难度","问题","系列","无论是","会","持续","执行器","尽量","都","面临","器件","构建","选型","了","需要","远","资源","机器","要求","差异","有","操作系统","一套","迭代","的"," ","操作","系统","基于","各种各样","在","很多","兼容","复杂","相比","集成","针对","计算","方向","中","需求","多","执行","千变万化","哪","要","提供","便于","裁剪","有所不同","功能","分为","可是","和","手机","这","升级","算法","算力","传感器","变化","平台","不同","场景","主流","一系列","。","优化","比如","可以","一般","特种","应用","链来","开发","性能","工业","下","传感","无论","支持","，","参数"],"title":"TogetherROS应用场景","title_tokens":["应用","togetherros","场景"]},{"location":"hhp/1.4_TogetherROS%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/#_1","text":"在服务机器人领域，场景和功能尤其复杂，有家里的扫地机器人，有餐厅里的送餐机器人，有咖啡店里的双臂机器人，还有物流送货的飞行机器人，虽然每一个机器人平台的构型不同，但都需要动态处理多种多样的环境变化，这就需要TogetherROS基于大量数据的AI处理和丰富的组件功能支持，快速推动各种功能的落地。","text_tokens":["领域","有","物流","机器","推动","咖啡","ai","的","就","数据","里","丰富","家里","大量","处理","变化","基于","平台","不同","togetherros","服务","场景","在","餐厅","复杂","尤其","。","一个","快速","各种","构型","扫地","送餐","多样","送货","每","落地","组件","双臂","咖啡店","机器人","多种","环境","多种多样","但","还有","都","功能","飞行","支持","和","，","需要","这","动态","虽然"],"title":"服务机器人","title_tokens":["机器","服务","机器人"]},{"location":"hhp/1.4_TogetherROS%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/#_2","text":"在工业机器人领域，目前的机器人主要以工业机械臂和物流移动机器人形态为主，场景相比服务机器人要标准很多，核心目的是要提高生产效率，这就要求机器人可以长期稳定的运行，同时实时处理各项运动功能，TogetherROS可裁剪和性能稳定等特点，都可以符合要求。","text_tokens":["领域","物流","可","机器","效率","要求","提高","的","就","长期","符合","同时","处理","形态","臂","动机","togetherros","服务","在","场景","实时","很多","相比","。","机械","符合要求","目前","可以","核心","各项","生产","运动","实时处理","为主","机器人","要","稳定","等","特点","性能","工业","裁剪","都","移动","功能","移动机器人","标准","和","运行","，","这","主要","是","目的","以"],"title":"工业机器人","title_tokens":["工业","机器","机器人"]},{"location":"hhp/1.4_TogetherROS%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/#_3","text":"而在特种机器人的应用领域，结合了服务和工业场景中的不少特点，机器人形态多变，得动态处理各种复杂场景里的事件，例如火灾、地震、管道等场景，更是会发生很多不可预料的情况，TogetherROS中的AI处理可以较好的保障不同环境中的感知效果，同时端云联动，可以实现大量数据的训练和部署，不断提高对复杂环境的处理能力。 可见，TogetherROS充分考虑了众多应用场景的需求，不仅可以满足智能机器人开发过程中的每一个环节，也考虑到了机器人未来在产业中的应用效果。","text_tokens":["得","ai","数据","处理","对","也","togetherros","服务","、","管道","多变","发生","各种","环节","实现","等","机器人","特点","地震","不可","不仅","不断","到","而","预料","每","会","能力","保障","了","众多","充分","领域","机器","的","过程"," ","里","同时","大量","形态","在","很多","复杂","较","可见","更是","考虑","结合","中","充分考虑","需求","产业","满足","应用领域","例如","事件","联动","端云","和","情况","提高","不同","场景","未来","好","智能","。","一个","部署","可以","火灾","感知","训练","特种","环境","应用","开发","工业","不少","效果","，","动态"],"title":"特种机器人","title_tokens":["机器","特种","机器人"]},{"location":"hhp/2.1_%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E5%A5%97%E4%BB%B6%E4%BB%8B%E7%BB%8D/","text":"机器人开发套件(旭日X3派)介绍 TogetherROS是一个软件系统，硬件层面当然需要一个强有力的计算平台啦。之前我们提到，TogetherROS会基于地平线的AI芯片，充分发挥硬件性能，我们如何使用这颗芯片呢？ 旭日X3派 没问题，地平线已经为我们准备好了，那就是搭载旭日X3芯片的机器人开发板——旭日X3派。 第一眼看上去，大家是否会想到树莓派呢？没错，为了适应开发者的使用习惯，兼容市面上大量已有的模块，旭日X3派的整体外观和接口形态都接近树莓派，不过面向的开发对象以及板卡的计算实力，和树莓派就完全不同了。 类似这些常用的传感器，旭日X3派统统都可以支持，未来还有更多机器人套件会出现在大家身边。 大家可以在这张表中，看到旭日X3派的硬件资源，CPU是四核A53，频率1.2Hz，在系统内还可以进行超频，BPU就是硬件级的AI引擎，这是旭日X3派相比市面上其他开发板，最大的不同，也是核心性能的主要来源，类似于业界常听到的NPU，这里使用的是地平线机器人独有的伯努利2.0架构，可以提供5Tops的等效算力支持。 内存方面，大家可以选择2GB或者4GB的版本，存储使用的是SD卡，我们可以自行选择，只要大于8GB就可以啦。 在多媒体方面，旭日X3派支持硬件级别的H265和H264编解码，常用的图像和视频都可以流畅播放。 接口方面，尽量可以满足我们常用外接设备和开发的需求，这里是一个CSI的相机接口，板载USB有3个，包含1个USB3.0和2个USB2.0，这里是一个板载的调试串口，我们可以通过它获取系统层面的很多调试信息，也可以与板卡进行通信。 板卡上也搭载了有线网络和无线网络，这个有线网口我们可以直接用网线连接到电脑，就可以在电脑上远程登录和板卡通信了，或者连接到路由器，让板卡直接上网，无线网络和蓝牙是一个二合一的模块，我们也可以直接通过wiki，让板卡连接到某个网络中。 显示接口主要是这里的HDMI，如果我们先要看到系统界面，或者后续很多视觉例程的识别效果，都可以通过HDMI外接一个显示器进行显示。 最后还有至关重要的扩展接口，有40个引脚，和树莓派的接口定义一致，什么GPIO、串口、I2C、SPI等等，一应俱全。 这块板卡我们在使用的时候，推荐使用5V3A的电源，通过TypeC线连接到这里供电，官方提供的系统目前是Ubuntu20.04，使用起来和原生系统没有太大差别。 总体来讲， 旭日X3派是一款面向生态开发者的嵌入式AI开发板，接口兼容树莓派，具有5Tops的端侧推理算力，以及4核ARM A53的处理能力。 面对个人开发者，旭日X3派可以让每一位开发者拥有自己的AI开发套件，不再受开发板高昂的价格限制，面对高等院校，使用旭日X3派开发套件探索AI和机器人应用是学习的开始，有助于学生快速入门人工智能与机器人开发，面对产业，旭日X3派以及地平线的AI工具链，可以帮助客户将产品尽快推向市场，快速落地智能机器人方向的解决方案。 旭日X3M芯片 在旭日X3派上，最为核心的当然就是这颗AI芯片了，这是关于芯片的具体信息，供大家参考。 值得一提的是，随着芯片的技术迭代，2023年，地平线将推出X5芯片，比较大的变化是CPU升级到了8核A55，主频提升到1.8GHz，BPU的算力也将达到8Tops，还加入了GPU，以及更多可扩展的接口。 在使用旭日X3派的过程中，大家也可以期待旭日X5派了。 旭日X3派接口 好啦，还是回到旭日X3派的开发接口上来，我们再做一个整理，这些就是我们使用开发板进行智能机器人开发过程中，最为常用的接口啦。 大家目前在树莓派或者其他开发板上使用的绝大部分模块，基本都可以在旭日X3派上复用，同时还有更多智能化的玩法等着大家。 关于40Pin扩展接口的序号排布，大家可以看这里，引脚的序号是从靠近HDMI板卡内测的开始算起，是引脚1，然后依次蛇形计数，分别是1、2、3、4、5，一直到这里是39和40。 上图是40PIN扩展接口的详细定义，有3.3V和5V的电源信号，有I2C、I2S、SPI、UART等通信接口，还有很多可动态配置的GPIO信号，基本可以满足各种各样的机器人开发啦。 好啦，关于旭日X3派这块开发板我们已经了解清楚了，具体该如何使用呢，我们后续操作起来。","text_tokens":["通信接口","合一","就","处理","强有力","配置","独有","分别","板卡","有力","无线网络","线","没","市面","核心","机器人","是否","个人","有助于","开发板","还有","bpu","高昂","至关","蛇形","尽快","一位","绝大部分","一应俱全","无线网",")","已经","着","太","基本","为了","二合一","了解","到","ubuntu20.04","伯努利","sd","搭载","编解码","会","依次","如果","x3","当然","4gb","需要","连接","这个","架构","资源","有","内","usb3.0","的","外观","系统","详细","各种各样","分发","该","定义","绝大","目前","具有","计算","这是","落地","中","值得一提的是","上网","还","提供","一款","市场","那","npu","接口定义","人工","例程","上","产品","张表中","升级","其他","介绍","传感器","接设备","算","拥有","嵌入","常听到","。","想到","一个","四核","远程","一致","等等","8","应用","hz","派","习惯","v","用","spi","外接","供电","玩法","工具","软件","ai","3","大部","树莓","也","信息","已有","达到","、","开始","各种","电脑","时候","上来","人工智能","方面","嵌入式","gpio","i2c","感器","只要","usb2.0","实力","看","具体","将","引脚","解码","起","板载","3.3","对象","电源","hdmi","识别","帮助","路由器","看上去","5v","2.0","是","这块","直接","核","操作","大量","同时","提升","先","串口","原生","再","或者","部分","h265","为","方向","主频","需求","回到","来源","满足","x5","总体","呢","流畅","等效","和","推向","芯片","自行","端侧","听到","2gb","俱全","以及","平台","级","助于","信号","接口","口","与","是从","图像","我们","网线","差别","wiki","自己","gpu","序号","效果","，","1","上去","入门","统统","csi","uart","大于","包含","播放","视频","如何","5","解决方案","不过","有线网","没有","内测","线网","常用","进行","个","啦","层面","调试信息","随着","还是","(","有线","主要","没错","可","最为","获取","旭日","供","问题","开发者","40","5tops","充分发挥","多媒体","解决","硬件","类似","面向","尽量","都","某个","能力","复用","4","高等院校","后续","typec","推出","基于","出现","蓝牙","第一眼","官方","显示器","相比","值得","8gb","i2s","做","40pin","院校","网络","产业","要","使用","5v3a","提到","市面上","这些","至关重要","一直","无线","之前","存储","a55","第一","期待","接近","不同","排布","智能","软件系统","快速","看上","可以","大部分","设备","面上","模块","性能","整体","价格","然后","加入","链","动态","更","探索","重要","togetherros","不再","推荐","卡","界面","生态","完全","二合","usb","ghz","这颗","39","等","大家","超频","一眼","路由","大","它","有助","来讲","起来","这里","2023","相机","扩展","套件","内存","各样","硬件资源","最大","cpu","x3m","外","每","参考","地平","arm","比较","整理","发挥","了","充分","身边","于","1.2","机器","调试","？","一应","迭代","过程","上图","适应"," ","技术","形态","a53","靠近","在","很多","兼容","限制","媒体","高等","看到","多","视觉","最后","频率","通信","关于","学习","h264","这","面对","受","方案","推理","1.8","算力","级别","业界","学生","准备","变化","地平线","通过","未来","好","8tops","就是","什么","2","计数","版本","引擎","推向市场","客户","选择","显示","开发","智能化","年","传感","登录","清楚","支持","让","—"],"title":"机器人开发套件介绍","title_tokens":["介绍","机器","套件","机器人","开发"]},{"location":"hhp/2.1_%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E5%A5%97%E4%BB%B6%E4%BB%8B%E7%BB%8D/#x3","text":"TogetherROS是一个软件系统，硬件层面当然需要一个强有力的计算平台啦。之前我们提到，TogetherROS会基于地平线的AI芯片，充分发挥硬件性能，我们如何使用这颗芯片呢？","text_tokens":["软件","ai","的","？","系统","强有力","基于","地平线","平台","分发","togetherros","软件系统","如何","。","有力","一个","计算","我们","充分发挥","这颗","地平","会","硬件","啦","层面","使用","性能","呢","提到","发挥","当然","芯片","，","需要","充分","是","之前"],"title":"机器人开发套件(旭日X3派)介绍","title_tokens":["机器","介绍","(",")","套件","机器人","开发","旭日","x3","派"]},{"location":"hhp/2.1_%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E5%A5%97%E4%BB%B6%E4%BB%8B%E7%BB%8D/#x3_1","text":"没问题，地平线已经为我们准备好了，那就是搭载旭日X3芯片的机器人开发板——旭日X3派。 第一眼看上去，大家是否会想到树莓派呢？没错，为了适应开发者的使用习惯，兼容市面上大量已有的模块，旭日X3派的整体外观和接口形态都接近树莓派，不过面向的开发对象以及板卡的计算实力，和树莓派就完全不同了。 类似这些常用的传感器，旭日X3派统统都可以支持，未来还有更多机器人套件会出现在大家身边。 大家可以在这张表中，看到旭日X3派的硬件资源，CPU是四核A53，频率1.2Hz，在系统内还可以进行超频，BPU就是硬件级的AI引擎，这是旭日X3派相比市面上其他开发板，最大的不同，也是核心性能的主要来源，类似于业界常听到的NPU，这里使用的是地平线机器人独有的伯努利2.0架构，可以提供5Tops的等效算力支持。 内存方面，大家可以选择2GB或者4GB的版本，存储使用的是SD卡，我们可以自行选择，只要大于8GB就可以啦。 在多媒体方面，旭日X3派支持硬件级别的H265和H264编解码，常用的图像和视频都可以流畅播放。 接口方面，尽量可以满足我们常用外接设备和开发的需求，这里是一个CSI的相机接口，板载USB有3个，包含1个USB3.0和2个USB2.0，这里是一个板载的调试串口，我们可以通过它获取系统层面的很多调试信息，也可以与板卡进行通信。 板卡上也搭载了有线网络和无线网络，这个有线网口我们可以直接用网线连接到电脑，就可以在电脑上远程登录和板卡通信了，或者连接到路由器，让板卡直接上网，无线网络和蓝牙是一个二合一的模块，我们也可以直接通过wiki，让板卡连接到某个网络中。 显示接口主要是这里的HDMI，如果我们先要看到系统界面，或者后续很多视觉例程的识别效果，都可以通过HDMI外接一个显示器进行显示。 最后还有至关重要的扩展接口，有40个引脚，和树莓派的接口定义一致，什么GPIO、串口、I2C、SPI等等，一应俱全。 这块板卡我们在使用的时候，推荐使用5V3A的电源，通过TypeC线连接到这里供电，官方提供的系统目前是Ubuntu20.04，使用起来和原生系统没有太大差别。 总体来讲， 旭日X3派是一款面向生态开发者的嵌入式AI开发板，接口兼容树莓派，具有5Tops的端侧推理算力，以及4核ARM A53的处理能力。 面对个人开发者，旭日X3派可以让每一位开发者拥有自己的AI开发套件，不再受开发板高昂的价格限制，面对高等院校，使用旭日X3派开发套件探索AI和机器人应用是学习的开始，有助于学生快速入门人工智能与机器人开发，面对产业，旭日X3派以及地平线的AI工具链，可以帮助客户将产品尽快推向市场，快速落地智能机器人方向的解决方案。","text_tokens":["合一","就","处理","独有","板卡","无线网络","线","没","市面","核心","机器人","是否","个人","有助于","开发板","还有","bpu","高昂","至关","尽快","一位","一应俱全","无线网","已经","太","为了","二合一","到","ubuntu20.04","伯努利","sd","搭载","编解码","会","如果","x3","4gb","连接","这个","架构","资源","有","内","usb3.0","的","外观","系统","定义","目前","具有","计算","这是","落地","中","上网","还","提供","一款","市场","那","npu","接口定义","人工","例程","上","产品","张表中","其他","传感器","接设备","拥有","嵌入","常听到","。","想到","一个","四核","远程","一致","等等","应用","hz","派","习惯","用","spi","外接","供电","工具","ai","3","树莓","也","信息","已有","、","开始","电脑","时候","人工智能","方面","嵌入式","gpio","i2c","感器","只要","usb2.0","实力","将","引脚","解码","板载","对象","电源","hdmi","识别","帮助","路由器","看上去","2.0","是","这块","直接","核","大量","先","串口","原生","或者","h265","为","方向","需求","来源","满足","总体","呢","流畅","等效","和","推向","芯片","自行","端侧","听到","2gb","俱全","以及","级","助于","接口","口","与","图像","我们","网线","差别","wiki","自己","效果","，","1","上去","入门","统统","csi","大于","包含","播放","视频","解决方案","不过","有线网","没有","线网","常用","进行","个","啦","层面","调试信息","有线","主要","没错","获取","旭日","问题","开发者","40","5tops","多媒体","解决","硬件","类似","面向","尽量","都","某个","能力","4","高等院校","后续","typec","出现","蓝牙","第一眼","官方","显示器","相比","8gb","院校","网络","产业","要","使用","5v3a","市面上","这些","至关重要","无线","存储","第一","接近","不同","智能","快速","看上","可以","设备","面上","模块","性能","整体","价格","链","更","探索","重要","不再","推荐","卡","界面","生态","完全","二合","usb","大家","超频","一眼","路由","大","它","有助","来讲","起来","这里","相机","扩展","套件","内存","硬件资源","最大","cpu","外","每","地平","arm","了","身边","于","1.2","机器","调试","？","一应"," ","适应","形态","a53","在","很多","兼容","限制","媒体","高等","看到","多","视觉","最后","频率","通信","学习","h264","这","面对","受","方案","推理","算力","级别","业界","学生","准备","地平线","通过","未来","好","就是","什么","2","版本","引擎","推向市场","客户","选择","显示","开发","传感","登录","支持","让","—"],"title":"旭日X3派","title_tokens":["旭日","x3","派"]},{"location":"hhp/2.1_%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E5%A5%97%E4%BB%B6%E4%BB%8B%E7%BB%8D/#x3m","text":"在旭日X3派上，最为核心的当然就是这颗AI芯片了，这是关于芯片的具体信息，供大家参考。 值得一提的是，随着芯片的技术迭代，2023年，地平线将推出X5芯片，比较大的变化是CPU升级到了8核A55，主频提升到1.8GHz，BPU的算力也将达到8Tops，还加入了GPU，以及更多可扩展的接口。 在使用旭日X3派的过程中，大家也可以期待旭日X5派了。","text_tokens":["更","可","核","a55","最为","ai","迭代","的","扩展","过程"," ","期待","技术","变化","提升","信息","地平线","旭日","也","以及","达到","在","供","cpu","具体","8tops","值得","将","到","接口","。","就是","可以","这是","核心","参考","主频","ghz","值得一提的是","多","8","这颗","中","地平","x5","还","比较","大家","随着","使用","x3","派","bpu","关于","年","大","gpu","当然","上","了","加入","芯片","，","2023","1.8","升级","是","推出","算力"],"title":"旭日X3M芯片","title_tokens":["芯片","旭日","x3m"]},{"location":"hhp/2.1_%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%BC%80%E5%8F%91%E5%A5%97%E4%BB%B6%E4%BB%8B%E7%BB%8D/#x3_2","text":"好啦，还是回到旭日X3派的开发接口上来，我们再做一个整理，这些就是我们使用开发板进行智能机器人开发过程中，最为常用的接口啦。 大家目前在树莓派或者其他开发板上使用的绝大部分模块，基本都可以在旭日X3派上复用，同时还有更多智能化的玩法等着大家。 关于40Pin扩展接口的序号排布，大家可以看这里，引脚的序号是从靠近HDMI板卡内测的开始算起，是引脚1，然后依次蛇形计数，分别是1、2、3、4、5，一直到这里是39和40。 上图是40PIN扩展接口的详细定义，有3.3V和5V的电源信号，有I2C、I2S、SPI、UART等通信接口，还有很多可动态配置的GPIO信号，基本可以满足各种各样的机器人开发啦。 好啦，关于旭日X3派这块开发板我们已经了解清楚了，具体该如何使用呢，我们后续操作起来。","text_tokens":["更","通信接口","uart","3","大部","树莓","配置","分别","、","板卡","5","如何","开始","各种","上来","内测","39","常用","进行","等","机器人","啦","大家","gpio","还是","i2c","开发板","还有","蛇形","起来","这里","绝大部分","可","最为","看","扩展","着","各样","已经","基本","旭日","了解","具体","到","40","引脚","起","3.3","电源","hdmi","依次","x3","都","整理","复用","4","5v","了","后续","是","这块","有","机器","上图","的","过程"," ","操作","同时","详细","各种各样","靠近","在","很多","该","再","i2s","或者","绝大","做","定义","目前","部分","中","多","回到","40pin","满足","使用","通信","关于","呢","和","上","这些","一直","其他","算","信号","排布","好","智能","接口","。","就是","一个","计数","2","是从","可以","我们","大部分","开发","模块","智能化","派","v","清楚","spi","序号","然后","，","动态","1","玩法"],"title":"旭日X3派接口","title_tokens":["旭日","x3","派","接口"]},{"location":"hhp/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/","text":"TogetherROS系统安装 我们在旭日X3派上安装系统镜像，并进一步完成TogetherROS的安装，大家如果手上有旭日X3派开发板的话，建议跟随一起操作。 先来了解一下TogetherROS安装的整体流程： 第一步，要完成硬件的准备，我们需要找到一块旭日X3派的开发板，并且准备好电源线、SD卡、读卡器、串口模块等必要的配件，当然还需要有一台操作的电脑啦。 硬件都准备好之后，就可以进入第二步，给旭日X3派下载并安装Ubuntu系统镜像，这是TogetherROS软件运行必要的底层环境。 第三步，就可以开始安装TogetherROS啦。 安装完成后，我们还需要进一步完成一些配置工作，可以也让旭日X3派板卡上的各项功能都运行起来，保证TogetherROS的顺利运行。 最后一步，就是体验TogetherROS出厂自带的一些例程啦，确定一切安装顺利，为后续机器人开发最好准备。 接下来，我们就按照这个流程，开始操作。 硬件准备 先来完成硬件准备： 找到一块旭日X3派的板卡，准备好一套5V3A的电源和TypeC电源线，稍后会连接到这里的电源接口，给板卡供电。 然后准备好一张8GB以上的SD卡和读卡器，下一步我们会在上边烧写系统镜像。 接下来使用一个串口模块，连接旭日X3派和笔记本电脑，便于下一步看到系统镜像的启动信息。 如果大家有网线和HDMI显示器的话，也可以先准备好，在之后的操作中用的上，如果没有也没关系，不影响TogetherROS的基本使用。 硬件准备齐全之后，就可以进入第二步了。 安装Ubuntu系统 我们来给旭日X3派安装Ubuntu系统，关于系统镜像和烧写工具，都可以在 地平线AI社区 中找到。 下载SD卡镜像 首先登录地平线AI社区，点击”产品中心——资源中心“， 进入页面后下拉至”X3派资料包“专区，其中有两个镜像，点击下载其中的”旭日X3派系统镜像（服务版）“，会有一个压缩包，把它保存到当前电脑桌面。 此外，我们稍后将镜像烧写到SD卡里，需要用到烧写小工具，如果大家电脑上没有合适的工具，可以下拉到”工具“专区，点击下载”烧录 工具rufus\"。 下载完后我们来看一下两个压缩文件中的内容： 其中一个是烧写X3派镜像文件的工具，压缩包中有两个文件，一个是system_sdcard.img文件，是我们稍后会用于烧写SD卡的镜像文件；另一个是disk_nand.img文件，用于烧写旭日X3派中的flash文件，大多数情况下都用不到； 另一个压缩包里是我们稍后用于烧写镜像的rufus工具。 我们把两个压缩包都解压出来，然后把SD卡放进读卡器、插到电脑端 接下来就可以开始烧写SD卡镜像。 烧写SD卡镜像 运行解压出来的烧写工具rufus。启动后需要确认几个参数： 第一个是确定烧写到哪个磁盘上。工具软件会默认搜索当前读取到的SD卡，下图所示磁盘名称，就是演示时插好的16GB的SD卡。 下一步我们点击“选择”，找到需要烧写的镜像文件。演示中已经把需要的system_sdcrd.img文件放在了桌面上，选中它点击“打开”； 下面的内容就可以用默认的配置，点击“开始”会弹出警告告诉我们将把磁盘里的所有文件都清除掉，这没有问题，我们点击“选择“，就开始烧写SD卡镜像了。 进度条显示“准备就绪”后，点击“关闭”，此时你的SD卡镜像就已经烧写完成了，我们把SD卡的读卡器拔出来。 连接串口 接下来把SD卡插到旭日X3派上。 把串口模块连接到电脑的USB上。 连接好串口模块后，为了确保串口已经跟电脑连接成功、并且安装好了驱动，我们可以右键“我的电脑”图标、选择“管理”，在打开的”计算机管理“界面中找到”设备管理器——端口“，检查一下你的USB串口是否已经显示出了对应的设备。演示中的端口号为COM6,说明串口已经成功驱动了。 如果没有看到自己的设备号、或者设备号前有一个叹号或者问号标记，说明你的驱动没有安装好，可以搜索网络上的技术博客，来完成串口模块的驱动安装。 关闭“计算机管理”窗口，接下来就要通过串口与旭日X3派进行连接了。这里我们需要用到一个串口小工具，大家可以使用自己常用的工具。 演示中使用的串口工具是MobaXterm,十分推荐大家使用这个工具，里面集成了开发过程中需要使用的各种小工具，我们后续的串口通讯、SSH网络通讯，都会使用这些工具完成。 打开MobaXterm,点击左上角的\"Session\"； 找到里面的“Serial\"串口选项，点击打开；串口号选择本机连接到旭日X3派的相应端口，演示中为COM6; 波特率选择921600。选项好后点击“OK”。 现在串口已经连接成功了，但当前旭日X3派的板子还没有上电，所以没有任何信息弹出。 我们把电源线与旭日X3派连接好。 可以看到弹出了日志提醒：“当前系统正在启动”。等待系统加载完成。 现在可以看到系统已经加载成功了。 串口登录系统 接下来我们需要登录系统。我们有两个账号可以用来登录： 账号1：用户名为root，密码也为root； 账号2：用户名为storise，密码也为storise； 这里演示使用root用户来登录。输入用户名、密码，回车，需要等待大约1分钟，因为第一次登录需要展开一些系统必要的安装软件，安装好后系统会自动重启。 系统自动重启后，再次使用root用户登录。现在你的UBUNTU系统就已经安装好了。 我们可以使用LINUX系统常用的一些命令行进行查看和设置，比如ls查看当前命令，pwd查看当前路径，还可以使用mkdir命令创建文件夹，比如这里,一个test文件夹就创建成功了。 到这里为止，旭日X3派上的Ubuntu系统就安装成功啦，我们继续下一步。 安装TogetherROS 接下来安装TogetherROS。 为了达到更好的通信效率，我们后续使用有线网络连接旭日X3派，这里大家可以拿出一根网线，直接连接电脑和旭日X3派的网口。 旭日X3派中出厂已经配置好了静态IP地址，是192.168.1.10，我们将使用的电脑也配置到同一网段即可。 配置有线网络 接下来请大家拿一根网线，连接旭日X3派和电脑。 然后，在电脑端打开控制面板，找到“查看网络状态和任务”。 找到已经连接成功的以太网，点击它； 会弹出一个窗口，我们点击“属性”。 再次弹出窗口，我们双击选择“Internet协议版本4”。 然后会弹出一个配置IP地址的窗口，我们勾选”使用下面的IP地址“。 按照如下信息填入： IP地址：192.168.1.100 子网掩码：255.255.255.0 默认网关：192.168.1.1 我们使用的旭日X3派的板子IP为192.168.1.10，所以IP后三位除了.10和网关.1以外，大家可以选用1-255之间的任意数字，这里使用.100； 填写完在所有窗口点击“确定”，最后关闭窗口。现在网络的配置就完成了，此时电脑端的静态IP就是192.168.1.100,我们通过这个IP与旭日X3派产生连接。 SSH远程登录 我们再次打开MobaXterm软件,点击左上角的\"Session\"，找到里面的\"SSH\",输入 旭日X3派板子的IP192.168.1.10，点击”OK“。 弹出登录窗口，我们用root账户登录：用户名为root，密码为root。这里会弹窗询问是否保存登录密码，如果需要保存就点“YES”，不需要保存就点“NO”。 现在我们就成功通过网络SSH协议登录到了旭日X3派板子上，和之前我们用串口登录的效果几乎是一样的，但现在我们是用网络通讯，所以现在通讯的效率和传输的速度会更高。 配置完成网络通讯后，我们来正式安装TogetherROS。 安装TogetherROS 我们在登录成功的SSH终端中，直接使用如下命令即可安装： $ sudo apt install hhp 等待安装完成： $ root@ubuntu:~# sudo apt install hhp Reading package lists... Done Building dependency tree Reading state information... Done The following NEW packages will be installed: hhp 0 upgraded, 1 newly installed, 0 to remove and 52 not upgraded. Need to get 384 MB of archives. After this operation, 512 MB of additional disk space will be used. Get:1 http://42.62.85.28/ubuntu-ports focal/main arm64 hhp arm64 1 .0.1 [ 384 MB ] Fetched 384 MB in 6min 43s ( 954 kB/s ) Selecting previously unselected package hhp. ( Reading database ... 110406 files and directories currently installed. ) Preparing to unpack .../archives/hhp_1.0.1_arm64.deb ... Unpacking hhp ( 1 .0.1 ) ... Setting up hhp ( 1 .0.1 ) ... Generating locales ( this might take a while ) ... en_US.ISO-8859-1... done en_US.UTF-8... done Generation complete. 安装完成后，查看/opt目录下的文件，可以看到已经安装： $ root@ubuntu:/userdata# ls /opt/ tros 如果觉得终端里看不方便，也可以使用MobaXterm软件的可视化浏览器来查看。 大家可以点击/opt/tros文件夹，看看其中的文件结构。 /include文件夹里，是我们后续会用到的关于系统的头文件的调用路径； /lib文件夹里面是库文件； /share文件夹里是安装好的功能包的路径； /src文件夹里是后续会用到的代码； /tools文件夹里是一些小工具。 除此之外，还有很多.bat、.sh脚本文件，它们是用来设置环境变量的。这是因为，你的LINUX系统不知道你安装包的路径在哪，所以需要通过环境变量的脚本来告诉系统，如何找到对应的TogetherROS的功能包、和功能包里的命令工具。 环境变量在我们后续操作里会频繁地使用到，我们会使用到一个”source\"命令来配置环境变量，例如： $ source /opt/tros/setup.bash 运行上面这行命令，就会把当前环境变量设置到系统里去；下次再运行ROS2、TogetherROS指令时，就能找到功能包的路径了。 到这里，TogetherROS软件系统安装完成，下一节我们将对开发板和TogetherROS进行配置。","text_tokens":["专区","就","a","烧写","端口","三步","配置","保证","installed","板卡","博客","mobaxterm","会弹","用户名","used","点击","任何","就要","并且","好后","lists","unselected","root","第三步","相应","机器人","be","s","找到","是否","子网掩码","255.0","开发板","还有","921600",",","查看","检查","头文件","右键","制面","main","所示","正在","重启","用户",")","已经","基本","为了","了解","你","跟","到",";","一根","ip192.168","files","ip","reading","时","directories","进度","tree","ok","sd","解压","\"","进入","#","频繁","会","工具软件","en","行","电脑桌面","双击","us","如果","x3","电脑桌","第二步","不到","演示","include","fetched","sdcrd","当然","页面","需要","连接","写","这个","路径","有","资源","变量","文件","的","com6","关系","系统","保存","serial","其中","集成","即可","deb","flash","没关系","计算","这是","稍后","中","database","source","storise","命令行","哪","还","additional","日志","功能","社区","以太","43s","齐全","知道","preparing","回车","例程","上","产品","目录","看看","110406","情况",":","警告","of","属性","包","多数","网络通讯","下图","。","必要","一个","打开","sdcard","指令","userdata","远程","8","接下","掉","安装包","状态","take","派","下","setting","能","子网","用","影响","完成","供电","管理","放在","面板","工具","软件","ai","generating","the","选项","也","信息","达到","数字","、","把","名为","开始","各种","给","电脑",".","出","烧","板子","1.10","流程","src","确定","16gb","一步","session","终端","手上","currently","串","@","合适","mb","另","看","分钟","might","sudo","kb","下次","完后","将","默认","理器","中心","出来","电源","按照","hdmi","上边","叹","$","底层","驱动","locales","任务","波特","产生","一台","new","255","启动","是","information","里会","直接","计算机","效率","浏览器","调用","unpacking","操作","一切","following","先","串口","准备就绪","环境变量","再","或者","窗口","结构","为","配件","各项","压缩文件","镜像","mkdir","前","_","一样","版","apt","和","拿","问号","清除","拿出","就点","所有","ports","说明","package","一起","当前","两个","再次","一节","接口","selecting","代码","1.100","与","0.1","账户","dependency","件夹","弹出","newly","lib","我们","网线","镜像文件","更好","nand","0","几乎","中有","building","第二","：","压缩","setup","一些","自己","二步","协议","之间","效果","，","参数","算机","1","它们","选用","波特率","出厂","如何","填入","没有","ls","以外","下面","来看","传输","任意","常用","读卡器","进行","展开","100","啦","没关","确保","拉到","卡里","端的","密码","桌面上","上电","(","下拉到","img","有线","关闭","脚本","询问","；","库","install","to","255.255","我","旭日","弹窗","while","网口","问题","第一个","share","口号","工作","第一步","in","up","硬件","掩码","都","6min","觉得","十分","之后","自带","4","填写","后续","typec","输入","设置","除此","等待","一套","网关","不","里","以太网","顺利","hhp","显示器","图标","现在","complete","8gb","disk","笔记本","烧录","地址","下拉","资料","generation","如下","勾选","压缩包","哪个","10","网络","test","小","跟随","要","rufus","但","例如","使用","搜索","磁盘","5v3a","首先","这些","自动","iso","之前","done","的话","第一","创建","bat","（","就绪","接下来","左上角","放进","大多数","因为","电源线","之外","请","读卡","linux","正式","软件系统","一块","控制面板","户名","可以","~","选中","除了","arm64","用于","internet","环境","设备","面上","模块","端","整体","安装","继续","插","提醒","并","此时","然后","速度","通讯","去","一张","网络连接","中为","更","954","remove","]","一下","命令","/","可视","对","state","togetherros","服务","确认","ros2","此外","system","no","need","推荐","卡","界面","yes","端口号","可视化","最好","同一","usb","控制","space","后","this","以上","42.62","[","等","”","下拉至","大家","它","上角","运行","52","operation","起来","成功","这里","after","opt","1.0","not","左上","机","三位","地","bash","高","85.28","拔出来","几个","focal","静态","previously","512","浏览","告诉","建议","所以","-","地平","管理器","packages","一次","1.1","...","tros","文件夹","下载","了","加载","ip地址","中用","检查一下","机器","笔记","archives","读取","过程"," ","大约","技术","上面","电源接口","在","号","很多","进一步","ubuntu","第三","sh","用到","will","看到","最后","计算机管理","便于","“","ssh","384","http","通信","关于","utf","除此之外","upgraded","这","）","名称","弹","第一次","pwd","来","unpack","准备","大多","完在","环境变","网段","地平线","通过","体验","好","就是","拔出","比如","2","是因为","包里","版本","8859","对应","进度条","里面","and","账号","get","方便","本","显示","选择","笔记本电脑","tools","开发","标记","下来","登录","内容","让","为止","—","192.168","用来","桌面"],"title":"TogetherROS系统安装","title_tokens":["系统","安装","togetherros"]},{"location":"hhp/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#togetherros","text":"我们在旭日X3派上安装系统镜像，并进一步完成TogetherROS的安装，大家如果手上有旭日X3派开发板的话，建议跟随一起操作。 先来了解一下TogetherROS安装的整体流程： 第一步，要完成硬件的准备，我们需要找到一块旭日X3派的开发板，并且准备好电源线、SD卡、读卡器、串口模块等必要的配件，当然还需要有一台操作的电脑啦。 硬件都准备好之后，就可以进入第二步，给旭日X3派下载并安装Ubuntu系统镜像，这是TogetherROS软件运行必要的底层环境。 第三步，就可以开始安装TogetherROS啦。 安装完成后，我们还需要进一步完成一些配置工作，可以也让旭日X3派板卡上的各项功能都运行起来，保证TogetherROS的顺利运行。 最后一步，就是体验TogetherROS出厂自带的一些例程啦，确定一切安装顺利，为后续机器人开发最好准备。 接下来，我们就按照这个流程，开始操作。","text_tokens":["一下","软件","就","三步","也","出厂","togetherros","配置","保证","、","板卡","卡","开始","给","电脑","最好","并且","后","第三步","读卡器","等","机器人","啦","找到","大家","流程","开发板","确定","一步","运行","手上","起来","旭日","了解","电源","建议","sd","工作","按照","第一步","进入","底层","硬件","如果","x3","都","第二步","之后","自带","一台","下载","当然","需要","后续","这个","有","机器","的"," ","操作","系统","一切","顺利","先","在","串口","进一步","ubuntu","第三","这是","配件","为","各项","最后","跟随","要","镜像","还","功能","例程","上","的话","第一","一起","来","准备","接下来","电源线","读卡","体验","好","。","一块","必要","就是","可以","我们","接下","环境","第二","开发","模块","整体","：","派","下来","安装","一些","让","二步","并","完成","，"],"title":"TogetherROS系统安装","title_tokens":["系统","安装","togetherros"]},{"location":"hhp/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#_1","text":"先来完成硬件准备： 找到一块旭日X3派的板卡，准备好一套5V3A的电源和TypeC电源线，稍后会连接到这里的电源接口，给板卡供电。 然后准备好一张8GB以上的SD卡和读卡器，下一步我们会在上边烧写系统镜像。 接下来使用一个串口模块，连接旭日X3派和笔记本电脑，便于下一步看到系统镜像的启动信息。 如果大家有网线和HDMI显示器的话，也可以先准备好，在之后的操作中用的上，如果没有也没关系，不影响TogetherROS的基本使用。 硬件准备齐全之后，就可以进入第二步了。","text_tokens":["就","烧写","也","信息","togetherros","板卡","卡","没有","给","电脑","以上","读卡器","找到","没关","大家","一步","供电","这里","基本","旭日","到","电源","sd","hdmi","进入","上边","会","硬件","如果","x3","第二步","之后","了","连接","中用","启动","typec","有","一套","笔记","的"," ","关系","不","操作","系统","先","电源接口","在","显示器","串口","8gb","笔记本","没关系","稍后","看到","镜像","便于","使用","5v3a","齐全","和","上","的话","来","准备","接下来","电源线","读卡","好","接口","一块","。","一个","可以","我们","网线","接下","显示","第二","笔记本电脑","模块","：","派","下","下来","影响","二步","然后","完成","，","一张"],"title":"硬件准备","title_tokens":["准备","硬件"]},{"location":"hhp/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#ubuntu","text":"我们来给旭日X3派安装Ubuntu系统，关于系统镜像和烧写工具，都可以在 地平线AI社区 中找到。","text_tokens":["工具","ai","来"," ","系统","地平线","旭日","在","。","ubuntu","给","可以","中","烧","我们","地平","镜像","找到","x3","派","都","关于","社区","安装","和","，","写"],"title":"安装Ubuntu系统","title_tokens":["ubuntu","安装","系统"]},{"location":"hhp/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#sd","text":"首先登录地平线AI社区，点击”产品中心——资源中心“， 进入页面后下拉至”X3派资料包“专区，其中有两个镜像，点击下载其中的”旭日X3派系统镜像（服务版）“，会有一个压缩包，把它保存到当前电脑桌面。 此外，我们稍后将镜像烧写到SD卡里，需要用到烧写小工具，如果大家电脑上没有合适的工具，可以下拉到”工具“专区，点击下载”烧录 工具rufus\"。 下载完后我们来看一下两个压缩文件中的内容： 其中一个是烧写X3派镜像文件的工具，压缩包中有两个文件，一个是system_sdcard.img文件，是我们稍后会用于烧写SD卡的镜像文件；另一个是disk_nand.img文件，用于烧写旭日X3派中的flash文件，大多数情况下都用不到； 另一个压缩包里是我们稍后用于烧写镜像的rufus工具。 我们把两个压缩包都解压出来，然后把SD卡放进读卡器、插到电脑端 接下来就可以开始烧写SD卡镜像。","text_tokens":["专区","工具","ai","一下","就","烧写","服务","此外","system","、","把","卡","开始","没有","点击","电脑","来看",".","后","烧","读卡器","”","下拉至","大家","拉到","卡里","它","下拉到","img","合适","；","另","旭日","完后","将","到","中心","出来","sd","解压","\"","进入","地平","会","电脑桌面","如果","x3","电脑桌","都","不到","下载","页面","需要","写","是","资源","有","文件","的"," ","里","系统","保存","其中","disk","烧录","下拉","资料","用到","flash","稍后","中","压缩包","压缩文件","小","rufus","镜像","“","_","社区","首先","版","上","产品","）","情况","（","大多","当前","放进","大多数","接下来","包","两个","地平线","多数","读卡","。","一个","可以","sdcard","我们","镜像文件","接下","用于","nand","中有","端","：","压缩","派","下","下来","用","登录","内容","插","—","然后","，","桌面"],"title":"下载SD卡镜像","title_tokens":["镜像","卡","下载","sd"]},{"location":"hhp/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#sd_1","text":"运行解压出来的烧写工具rufus。启动后需要确认几个参数： 第一个是确定烧写到哪个磁盘上。工具软件会默认搜索当前读取到的SD卡，下图所示磁盘名称，就是演示时插好的16GB的SD卡。 下一步我们点击“选择”，找到需要烧写的镜像文件。演示中已经把需要的system_sdcrd.img文件放在了桌面上，选中它点击“打开”； 下面的内容就可以用默认的配置，点击“开始”会弹出警告告诉我们将把磁盘里的所有文件都清除掉，这没有问题，我们点击“选择“，就开始烧写SD卡镜像了。 进度条显示“准备就绪”后，点击“关闭”，此时你的SD卡镜像就已经烧写完成了，我们把SD卡的读卡器拔出来。","text_tokens":["放在","工具","软件","就","烧写","确认","配置","system","把","会弹","卡","开始","没有","下面","点击",".","出","后","烧","读卡器","”","找到","桌面上","它","确定","16gb","img","一步","运行","关闭","所示","；","已经","问题","将","第一个","到","你","拔出来","默认","几个","时","进度","出来","告诉","sd","解压","会","工具软件","都","演示","sdcrd","了","写","启动","需要","是","文件","读取","的"," ","里","准备就绪","中","哪个","rufus","镜像","“","搜索","磁盘","_","上","清除","这","名称","所有","第一","就绪","准备","当前","警告","读卡","好","下图","。","就是","一个","拔出","打开","可以","进度条","选中","我们","镜像文件","掉","选择","面上","显示","：","下","用","内容","插","此时","完成","，","参数","桌面"],"title":"烧写SD卡镜像","title_tokens":["烧写","镜像","卡","sd"]},{"location":"hhp/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#_2","text":"接下来把SD卡插到旭日X3派上。 把串口模块连接到电脑的USB上。 连接好串口模块后，为了确保串口已经跟电脑连接成功、并且安装好了驱动，我们可以右键“我的电脑”图标、选择“管理”，在打开的”计算机管理“界面中找到”设备管理器——端口“，检查一下你的USB串口是否已经显示出了对应的设备。演示中的端口号为COM6,说明串口已经成功驱动了。 如果没有看到自己的设备号、或者设备号前有一个叹号或者问号标记，说明你的驱动没有安装好，可以搜索网络上的技术博客，来完成串口模块的驱动安装。 关闭“计算机管理”窗口，接下来就要通过串口与旭日X3派进行连接了。这里我们需要用到一个串口小工具，大家可以使用自己常用的工具。 演示中使用的串口工具是MobaXterm,十分推荐大家使用这个工具，里面集成了开发过程中需要使用的各种小工具，我们后续的串口通讯、SSH网络通讯，都会使用这些工具完成。 打开MobaXterm,点击左上角的\"Session\"； 找到里面的“Serial\"串口选项，点击打开；串口号选择本机连接到旭日X3派的相应端口，演示中为COM6; 波特率选择921600。选项好后点击“OK”。 现在串口已经连接成功了，但当前旭日X3派的板子还没有上电，所以没有任何信息弹出。 我们把电源线与旭日X3派连接好。 可以看到弹出了日志提醒：“当前系统正在启动”。等待系统加载完成。 现在可以看到系统已经加载成功了。","text_tokens":["管理","中为","一下","工具","波特率","端口","选项","信息","、","博客","把","mobaxterm","推荐","卡","界面","没有","各种","端口号","点击","电脑","任何","usb","出","就要","并且","后","好后","相应","常用","进行","板子","”","找到","是否","确保","大家","921600",",","上电","检查","上角","session","右键","成功","关闭","这里","串","正在","；","左上","机","已经","为了","我","旭日","你","跟","到",";","理器","口号","ok","sd","电源","\"","所以","叹","管理器","会","驱动","如果","x3","都","十分","波特","演示","了","加载","需要","连接","启动","检查一下","是","后续","这个","有","等待","计算机","的","过程"," ","com6","技术","系统","图标","在","串口","号","serial","现在","集成","或者","用到","窗口","计算","为","中","看到","网络","小","计算机管理","还","但","“","使用","ssh","搜索","日志","前","问号","上","这些","弹","说明","来","接下来","左上角","当前","电源线","通过","好","网络通讯","。","一个","与","弹出","可以","打开","对应","里面","我们","接下","设备","选择","显示","本","模块","开发","标记","：","派","下来","安装","插","自己","提醒","—","完成","，","通讯","算机"],"title":"连接串口","title_tokens":["串口","连接"]},{"location":"hhp/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#_3","text":"接下来我们需要登录系统。我们有两个账号可以用来登录： 账号1：用户名为root，密码也为root； 账号2：用户名为storise，密码也为storise； 这里演示使用root用户来登录。输入用户名、密码，回车，需要等待大约1分钟，因为第一次登录需要展开一些系统必要的安装软件，安装好后系统会自动重启。 系统自动重启后，再次使用root用户登录。现在你的UBUNTU系统就已经安装好了。 我们可以使用LINUX系统常用的一些命令行进行查看和设置，比如ls查看当前命令，pwd查看当前路径，还可以使用mkdir命令创建文件夹，比如这里,一个test文件夹就创建成功了。 到这里为止，旭日X3派上的Ubuntu系统就安装成功啦，我们继续下一步。","text_tokens":["软件","就","命令","也","、","名为","用户名","ls","后","好后","root","展开","常用","进行","啦","密码","查看",",","一步","成功","这里","重启","；","用户","分钟","已经","旭日","你","到","会","x3","一次","演示","文件夹","了","需要","输入","设置","路径","有","等待","文件","的"," ","大约","系统","现在","ubuntu","为","storise","命令行","test","还","使用","mkdir","回车","和","上","自动","第一次","第一","创建","pwd","来","接下来","当前","因为","两个","再次","好","linux","。","必要","一个","比如","2","件夹","户名","可以","我们","接下","账号","：","派","下","下来","安装","登录","继续","一些","为止","，","用来","1"],"title":"串口登录系统","title_tokens":["串口","系统","登录"]},{"location":"hhp/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#togetherros_1","text":"接下来安装TogetherROS。 为了达到更好的通信效率，我们后续使用有线网络连接旭日X3派，这里大家可以拿出一根网线，直接连接电脑和旭日X3派的网口。 旭日X3派中出厂已经配置好了静态IP地址，是192.168.1.10，我们将使用的电脑也配置到同一网段即可。","text_tokens":["直接","效率","的","接下来"," ","已经","网段","也","为了","旭日","出厂","togetherros","达到","配置","网口","好","一根","将","到","。","地址","拿出","即可","静态","电脑","同一",".","可以","中","我们","网线","接下","更好","网络","1.10","使用","大家","x3","派","通信","下来","安装","有线","和","了","ip地址","，","连接","这里","192.168","后续","是","网络连接"],"title":"安装TogetherROS","title_tokens":["安装","togetherros"]},{"location":"hhp/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#_4","text":"接下来请大家拿一根网线，连接旭日X3派和电脑。 然后，在电脑端打开控制面板，找到“查看网络状态和任务”。 找到已经连接成功的以太网，点击它； 会弹出一个窗口，我们点击“属性”。 再次弹出窗口，我们双击选择“Internet协议版本4”。 然后会弹出一个配置IP地址的窗口，我们勾选”使用下面的IP地址“。 按照如下信息填入： IP地址：192.168.1.100 子网掩码：255.255.255.0 默认网关：192.168.1.1 我们使用的旭日X3派的板子IP为192.168.1.10，所以IP后三位除了.10和网关.1以外，大家可以选用1-255之间的任意数字，这里使用.100； 填写完在所有窗口点击“确定”，最后关闭窗口。现在网络的配置就完成了，此时电脑端的静态IP就是192.168.1.100,我们通过这个IP与旭日X3派产生连接。","text_tokens":["面板","选用","就","信息","配置","数字","会弹","填入","以外","下面","点击","电脑","控制","出",".","后","任意","板子","”","100","1.10","找到","子网掩码","大家","255.0","端的","查看","它",",","确定","制面","成功","关闭","这里","；","三位","已经","255.255","旭日","一根","默认","ip","静态","按照","所以","-","掩码","双击","x3","任务","1.1","产生","4","填写","了","ip地址","255","连接","这个","网关","的"," ","以太网","在","现在","地址","窗口","如下","勾选","为","10","网络","最后","“","使用","以太","和","拿","弹","所有","接下来","完在","属性","再次","请","通过","。","就是","一个","1.100","控制面板","与","版本","打开","可以","除了","我们","网线","接下","internet","选择","端","状态","：","派","下来","子网","协议","之间","然后","此时","完成","，","192.168","1"],"title":"配置有线网络","title_tokens":["有线","配置","网络"]},{"location":"hhp/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#ssh","text":"我们再次打开MobaXterm软件,点击左上角的\"Session\"，找到里面的\"SSH\",输入 旭日X3派板子的IP192.168.1.10，点击”OK“。 弹出登录窗口，我们用root账户登录：用户名为root，密码为root。这里会弹窗询问是否保存登录密码，如果需要保存就点“YES”，不需要保存就点“NO”。 现在我们就成功通过网络SSH协议登录到了旭日X3派板子上，和之前我们用串口登录的效果几乎是一样的，但现在我们是用网络通讯，所以现在通讯的效率和传输的速度会更高。 配置完成网络通讯后，我们来正式安装TogetherROS。","text_tokens":["更","软件","就","togetherros","配置","no","mobaxterm","名为","yes","点击",".","出","后","传输","root","板子","”","1.10","找到","是否","密码",",","上角","session","成功","这里","询问","用户","左上","高","旭日","弹窗","ip192.168","到","ok","\"","所以","会","如果","x3","了","需要","是","输入","效率","的"," ","不","保存","串口","现在","窗口","为","网络","但","ssh","“","一样","和","上","就点","之前","弹","来","左上角","再次","通过","网络通讯","正式","。","账户","打开","里面","我们","几乎","：","派","安装","用","登录","协议","效果","速度","完成","，","通讯"],"title":"SSH远程登录","title_tokens":["远程","登录","ssh"]},{"location":"hhp/2.2_TogetherROS%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/#togetherros_2","text":"我们在登录成功的SSH终端中，直接使用如下命令即可安装： $ sudo apt install hhp 等待安装完成： $ root@ubuntu:~# sudo apt install hhp Reading package lists... Done Building dependency tree Reading state information... Done The following NEW packages will be installed: hhp 0 upgraded, 1 newly installed, 0 to remove and 52 not upgraded. Need to get 384 MB of archives. After this operation, 512 MB of additional disk space will be used. Get:1 http://42.62.85.28/ubuntu-ports focal/main arm64 hhp arm64 1 .0.1 [ 384 MB ] Fetched 384 MB in 6min 43s ( 954 kB/s ) Selecting previously unselected package hhp. ( Reading database ... 110406 files and directories currently installed. ) Preparing to unpack .../archives/hhp_1.0.1_arm64.deb ... Unpacking hhp ( 1 .0.1 ) ... Setting up hhp ( 1 .0.1 ) ... Generating locales ( this might take a while ) ... en_US.ISO-8859-1... done en_US.UTF-8... done Generation complete. 安装完成后，查看/opt目录下的文件，可以看到已经安装： $ root@ubuntu:/userdata# ls /opt/ tros 如果觉得终端里看不方便，也可以使用MobaXterm软件的可视化浏览器来查看。 大家可以点击/opt/tros文件夹，看看其中的文件结构。 /include文件夹里，是我们后续会用到的关于系统的头文件的调用路径； /lib文件夹里面是库文件； /share文件夹里是安装好的功能包的路径； /src文件夹里是后续会用到的代码； /tools文件夹里是一些小工具。 除此之外，还有很多.bat、.sh脚本文件，它们是用来设置环境变量的。这是因为，你的LINUX系统不知道你安装包的路径在哪，所以需要通过环境变量的脚本来告诉系统，如何找到对应的TogetherROS的功能包、和功能包里的命令工具。 环境变量在我们后续操作里会频繁地使用到，我们会使用到一个”source\"命令来配置环境变量，例如： $ source /opt/tros/setup.bash 运行上面这行命令，就会把当前环境变量设置到系统里去；下次再运行ROS2、TogetherROS指令时，就能找到功能包的路径了。 到这里，TogetherROS软件系统安装完成，下一节我们将对开发板和TogetherROS进行配置。","text_tokens":["954","remove","]","generating","软件","工具","它们","命令","a","/","就","the","可视","也","对","state","togetherros","配置","ros2","installed","、","把","need","mobaxterm","如何","used","ls","可视化","点击","space",".","后","lists","this","unselected","root","42.62","[","进行","be","s","”","找到","大家","src","还有","开发板",",","查看","(","头文件","运行","终端","52","operation","currently","成功","after","脚本","main","这里","opt","@","1.0","mb","not","；","库","install","地","看",")","might","bash","已经","to","sudo","kb","while","85.28","下次","你","将","到","files","focal","reading","share","directories","previously","指令","时","tree","512","浏览","告诉","\"","in","-","所以","$","#","up","en","会","频繁","行","us","packages","如果","locales","6min","觉得","...","tros","include","文件夹","fetched","new","了","需要","后续","是","设置","information","除此","路径","里会","等待","直接","变量","浏览器","文件","archives","调用","的"," ","里","unpacking","不","操作","系统","上面","following","hhp","在","很多","complete","其中","环境变量","再","disk","ubuntu","即可","generation","deb","用到","sh","will","如下","database","结构","中","看到","source","小","哪","例如","ssh","使用","384","additional","http","关于","_","43s","功能","utf","apt","preparing","知道","和","除此之外","upgraded","这","目录","看看","iso","110406","done","ports","package","bat",":","来","unpack","当前","of","环境变","因为","包","之外","一节","通过","好","linux","软件系统","selecting","。","代码","0.1","一个","是因为","dependency","件夹","包里","8859","可以","~","newly","对应","lib","里面","userdata","and","我们","8","arm64","0","get","building","方便","环境","安装包","tools","开发","take","：","下","setting","setup","能","安装","登录","一些","完成","，","去","用来","1"],"title":"安装TogetherROS","title_tokens":["安装","togetherros"]},{"location":"hhp/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/","text":"TogetherROS系统配置 无论是旭日X3派，还是TogetherROS，在正式使用之前，都还需要进行一些必要的配置，完善必要的功能模块，提供完整的算力支持，达到最佳状态。 网络连接 第一个配置，是无线网络连接。 当然，大家也可以直接用网线连接旭日X3派和一个可以上网的路由器，不过更多时候，我们还是会使用无线网络来上网。 我们打开MobaXterm,选择SSH，使用root用户登录板卡；如果之前登录过板卡、还没有关闭的话，也可以继续使用。 现在我们可以通过命令行搜索周边环境有哪些WIFI信号，命令如下： $ sudo nmcli device wifi rescan #扫描当前环境里所有WIFI名称，但扫描结果不会显示 $ nmcli device wifi list #显示扫描到的WIFI名称 $ sudo nmcli device wifi connect <账号> password <密码> #连接WIFI $ sudo vim /etc/network/interfaces #修改DHCP配置 比如，我的办公室里wifi的名称是psmicro,我们就可以使用“sudo nmcli device wifi connect psmicro password <密码>”来连接。 等到终端返回信息“successfully activated\",就说明WIFI连接成功； 我们可以Ping古月居的网址，来检查一下连接。如果能够Ping通，就说明网络已经连接成功，现在就可以成功连接到互联网，进行后续的软件下载和更新了。 网络配置完成后，在后续开发中，大家就可以直接下载或更新各种软件包了。 系统更新 第二个配置，是更新当前旭日X3派所使用的Ubuntu镜像，和在电脑上使用的命令相同。 我们更新一下当前的系统镜像： $ sudo apt update #会按照当前软件源的域名设置去连接远程软件源 $ sudo apt full-upgrade #升级所有可以升级的软件包 弹出如下对话，我们选择“Y”，回车； 这样我们就完成了对系统更新的检查，并安装好了更新包。 CPU调频策略 第三个配置，设置CPU的调频策略，这是一个可选项，大家了解之后，在未来需要使用的时候进行配置即可。 动态调频 $ echo > ondemand /sys/devices/system/cpu/cpufreq/policy0/scaling_governor #让系统根据当前负载，动态调整CPU频率 满频模式 $ echo > performance /sys/devices/system/cpu/cpufreq/policy0/scaling_governor #让CPU始终以满频，也就1.2GHz的频率工作 打开超频 $ echo 1 > /sys/devices/system/cpu/cpufreq/boost #使CPU以超频，也就是1.5GHz的频率工作 关闭超频 $ echo 0 > /sys/devices/system/cpu/cpufreq/boost 这里CPU频率为，满频模式：1.2GHz，超频模式：1.5GHz。 大家需要注意，默认的系统配置是关闭超频、并且动态调频的配置。这样可以比较好地保证功率最优。 安装ROS2功能包 接下来，还有一个很重要的配置，那就是安装ROS2功能包，我们说TogetherROS是基于ROS2深度优化的，很多模块还是会复用ROS2中的功能，所有ROS2的原生功能也可以支持，这里我们就把ROS2必要的功能包都安装一下，让系统的功能模块更加完整。 熟悉ROS2的同学，应该对这些指令并不陌生，和ROS2官方手册中的安装步骤一致，不过还是建议大家跟着课程的步骤一起来安装一下。 添加ROS2源 第一步我们需要更新系统软件源，并安装必要的下载工具。 $ sudo apt update && sudo apt install curl gnupg lsb-release #更新软件源 $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg #设置ROS2软件源秘钥 $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null #设置ROS2软件源 Attention 大部分国内开发者在这都会遇到同一个问题：网址无法连接。解决方案可以参考古月居官网上的这篇帖子： 《解决”Failed to connect to raw.githubusercontent.com“报错》 安装ROS2包 $ sudo apt update #更新软件源 $ sudo apt install ros-foxy-ros-base ros-foxy-demo-nodes-cpp # 安装ROS2功能包 时间会有些长，需要稍微等待一下。 现在ROS2就安装完成了。 大家可以使用同样的命令，继续安装ROS2中的更多功能包。 这里推荐大家先安装ROS2之后会使用到的编译器，比如python3-colcon-common-extensions。我们后续一些TogetherROS功能包的编译，也会使用python3-colcon-common的命令来安装。 $ sudo apt install python3-colcon-common-extensions # ROS2编译器 另外，我们推荐大家安装一个git工具，大家可以通过它下载GitHub、GitLab上的软件包，我们后续也会用到。安装命令为本小节代码第四行。 $ sudo apt install git # 安装git工具 到这里，我们常用的软件和功能包就安装完成了。我们可以看到，在旭日X3派文件目录/opt底下，除了之前的/tros文件夹外，还多出来一个/ros文件夹，里面就是我们刚才安装好的ros-foxy版本的所有系统文件。 如果大家要使用ROS2的功能包，也需要source里面的.bash或者.bat脚本文件。 建立软链接 为了方便我们在TogetherROS系统里调用ROS2的功能，在TogetherROS里提供了一个叫create_soft_link创建软链接的脚本，它而已通过软链接，把ROS2的环境变量链接到当前TogetherROS的环境包里来。执行以下命令： $ cd /opt/tros ## 使用/opt/tros目录下的create_soft_link.py创建ROS package至TogetherROS的软链接 $ python3 create_soft_link.py --foxy /opt/ros/foxy/ --tros /opt/tros 这样设置以后，假如你source了TogetherROS的环境变量，那么同样的配置也会对ROS2生效。 好啦，到这里为止，所有必要的配置项我们都做完了，是不是有点迫不及待想要使用TogetherROS了呢？","text_tokens":["第四行","git","就","系统软件","配置","保证","板卡","failed","mobaxterm","https","无线网络","说","相同","并且","|","root","nmcli","还有","是不是","多功能",",","检查","print","国内","公室","main","o","key","用户","无线网","办公室",")","无法","已经","为了","了解","你","到","cd","编译器","深度","文件目录","生效","\"","#","会","如果","x3","##","模式","修改","当然","需要","连接","有","变量","以下","文件","的","系统","满频","帖子","同学","即可","deb","返回","这是","中","source","上网","命令行","还","提供","那","更加","功能","周边","y","cpp","回车","上","同一个","以后","目录","升级","以","链接","common",":","github","by","包","archive","居","。","达到最佳","必要","一个","可选项","能够","打开","指令","远程","一致","这篇","接下","状态","派","下","无论","用","完成","一","工具","软件","大部","选项","也","etc","信息","达到","、","完","把","arch","各种","电脑","时候","py","devices","出",".","三个","策略","小节","一步","终端","更新包","--","过","keyring","sources","sudo","ros","四行","默认","出来","按照","password","$","软件包","路由器","另外","是","有些","直接","调用","可选","居官","先","原生","rescan","环境变量","有点","步骤","或者","部分","为","软","课程","系统配置","手册","始终","master","镜像","githubusercontent","扫描","结果","_","呢","apt","和","》","稍微","系统文件","遇到","architecture","所有","extensions","说明","package","当前","device","信号","rosdistro","哪些","foxy","dev","ondemand","&&","代码","件夹","我们","网线","soft","0","等到","第二","gitlab","：","完善","update","所","一些",">","，","源","报错","1","跟着","python3","raw","陌生","解决方案","不过","keyrings","没有","不是","熟悉","usr","编译","lsb","系统配","线网","attention","常用","进行","注意","啦","还是","governor","密码","第三个","(","关闭","脚本","对系统","；","install","刚才","=","to","我","旭日","psmicro","base","policy0","ssl","问题","第一个","开发者","share","performance","第四","工作","假如","第一步","而已","解决","都","之后","互联","复用","周边环境","使","d","联网","后续","设置","等待","不","里","基于","互联网","官方","现在","建立","第二个","做","如下","想要","最佳","sys","执行","网络","org","要","但","使用","《","搜索","vim","很","这些","迫不及待","无线","之前","boost","connect","的话","第一","bat","创建","接下来","tee","长","dpkg","正式","full","curl","demo","应该","可以","最优","负载","除了","对话","大部分","环境","那么","模块","release","安装","至","继续","并","null","去","秘钥","动态","网络连接","功能模块","更","dhcp","]","一下","colcon","命令","/","对","重要","togetherros","ros2","system","activated","推荐","echo","时间","同一","办公","create","ghz","后","codename","[","”","gpg","link","大家","根据","二个","超频","路由","它","scaling","起来","成功","这里","network","os","opt","添加","signed","调整","地","bash","cpufreq","<","com","cpu","为本","外","interfaces","gnupg","建议","无论是","参考","1.5","-","不及","这样","更新","比较","packages","底下","tros","文件夹","包都","下载","了","检查一下","1.2","以满频","网上","？","successfully"," ","功率","在","很多","或","ubuntu","第三","用到","看到","多","ssh","list","“","频率","域名","http","项","叫","这","方案","算力","名称","弹","不会","来","环境变","统配","nodes","通过","未来","好","调频","下载工具","就是","优化","比如","包里","版本","同样","里面","wifi","网址","账号","古月","方便","选择","显示","upgrade","开发","ping","下来","完整","登录","通","支持","让","为止"],"title":"TogetherROS系统配置","title_tokens":["系统配置","系统配","系统","统配","togetherros","配置"]},{"location":"hhp/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#togetherros","text":"无论是旭日X3派，还是TogetherROS，在正式使用之前，都还需要进行一些必要的配置，完善必要的功能模块，提供完整的算力支持，达到最佳状态。","text_tokens":["的","旭日","togetherros","配置","在","达到","正式","。","达到最佳","必要","无论是","最佳","进行","还","提供","模块","使用","状态","还是","x3","派","都","完善","功能","无论","完整","一些","支持","，","需要","之前","功能模块","算力"],"title":"TogetherROS系统配置","title_tokens":["系统配置","系统配","系统","统配","togetherros","配置"]},{"location":"hhp/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#_1","text":"第一个配置，是无线网络连接。 当然，大家也可以直接用网线连接旭日X3派和一个可以上网的路由器，不过更多时候，我们还是会使用无线网络来上网。 我们打开MobaXterm,选择SSH，使用root用户登录板卡；如果之前登录过板卡、还没有关闭的话，也可以继续使用。 现在我们可以通过命令行搜索周边环境有哪些WIFI信号，命令如下： $ sudo nmcli device wifi rescan #扫描当前环境里所有WIFI名称，但扫描结果不会显示 $ nmcli device wifi list #显示扫描到的WIFI名称 $ sudo nmcli device wifi connect <账号> password <密码> #连接WIFI $ sudo vim /etc/network/interfaces #修改DHCP配置 比如，我的办公室里wifi的名称是psmicro,我们就可以使用“sudo nmcli device wifi connect psmicro password <密码>”来连接。 等到终端返回信息“successfully activated\",就说明WIFI连接成功； 我们可以Ping古月居的网址，来检查一下连接。如果能够Ping通，就说明网络已经连接成功，现在就可以成功连接到互联网，进行后续的软件下载和更新了。 网络配置完成后，在后续开发中，大家就可以直接下载或更新各种软件包了。","text_tokens":["更","dhcp","一下","软件","就","命令","/","也","etc","信息","配置","、","activated","板卡","mobaxterm","不过","无线网络","没有","各种","时候","办公","后","线网","root","进行","”","nmcli","大家","还是","路由","密码",",","检查","终端","关闭","成功","公室","network","过","；","用户","无线网","办公室","<","已经","我","旭日","psmicro","sudo","第一个","到","interfaces","password","\"","$","#","会","软件包","路由器","更新","如果","x3","修改","互联","周边环境","下载","当然","了","联网","连接","检查一下","是","后续","有","直接","的","successfully"," ","里","互联网","在","现在","rescan","或","返回","如下","中","多","上网","命令行","网络","还","但","使用","ssh","list","“","搜索","扫描","结果","vim","周边","和","无线","之前","名称","所有","不会","connect","说明","的话","第一","来","当前","device","信号","通过","居","哪些","。","一个","比如","能够","可以","打开","wifi","我们","网线","网址","账号","古月","环境","选择","显示","等到","开发","ping","：","派","用","登录","继续","通",">","完成","，"],"title":"网络连接","title_tokens":["网络连接","网络","连接"]},{"location":"hhp/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#_2","text":"第二个配置，是更新当前旭日X3派所使用的Ubuntu镜像，和在电脑上使用的命令相同。 我们更新一下当前的系统镜像： $ sudo apt update #会按照当前软件源的域名设置去连接远程软件源 $ sudo apt full-upgrade #升级所有可以升级的软件包 弹出如下对话，我们选择“Y”，回车； 这样我们就完成了对系统更新的检查，并安装好了更新包。","text_tokens":["所有","；","一下","软件","的","命令","就"," ","当前","系统","旭日","配置","在","sudo","好","full","。","ubuntu","电脑","第二个","相同","可以","出","按照","如下","远程","我们","对话","去","-","$","#","会","软件包","”","更新","第二","镜像","upgrade","选择","使用","“","这样","：","x3","二个","派","域名","update","安装","y","检查","apt","所","回车","和","并","上","了","完成","，","连接","更新包","源","升级","是","设置","对系统","弹"],"title":"系统更新","title_tokens":["更新","系统"]},{"location":"hhp/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#cpu","text":"第三个配置，设置CPU的调频策略，这是一个可选项，大家了解之后，在未来需要使用的时候进行配置即可。 动态调频 $ echo > ondemand /sys/devices/system/cpu/cpufreq/policy0/scaling_governor #让系统根据当前负载，动态调整CPU频率 满频模式 $ echo > performance /sys/devices/system/cpu/cpufreq/policy0/scaling_governor #让CPU始终以满频，也就1.2GHz的频率工作 打开超频 $ echo 1 > /sys/devices/system/cpu/cpufreq/boost #使CPU以超频，也就是1.5GHz的频率工作 关闭超频 $ echo 0 > /sys/devices/system/cpu/cpufreq/boost 这里CPU频率为，满频模式：1.2GHz，超频模式：1.5GHz。 大家需要注意，默认的系统配置是关闭超频、并且动态调频的配置。这样可以比较好地保证功率最优。","text_tokens":["就","/","选项","也","配置","保证","system","、","echo","时候","devices","ghz","并且","系统配","进行","注意","三个","策略","大家","根据","超频","governor","第三个","scaling","关闭","这里","调整","地","cpufreq","了解","cpu","policy0","默认","performance","工作","1.5","$","#","这样","比较","模式","之后","使","需要","是","设置","1.2","以满频","的","可选"," ","系统","功率","在","满频","第三","即可","这是","为","系统配置","sys","始终","使用","频率","_","boost","以","当前","统配","未来","调频","好","ondemand","。","就是","一个","可选项","打开","可以","最优","负载","0","：","让",">","，","动态","1"],"title":"CPU调频策略","title_tokens":["cpu","调频","策略"]},{"location":"hhp/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#ros2","text":"接下来，还有一个很重要的配置，那就是安装ROS2功能包，我们说TogetherROS是基于ROS2深度优化的，很多模块还是会复用ROS2中的功能，所有ROS2的原生功能也可以支持，这里我们就把ROS2必要的功能包都安装一下，让系统的功能模块更加完整。 熟悉ROS2的同学，应该对这些指令并不陌生，和ROS2官方手册中的安装步骤一致，不过还是建议大家跟着课程的步骤一起来安装一下。","text_tokens":["所有","跟着","一","一下","的","就","接下来"," ","不","系统","包","重要","基于","也","对","陌生","官方","ros2","togetherros","配置","很多","原生","把","。","就是","一个","优化","必要","同学","步骤","不过","说","深度","可以","熟悉","应该","指令","中","建议","课程","我们","手册","一致","接下","会","模块","大家","还是","那","还有","更加","功能","下来","安装","完整","复用","支持","包都","让","很","并","和","这些","，","起来","这里","是","功能模块"],"title":"安装ROS2功能包","title_tokens":["功能","安装","ros2","包"]},{"location":"hhp/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#ros2_1","text":"第一步我们需要更新系统软件源，并安装必要的下载工具。 $ sudo apt update && sudo apt install curl gnupg lsb-release #更新软件源 $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg #设置ROS2软件源秘钥 $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null #设置ROS2软件源 Attention 大部分国内开发者在这都会遇到同一个问题：网址无法连接。解决方案可以参考古月居官网上的这篇帖子： 《解决”Failed to connect to raw.githubusercontent.com“报错》","text_tokens":["]","工具","软件","/","大部","raw","etc","系统软件","ros2","arch","failed","https","解决方案","keyrings","echo","同一",".","usr","lsb","codename","|","attention","[","”","gpg","(","print","一步","国内","--","os","main","o","key","signed","install","keyring","=",")","无法","to","sources","sudo","com","ros","ssl","问题","开发者","share","gnupg","参考","\"","第一步","-","$","#","会","解决","更新","packages","都","下载","d","需要","连接","设置","网上","的"," ","系统","居官","在","帖子","ubuntu","deb","部分","source","org","master","githubusercontent","《","list","http","“","_","apt","》","同一个","这","方案","遇到","architecture","connect","第一",":","by","tee","archive","rosdistro","dpkg","下载工具","dev","。","&&","必要","curl","一个","可以","这篇","我们","网址","大部分","古月","开发","release","：","update","安装","并","null",">","，","源","秘钥","报错"],"title":"添加ROS2源","title_tokens":["源","添加","ros2"]},{"location":"hhp/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#ros2_2","text":"$ sudo apt update #更新软件源 $ sudo apt install ros-foxy-ros-base ros-foxy-demo-nodes-cpp # 安装ROS2功能包 时间会有些长，需要稍微等待一下。 现在ROS2就安装完成了。 大家可以使用同样的命令，继续安装ROS2中的更多功能包。 这里推荐大家先安装ROS2之后会使用到的编译器，比如python3-colcon-common-extensions。我们后续一些TogetherROS功能包的编译，也会使用python3-colcon-common的命令来安装。 $ sudo apt install python3-colcon-common-extensions # ROS2编译器 另外，我们推荐大家安装一个git工具，大家可以通过它下载GitHub、GitLab上的软件包，我们后续也会用到。安装命令为本小节代码第四行。 $ sudo apt install git # 安装git工具 到这里，我们常用的软件和功能包就安装完成了。我们可以看到，在旭日X3派文件目录/opt底下，除了之前的/tros文件夹外，还多出来一个/ros文件夹，里面就是我们刚才安装好的ros-foxy版本的所有系统文件。 如果大家要使用ROS2的功能包，也需要source里面的.bash或者.bat脚本文件。","text_tokens":["更","python3","第四行","git","一下","软件","colcon","就","命令","工具","/","也","ros2","togetherros","、","推荐","时间",".","编译","常用","大家","小节","多功能","它","这里","脚本","opt","install","刚才","bash","旭日","sudo","ros","base","到","为本","四行","外","编译器","出来","文件目录","第四","-","$","#","会","软件包","更新","如果","x3","底下","之后","tros","文件夹","下载","了","另外","需要","后续","有些","等待","文件","的"," ","系统","先","在","现在","或者","用到","中","看到","source","多","要","还","使用","功能","apt","cpp","和","稍微","上","目录","系统文件","之前","所有","extensions","bat","common","来","github","包","nodes","长","通过","好","foxy","。","代码","一个","就是","比如","demo","件夹","版本","可以","同样","里面","除了","我们","gitlab","派","update","安装","继续","一些","完成","，","源"],"title":"安装ROS2包","title_tokens":["安装","ros2","包"]},{"location":"hhp/2.3_TogetherROS%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/#_3","text":"为了方便我们在TogetherROS系统里调用ROS2的功能，在TogetherROS里提供了一个叫create_soft_link创建软链接的脚本，它而已通过软链接，把ROS2的环境变量链接到当前TogetherROS的环境包里来。执行以下命令： $ cd /opt/tros ## 使用/opt/tros目录下的create_soft_link.py创建ROS package至TogetherROS的软链接 $ python3 create_soft_link.py --foxy /opt/ros/foxy/ --tros /opt/tros 这样设置以后，假如你source了TogetherROS的环境变量，那么同样的配置也会对ROS2生效。 好啦，到这里为止，所有必要的配置项我们都做完了，是不是有点迫不及待想要使用TogetherROS了呢？","text_tokens":["python3","命令","/","也","对","ros2","togetherros","配置","完","把","不是","py","create",".","啦","link","是不是","它","这里","--","脚本","opt","为了","ros","你","到","cd","生效","假如","而已","$","会","这样","不及","都","##","tros","了","设置","变量","以下","？","调用","的"," ","里","系统","在","环境变量","有点","做","软","想要","source","执行","提供","使用","项","功能","_","呢","叫","以后","目录","迫不及待","链接","所有","package","创建","来","当前","环境变","通过","好","foxy","。","一个","必要","包里","同样","我们","soft","方便","环境","那么","：","下","至","为止","，"],"title":"建立软链接","title_tokens":["建立","软","链接"]},{"location":"hhp/2.4_TogetherROS%E7%A4%BA%E4%BE%8B%E8%BF%90%E8%A1%8C/","text":"TogetherROS示例运行 接下来，我们就在安装配置好TogetherROS的旭日X3派上，试一试系统自带的一些例程，确保整个系统已经可以正常运行。 通信测试 先来测试一下TogetherROS系统的通信功能。 我们需要启动两个终端，分别连接到旭日X3派上，并分别按以下命令配置环境变量。 终端1： $ source /opt/tros/local_setup.bash $ ros2 run examples_rclcpp_minimal_publisher publisher_member_function 终端2： $ source /opt/tros/local_setup.bash $ ros2 run examples_rclcpp_minimal_subscriber subscriber_member_function 接下来，我们用ros2 run命令运行节点： 运行第一个例程： ros2 run example_rclcpp_minimal_publisher publisher_member_function 这是一个用C++写的最小化的发布者程序，其中节点叫publisher_member+function，按回车运行该节点。 可以看到这个节点开始不断循环发布信息，每次发布的信息为字符串形式，内容是“Hello,world! +数字”。 同样，在终端2的命令行窗口，输入以下命令并回车开启订阅者节点。 ros2 run examples_rclcpp_minimal_subscriber subscriber_member_function 这个订阅者节点会获取到、并显示出刚才发布者节点发布的信息。 通过这样一个例程，我们验证了两个节点之间的通信没有问题。这这是一个基于DDS的话题通信。 按CTRL+C可以关闭该例程。 通信系统没有问题了，如果你是一个ROS2的开发者，可能对刚才我们使用的ROS2命令比较熟悉，这时你可能也会产生一个问题：我们之前也安装了ROS2系统，那ROS2的原生功能还可以正常运行么？ 我们再来试一试ROS2中自带的一个例程。 和刚才一样打开两个终端，这里我们需要source一下ROS里的环境变量。该环境变量我们刚才已经设置了过软连接，所以配置过程中它也会配置ROS2的功能包路径。 在终端1输入命令： $ source /opt/tros/local_setup.bash 在终端2，也输入同样的命令，配置环境变量的脚本： 接下来运行两个ROS2的节点。 这两个节点的功能包是属于ROS2里的功能包,可以直接调用到。我们来尝试一下输入命令ros2 run，再输入功能包名称，如果按Tab自动补全文件名，说明可以找到对应的这个功能包： ros2 run demo_nodes_cpp talker talker也是一个发布者节点。按回车运行，可以看到终端1的发布者节点以每秒1次的频率发布消息。 同样，我们到终端2中打开订阅者节点： ros2 run demo_nodes_cpp listener 回车运行，很快两个终端间就建立了通讯。 这样就使用ROS2里的例程实现了话题通信连接，只不过这里我们使用的就是ROS2原生的功能包了，而不是TogetherROS的功能。 通信系统已经没问题了，但看上去似乎还不太直观。 目标检测 没问题，接下来，我们就运行一个更为直观的案例——目标检测。 在这个案例中，需要大家找一个USB的相机，连接到旭日X3拍的USB接口上。 在运行这个例程之前，需要确认两点：1.有一个USB相机已经连接到了旭日X3派板子上；2.有一个HDMI的显示器也连接到了旭日X3派板子上，它主要用于显示后续的图像检测的效果。 要确认USB相机已经正确连接到开发板，可以在终端输入命令“ls - dv\"查看当前设备号，默认把USB相机识别为vedio8，如果当前列表里能找到vedio8就说明相机被成功识别到了。 输入以下命令运行例程： $ cd /app/ai_inference/02_usb_camera_sample/ $ python3 ./usb_camera_fcos.py 代码第一行，02例程的功能是通过相机动态采集图像，并对图像里的目标物体进行实时识别。 代码第二行，我们用python3来运行例程usb_camera_fcos.py，它的目标识别的功能是通过我们板卡中CPU的AI引擎来实现的。 我们输入以上两行代码，就开始驱动相机、并对相机里的图像做动态识别了。 此时如果有连接HDMI的显示器，就可以在显示器里看到动态识别的效果。 我们可以调整USB相机镜头的范围，去拍一些杯子、电脑、显示器等等，都可以把对应的目标物体识别到，并把对应的物体用彩色框给框出来；在框的左上角，就是识别到物体的名称、以及它识别的概率值了。 几个示例程序都可以正常运行了，说明当前的软硬件系统都已经准备就绪，到这里，我们才算是可以正式开始机器人开发了。","text_tokens":["就","配置","分别","板卡","没","第二行","机器人","找到","开发板",",","查看","检测","这时","已经","太","算是","examples","你","到","cd","example","镜头","\"","会","hello","如果","x3","需要","连接","写","这个","路径","有","变量","以下","文件","杯子","的","系统","试一试","开启","其中","该","彩色","这是","中","source","命令行","还","那","功能","cpp","程序","回车","例程","上","以","才","尝试","发布者","包","案例","发布","。","一个","inference","打开","等等","接下","publisher","派","两点","能","用","么","ai","范围","也","信息","数字","、","把","开始","第一行","py","电脑",".","出","字符","可能","实现","板子","function","minimal","者","终端","过","不断","属于","tab","ros","值","默认","出来","采集","软硬件","hdmi","识别","$","驱动","看上去","talker","产生","启动","是","直接","调用","补全","先","+","原生","准备就绪","环境变量","再","listener","两行","窗口","为","软","_","找","一样","正确","和","直观","说明","当前","两个","以及","似乎","app","接口","代码","间","local","图像","我们","!","第二","：","setup","一些","之间","效果","，","1","上去","sample","python3","run","字符串","不过","框出","没有","ls","不是","熟悉","subscriber","进行","确保","循环","按","关闭","脚本","主要","；","刚才","获取","正常","旭日","问题","第一个","开发者","软硬","消息","硬件","都","自带","每秒","后续","输入","设置","c","不","里","基于","整个","02","显示器","实时","建立","做","物体","camera","框给","要","c++","但","使用","验证","每次","自动","之前","第一","就绪","话题","接下来","左上角","正式","次","看上","demo","可以","用于","环境","设备","dds","安装","并","形式","此时","通讯","去","动态","一下","vedio8","命令","/","对","togetherros","ros2","确认","usb","以上","”","大家","一行","它","上角","运行","包了","成功","这里","opt","相机","只不过","左上","调整","bash","示例","最小化","cpu","几个","而","很快","所以","-","world","这样","比较","框","文件名","列表","tros","了","机器","？","过程"," ","测试","在","号","member","包是","被","看到","节点","“","频率","通信","叫","目标","这","订阅","名称","ctrl","来","fcos","准备","环境变","dv","nodes","通过","好","二行","就是","2","框出来","同样","对应","引擎","拍","rclcpp","更为","显示","开发","概率","最小","下来","内容","—"],"title":"TogetherROS示例运行","title_tokens":["示例","运行","togetherros"]},{"location":"hhp/2.4_TogetherROS%E7%A4%BA%E4%BE%8B%E8%BF%90%E8%A1%8C/#togetherros","text":"接下来，我们就在安装配置好TogetherROS的旭日X3派上，试一试系统自带的一些例程，确保整个系统已经可以正常运行。","text_tokens":["正常","就","的","接下来","已经","系统","整个","旭日","togetherros","配置","在","好","试一试","。","可以","我们","接下","确保","x3","派","下来","安装","自带","一些","运行","例程","上","，"],"title":"TogetherROS示例运行","title_tokens":["示例","运行","togetherros"]},{"location":"hhp/2.4_TogetherROS%E7%A4%BA%E4%BE%8B%E8%BF%90%E8%A1%8C/#_1","text":"先来测试一下TogetherROS系统的通信功能。 我们需要启动两个终端，分别连接到旭日X3派上，并分别按以下命令配置环境变量。 终端1： $ source /opt/tros/local_setup.bash $ ros2 run examples_rclcpp_minimal_publisher publisher_member_function 终端2： $ source /opt/tros/local_setup.bash $ ros2 run examples_rclcpp_minimal_subscriber subscriber_member_function 接下来，我们用ros2 run命令运行节点： 运行第一个例程： ros2 run example_rclcpp_minimal_publisher publisher_member_function 这是一个用C++写的最小化的发布者程序，其中节点叫publisher_member+function，按回车运行该节点。 可以看到这个节点开始不断循环发布信息，每次发布的信息为字符串形式，内容是“Hello,world! +数字”。 同样，在终端2的命令行窗口，输入以下命令并回车开启订阅者节点。 ros2 run examples_rclcpp_minimal_subscriber subscriber_member_function 这个订阅者节点会获取到、并显示出刚才发布者节点发布的信息。 通过这样一个例程，我们验证了两个节点之间的通信没有问题。这这是一个基于DDS的话题通信。 按CTRL+C可以关闭该例程。 通信系统没有问题了，如果你是一个ROS2的开发者，可能对刚才我们使用的ROS2命令比较熟悉，这时你可能也会产生一个问题：我们之前也安装了ROS2系统，那ROS2的原生功能还可以正常运行么？ 我们再来试一试ROS2中自带的一个例程。 和刚才一样打开两个终端，这里我们需要source一下ROS里的环境变量。该环境变量我们刚才已经设置了过软连接，所以配置过程中它也会配置ROS2的功能包路径。 在终端1输入命令： $ source /opt/tros/local_setup.bash 在终端2，也输入同样的命令，配置环境变量的脚本： 接下来运行两个ROS2的节点。 这两个节点的功能包是属于ROS2里的功能包,可以直接调用到。我们来尝试一下输入命令ros2 run，再输入功能包名称，如果按Tab自动补全文件名，说明可以找到对应的这个功能包： ros2 run demo_nodes_cpp talker talker也是一个发布者节点。按回车运行，可以看到终端1的发布者节点以每秒1次的频率发布消息。 同样，我们到终端2中打开订阅者节点： ros2 run demo_nodes_cpp listener 回车运行，很快两个终端间就建立了通讯。 这样就使用ROS2里的例程实现了话题通信连接，只不过这里我们使用的就是ROS2原生的功能包了，而不是TogetherROS的功能。 通信系统已经没问题了，但看上去似乎还不太直观。","text_tokens":["么","一下","run","就","命令","/","对","也","信息","togetherros","配置","ros2","分别","字符串","数字","、","不过","开始","没有","不是","熟悉",".","出","没","字符","可能","实现","subscriber","function","”","找到","循环",",","它","minimal","按","运行","包了","者","终端","关闭","这里","脚本","opt","过","只不过","刚才","获取","正常","这时","bash","不断","已经","太","属于","旭日","最小化","tab","examples","ros","问题","你","到","第一个","开发者","消息","example","而","很快","所以","$","world","会","这样","比较","hello","如果","x3","文件名","看上去","自带","tros","产生","talker","每秒","了","需要","启动","连接","写","是","输入","这个","设置","路径","变量","直接","以下","文件","？","调用","的","过程","c"," ","里","补全","不","系统","基于","测试","先","在","+","原生","试一试","开启","环境变量","其中","该","再","建立","member","listener","包是","窗口","这是","为","中","软","看到","source","命令行","节点","还","c++","但","“","使用","频率","那","通信","功能","_","一样","cpp","程序","叫","回车","和","例程","上","验证","直观","每次","这","订阅","自动","之前","名称","以","说明","第一","ctrl","尝试","来","话题","接下来","环境变","发布者","两个","包","似乎","nodes","通过","发布","。","次","一个","就是","看上","2","demo","间","可以","同样","local","打开","对应","我们","rclcpp","接下","环境","!","publisher","显示","开发","：","派","setup","最小","dds","下来","安装","用","内容","并","形式","之间","，","通讯","1","上去"],"title":"通信测试","title_tokens":["测试","通信"]},{"location":"hhp/2.4_TogetherROS%E7%A4%BA%E4%BE%8B%E8%BF%90%E8%A1%8C/#_2","text":"没问题，接下来，我们就运行一个更为直观的案例——目标检测。 在这个案例中，需要大家找一个USB的相机，连接到旭日X3拍的USB接口上。 在运行这个例程之前，需要确认两点：1.有一个USB相机已经连接到了旭日X3派板子上；2.有一个HDMI的显示器也连接到了旭日X3派板子上，它主要用于显示后续的图像检测的效果。 要确认USB相机已经正确连接到开发板，可以在终端输入命令“ls - dv\"查看当前设备号，默认把USB相机识别为vedio8，如果当前列表里能找到vedio8就说明相机被成功识别到了。 输入以下命令运行例程： $ cd /app/ai_inference/02_usb_camera_sample/ $ python3 ./usb_camera_fcos.py 代码第一行，02例程的功能是通过相机动态采集图像，并对图像里的目标物体进行实时识别。 代码第二行，我们用python3来运行例程usb_camera_fcos.py，它的目标识别的功能是通过我们板卡中CPU的AI引擎来实现的。 我们输入以上两行代码，就开始驱动相机、并对相机里的图像做动态识别了。 此时如果有连接HDMI的显示器，就可以在显示器里看到动态识别的效果。 我们可以调整USB相机镜头的范围，去拍一些杯子、电脑、显示器等等，都可以把对应的目标物体识别到，并把对应的物体用彩色框给框出来；在框的左上角，就是识别到物体的名称、以及它识别的概率值了。 几个示例程序都可以正常运行了，说明当前的软硬件系统都已经准备就绪，到这里，我们才算是可以正式开始机器人开发了。","text_tokens":["sample","python3","ai","vedio8","就","命令","/","范围","也","对","确认","、","板卡","把","框出","开始","ls","第一行","py","电脑",".","没","usb","第二行","实现","以上","板子","进行","机器人","找到","大家","开发板","一行","查看","它","上角","运行","终端","检测","成功","这里","主要","相机","；","左上","调整","正常","示例","已经","旭日","算是","cpu","值","问题","到","cd","软硬","默认","几个","出来","采集","镜头","软硬件","\"","hdmi","识别","-","$","驱动","硬件","如果","框","x3","都","列表","了","需要","连接","后续","是","输入","这个","有","机器","以下","杯子","的"," ","里","系统","02","在","显示器","号","实时","准备就绪","被","彩色","两行","做","为","物体","中","看到","camera","框给","要","“","_","功能","找","正确","程序","直观","例程","上","目标","之前","名称","才","说明","第一","就绪","来","接下来","当前","fcos","左上角","准备","案例","dv","以及","通过","app","正式","接口","二行","。","代码","一个","就是","2","inference","可以","对应","图像","引擎","框出来","拍","我们","等等","接下","更为","用于","设备","显示","第二","开发","：","概率","派","两点","能","下来","用","一些","并","效果","—","此时","，","去","动态","1"],"title":"目标检测","title_tokens":["目标","检测"]},{"location":"hhp/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/","text":"多节点话题通信 节点实现了机器人各种各样的功能，但这些功能并不是独立的，之间会有千丝万缕的联系，其中最重要的一种联系方式就是话题，它是 节点间传递数据的桥梁 。 通信模型 以两个机器人节点为例。A节点的功能是驱动相机这个硬件设备，获取得到相机拍摄的图像信息，B节点的功能是视频监控，将相机拍摄到的图像实时显示给用户查看。 大家可以想一下，这两个节点是不是必然存在某种关系？没错，节点A要将获取的图像数据传输给节点B，有了数据，节点B才能做这样可视化的渲染。 此时从节点A到节点B传递图像数据的方式，在ROS中，我们就称之为 话题 ，它作为一个桥梁，实现了节点之间某一个方向上的数据传输。 发布/订阅模型 从话题本身的实现角度来看，使用了基于DDS的 发布/订阅模型 ，什么叫发布和订阅呢？ 话题数据传输的特性是从一个节点到另外一个节点，发送数据的对象称之为 发布者 ，接收数据的对象称之为 订阅者 ，每一个话题都需要有一个名字，传输的数据也需要有固定的数据类型。 打一个比方，大家平时应该也会看微信公众号，比如有一个公众号，它的名字叫做“古月居”，这个古月居就是话题名称，公众号的发布者是古月居的小编，他会把组织好的机器人知识排版成要求格式的公众号文章，发布出去，这个文章格式，就是话题的数据类型。如果大家对这个话题感兴趣，就可以订阅“古月居”，成为订阅者之后自然就可以收到古月居的公众号文章，没有订阅的话，也就无法收到。 类似这样的发布/订阅模型在生活中随处可见，比如订阅报纸、订阅杂志等等。 多对多通信 大家再仔细想下这些可以订阅的东西，是不是并不是唯一的，我们每个人可以订阅很多公众号、报纸、杂志，这些公众号、报纸、杂志也可以被很多人订阅，没错，ROS里的话题也是一样，发布者和订阅者的数量并不是唯一的，可以称之为是多对多的通信模型。 因为话题是多对多的模型，发布控制指令的摇杆可以有一个，也可以有2个、3个，订阅控制指令的机器人可以有1个，也可以有2个、3个，大家可以想象一下这个画面，似乎还是挺魔性的，如果存在多个发送指令的节点，建议大家要 注意区分优先级 ，不然机器人可能不知道该听谁的了。 异步通信 话题通信还有一个特性，那就是异步，这个词可能有同学是第一次听说？所谓异步，只要是指发布者发出数据后，并不知道订阅者什么时候可以收到，类似古月居公众号发布一篇文章，你什么时候阅读的，古月居根本不知道，报社发出一份报纸，你什么时候收到，报社也是不知道的。这就叫做异步。 异步的特性也让话题更适合用于一些周期发布的数据，比如传感器的数据，运动控制的指令等等，如果某些逻辑性较强的指令，比如修改某一个参数，用话题传输就不太合适了。 消息接口 最后，既然是数据传输，发布者和订阅者就得统一数据的描述格式，不能一个说英文，一个理解成了中文。在ROS中，话题通信数据的描述格式称之为消息，对应编程语言中数据结构的概念。比如这里的一个图像数据，就会包含图像的长宽像素值、每个像素的RGB等等，在ROS中都有标准定义。 消息是ROS中的一种接口定义方式 ，与编程语言无关，我们也可以通过 .msg 后缀的文件自行定义，有了这样的接口，各种节点就像积木块一样，通过各种各样的接口进行拼接，组成复杂的机器人系统。 编程方法 了解了话题的基本原理，接下来我们就要开始编写代码啦。 创建工作空间 请大家先按照这个流程创建工作空间、下载课程的例程代码，并进行编译。 $ mkdir –p dev_ws/src $ cd /userdata/dev_ws/src $ git clone https://gitee.com/guyuehome/togetherros_tutorials.git $ cd /userdata/dev_ws/ $ colcon build 运行示例程序 编译成功后，我们尝试运行话题通信的Hello World例程，在这个例程中，我们会先创建一个发布者，发布话题“chatter”，周期发送“Hello World”这个字符串，消息类型是ROS中标准定义的String，再创建一个订阅者，订阅“chatter”这个话题，从而接收到“Hello World”这个字符串。 $ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run learning_topic_cpp talker $ ros2 run learning_topic_cpp listener 这就是TogetherROS系统中话题通信的方法，依然沿用了ROS2中话题通信的完整流程。 代码解析 发布者的实现方法publisher_member_function.cpp： #include <chrono> #include <functional> #include <memory> #include <string> #include \"rclcpp/rclcpp.hpp\" #include \"std_msgs/msg/string.hpp\" using namespace std :: chrono_literals ; /* This example creates a subclass of Node and uses std::bind() to register a * member function as a callback from the timer. */ class MinimalPublisher : public rclcpp :: Node { public : MinimalPublisher () : Node ( \"minimal_publisher\" ), count_ ( 0 ) { publisher_ = this -> create_publisher < std_msgs :: msg :: String > ( \"topic\" , 10 ); timer_ = this -> create_wall_timer ( 500 ms , std :: bind ( & MinimalPublisher :: timer_callback , this )); } private : void timer_callback () { auto message = std_msgs :: msg :: String (); message . data = \"Hello, world! \" + std :: to_string ( count_ ++ ); RCLCPP_INFO ( this -> get_logger (), \"Publishing: '%s'\" , message . data . c_str ()); publisher_ -> publish ( message ); } rclcpp :: TimerBase :: SharedPtr timer_ ; rclcpp :: Publisher < std_msgs :: msg :: String >:: SharedPtr publisher_ ; size_t count_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalPublisher > ()); rclcpp :: shutdown (); return 0 ; } 订阅者的实现方法subscriber_member_function.cpp： #include <memory> #include \"rclcpp/rclcpp.hpp\" #include \"std_msgs/msg/string.hpp\" using std :: placeholders :: _1 ; class MinimalSubscriber : public rclcpp :: Node { public : MinimalSubscriber () : Node ( \"minimal_subscriber\" ) { subscription_ = this -> create_subscription < std_msgs :: msg :: String > ( \"topic\" , 10 , std :: bind ( & MinimalSubscriber :: topic_callback , this , _1 )); } private : void topic_callback ( const std_msgs :: msg :: String :: SharedPtr msg ) const { RCLCPP_INFO ( this -> get_logger (), \"I heard: '%s'\" , msg -> data . c_str ()); } rclcpp :: Subscription < std_msgs :: msg :: String >:: SharedPtr subscription_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalSubscriber > ()); rclcpp :: shutdown (); return 0 ; }","text_tokens":["得","git","优先","就","a","https","数据传输","说","argc","描述","就要","info","随处可见","机器人","s","还有","是不是","查看",",","每个","标准","千丝","using","main","接收","callback","用户","creates","千丝万缕",")","无法","太","基本","count","了解","叫做","你","到","出去",";","cd","shared","example","\"","#","会","timer","如果","hello","修改","include","解析","需要","组成","较强","这个","独立","有","要求","class","文件","多个","的","关系","中文","系统","各种各样","其中","该","data","同学","从而","感兴","定义","中","source","收到","方法","传递数据","那","功能","知道","接口定义","cpp","程序","一篇","例程","上","长宽","以","基本原理","微信","传感器","尝试",":","of","bind","发布者","发布","居","某些","想","。","一个","格式","指令","500","兴趣","userdata","等等","接下","运动","publisher","用","hpp","}","3","the","也","信息","人","wall","、","想下","return","把","chatter","桥梁","各种","所谓","开始","给","时候","空间","想象",".","通信模型","字符","实现","可能","function","适合","流程","src","报纸","感器","clone","只要","逻辑性","一份","const","minimal","者","像","原理","合适","placeholders","后缀","看","–","数据类型","ros","值","将","对象","按照","数量","$","驱动","发出","据传","rgb","talker","组织","另外","i","void","是","build","编写","ms","先","+","随处","复杂","再","可见","listener","不知","结构","小编","方向","课程","控制指令","称之为","杂志","优先级","mkdir","特性","指","_","呢","一样","private","和","一种","东西","自行","数据结构","仔细","魔性","名字","shutdown","两个","似乎","不能","argv","无关","dev","接口","代码","模型","与","从","编程语言","是从","间","图像","local","minimalsubscriber","我们","在生活中","0","learning","!","chrono","比方","报社","：","setup","'","subclass","知识","一些","之间",">","minimalpublisher","，","参数","make","作为","1","init","guyuehome","为例","不然","会先","run","固定","包含","谁","字符串","视频","类型","没有","不是","t","来看","编译","本原","as","传输","依然","subscriber","进行","个","注意","啦","还是","(","英文","sharedptr","没错","public","渲染","install","获取","=","to","timerbase","监控","才能","联系方式","ws","消息","工作","size","硬件","类似","最","都","语言","node","之后","之为","logger","*","挺","c","成","里","不","基于","打","gitee","实时","做","msgs","10","要","但","平时","使用","摇杆","本身","这些","%","的话","第一","创建","话题","接下来","因为","{","++","请","&","msg","literals","某种","from","memory","应该","publishing","可以","拍摄","用于","设备","发送数据","文章","公众","dds","周期","并","得到","此时","沿用","生活","更","]","一下","存在","colcon","数据","/","可视","对","重要","画面","togetherros","ros2","可视化","create","控制","阅读","后","this","根本","[","”","大家","拼接","string","它","运行","成功","这里","opt","相机","tutorials","理解","万缕","bash","接收数据","示例","<","各样","p","com","register","发送","每","唯一","建议","方式","词","-","概念","world","这样","他会","一次","tros","下载","int","了","积木","逻辑","机器","？","听","统一"," ","编程","functional","在","号","很多","namespace","member","heard","被","联系","块","std","多","最后","节点","异步","传递","“","char","subscription","必然","b","听说","通信","topic","叫","这","订阅","像素","名称","第一次","感兴趣","排版","区分","通过","好","既然","就是","什么","成为","spin","比如","2","某","auto","对应","并不知道","and","rclcpp","古月","get","message","显示","自然","角度","传感","下来","str","完整","uses","让","publish"],"title":"多节点话题通信","title_tokens":["多","节点","通信","话题"]},{"location":"hhp/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_1","text":"节点实现了机器人各种各样的功能，但这些功能并不是独立的，之间会有千丝万缕的联系，其中最重要的一种联系方式就是话题，它是 节点间传递数据的桥梁 。","text_tokens":["有","机器","万缕","千丝万缕","的","话题"," ","数据","各样","重要","各种各样","联系方式","其中","。","就是","桥梁","各种","不是","联系","间","方式","实现","节点","机器人","会","但","最","传递","传递数据","功能","它","并","了","之间","一种","这些","，","千丝","是","独立"],"title":"多节点话题通信","title_tokens":["多","节点","通信","话题"]},{"location":"hhp/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_2","text":"以两个机器人节点为例。A节点的功能是驱动相机这个硬件设备，获取得到相机拍摄的图像信息，B节点的功能是视频监控，将相机拍摄到的图像实时显示给用户查看。 大家可以想一下，这两个节点是不是必然存在某种关系？没错，节点A要将获取的图像数据传输给节点B，有了数据，节点B才能做这样可视化的渲染。 此时从节点A到节点B传递图像数据的方式，在ROS中，我们就称之为 话题 ，它作为一个桥梁，实现了节点之间某一个方向上的数据传输。","text_tokens":["为例","一下","存在","就","a","数据","可视","信息","视频","桥梁","不是","给","数据传输","可视化","传输","实现","机器人","大家","是不是","查看","它","没错","相机","渲染","用户","获取","监控","才能","ros","将","到","方式","驱动","硬件","这样","据传","之为","了","是","这个","有","机器","？","的"," ","关系","在","实时","做","方向","中","称之为","节点","要","传递","必然","b","功能","上","这","以","话题","两个","想","。","一个","从","某种","某","可以","图像","我们","拍摄","设备","显示","得到","此时","之间","，","作为"],"title":"通信模型","title_tokens":["通信模型","模型","通信"]},{"location":"hhp/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_3","text":"从话题本身的实现角度来看，使用了基于DDS的 发布/订阅模型 ，什么叫发布和订阅呢？ 话题数据传输的特性是从一个节点到另外一个节点，发送数据的对象称之为 发布者 ，接收数据的对象称之为 订阅者 ，每一个话题都需要有一个名字，传输的数据也需要有固定的数据类型。 打一个比方，大家平时应该也会看微信公众号，比如有一个公众号，它的名字叫做“古月居”，这个古月居就是话题名称，公众号的发布者是古月居的小编，他会把组织好的机器人知识排版成要求格式的公众号文章，发布出去，这个文章格式，就是话题的数据类型。如果大家对这个话题感兴趣，就可以订阅“古月居”，成为订阅者之后自然就可以收到古月居的公众号文章，没有订阅的话，也就无法收到。 类似这样的发布/订阅模型在生活中随处可见，比如订阅报纸、订阅杂志等等。","text_tokens":["固定","就","/","数据","也","对","、","把","类型","没有","数据传输","来看","传输","实现","随处可见","机器人","”","大家","报纸","它","者","接收","看","无法","接收数据","数据类型","叫做","到","出去","对象","发送","每","会","这样","他会","类似","据传","如果","都","之后","之为","组织","了","另外","需要","是","这个","有","机器","要求","？","的"," ","成","基于","打","号","随处","可见","感兴","小编","称之为","杂志","节点","收到","平时","“","使用","本身","特性","呢","叫","和","订阅","名称","微信","的话","名字","话题","发布者","感兴趣","排版","发布","居","好","。","就是","模型","什么","从","一个","比如","格式","成为","是从","应该","可以","兴趣","等等","在生活中","古月","发送数据","自然","文章","公众","角度","比方","dds","知识","，","生活"],"title":"发布/订阅模型","title_tokens":["发布","/","模型","订阅"]},{"location":"hhp/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_4","text":"大家再仔细想下这些可以订阅的东西，是不是并不是唯一的，我们每个人可以订阅很多公众号、报纸、杂志，这些公众号、报纸、杂志也可以被很多人订阅，没错，ROS里的话题也是一样，发布者和订阅者的数量并不是唯一的，可以称之为是多对多的通信模型。 因为话题是多对多的模型，发布控制指令的摇杆可以有一个，也可以有2个、3个，订阅控制指令的机器人可以有1个，也可以有2个、3个，大家可以想象一下这个画面，似乎还是挺魔性的，如果存在多个发送指令的节点，建议大家要 注意区分优先级 ，不然机器人可能不知道该听谁的了。","text_tokens":["不然","一下","优先","存在","3","也","对","画面","人","谁","、","想下","不是","控制","想象","通信模型","可能","个","机器人","注意","大家","还是","报纸","是不是","每个","者","没错","ros","唯一","发送","建议","数量","如果","之为","了","是","这个","有","机器","挺","听","多个","的"," ","里","不","号","很多","该","再","被","控制指令","称之为","多","杂志","优先级","节点","要","摇杆","通信","一样","知道","和","这些","订阅","东西","仔细","魔性","话题","因为","发布者","似乎","区分","发布","。","模型","一个","2","可以","指令","我们","公众","并","，","1"],"title":"多对多通信","title_tokens":["多","对","通信"]},{"location":"hhp/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_5","text":"话题通信还有一个特性，那就是异步，这个词可能有同学是第一次听说？所谓异步，只要是指发布者发出数据后，并不知道订阅者什么时候可以收到，类似古月居公众号发布一篇文章，你什么时候阅读的，古月居根本不知道，报社发出一份报纸，你什么时候收到，报社也是不知道的。这就叫做异步。 异步的特性也让话题更适合用于一些周期发布的数据，比如传感器的数据，运动控制的指令等等，如果某些逻辑性较强的指令，比如修改某一个参数，用话题传输就不太合适了。","text_tokens":["更","就","数据","也","所谓","时候","控制","阅读","后","传输","可能","根本","适合","感器","还有","报纸","只要","逻辑性","一份","者","合适","太","叫做","你","词","发出","类似","如果","一次","修改","了","较强","是","这个","逻辑","有","？","的","不"," ","号","同学","不知","收到","异步","那","特性","听说","通信","指","知道","一篇","这","订阅","第一次","传感器","第一","话题","发布者","发布","居","某些","。","就是","一个","什么","比如","某","可以","指令","并不知道","等等","用于","古月","运动","文章","公众","报社","周期","传感","用","一些","让","，","参数"],"title":"异步通信","title_tokens":["异步","通信"]},{"location":"hhp/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_6","text":"最后，既然是数据传输，发布者和订阅者就得统一数据的描述格式，不能一个说英文，一个理解成了中文。在ROS中，话题通信数据的描述格式称之为消息，对应编程语言中数据结构的概念。比如这里的一个图像数据，就会包含图像的长宽像素值、每个像素的RGB等等，在ROS中都有标准定义。 消息是ROS中的一种接口定义方式 ，与编程语言无关，我们也可以通过 .msg 后缀的文件自行定义，有了这样的接口，各种节点就像积木块一样，通过各种各样的接口进行拼接，组成复杂的机器人系统。","text_tokens":["得","就","包含","数据","也","、","各种","数据传输","说",".","描述","传输","进行","机器人","拼接","每个","英文","标准","者","像","这里","理解","后缀","各样","ros","值","消息","方式","概念","会","这样","据传","都","语言","rgb","之为","了","积木","组成","是","有","机器","文件","的","统一","成","编程"," ","中文","系统","各种各样","在","复杂","定义","结构","块","中","称之为","最后","节点","通信","一样","接口定义","和","一种","长宽","像素","订阅","自行","数据结构","话题","发布者","不能","无关","通过","发布","msg","接口","既然","。","一个","格式","与","比如","编程语言","可以","对应","图像","等等","我们","，"],"title":"消息接口","title_tokens":["接口","消息"]},{"location":"hhp/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_7","text":"了解了话题的基本原理，接下来我们就要开始编写代码啦。","text_tokens":["基本原理","编写","的","话题","接下来","基本","了解","。","代码","开始","就要","本原","我们","接下","啦","下来","了","，","原理"],"title":"编程方法","title_tokens":["编程","方法"]},{"location":"hhp/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_8","text":"请大家先按照这个流程创建工作空间、下载课程的例程代码，并进行编译。 $ mkdir –p dev_ws/src $ cd /userdata/dev_ws/src $ git clone https://gitee.com/guyuehome/togetherros_tutorials.git $ cd /userdata/dev_ws/ $ colcon build","text_tokens":["tutorials","guyuehome","build","创建","–","git",":","的","colcon"," ","/","p","先","请","com","gitee","togetherros","、","dev","https","。","代码","ws","cd","空间",".","按照","工作","编译","课程","userdata","进行","$","流程","大家","src","mkdir","clone","_","下载","并","例程","，","这个"],"title":"创建工作空间","title_tokens":["创建","工作","空间"]},{"location":"hhp/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_9","text":"编译成功后，我们尝试运行话题通信的Hello World例程，在这个例程中，我们会先创建一个发布者，发布话题“chatter”，周期发送“Hello World”这个字符串，消息类型是ROS中标准定义的String，再创建一个订阅者，订阅“chatter”这个话题，从而接收到“Hello World”这个字符串。 $ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run learning_topic_cpp talker $ ros2 run learning_topic_cpp listener 这就是TogetherROS系统中话题通信的方法，依然沿用了ROS2中话题通信的完整流程。","text_tokens":["install","创建","尝试","会先","run","的","bash","话题"," ","/","系统","发布者","ros2","togetherros","在","发布","字符串","ros","类型","到","再","。","一个","chatter","就是","消息","listener","从而","定义",".","local","发送","中","编译","后","source","我们","字符","依然","world","$","learning","方法","”","“","流程","hello","setup","通信","_","周期","string","tros","talker","完整","topic","cpp","标准","运行","者","例程","接收","沿用","了","，","成功","订阅","这","是","opt","这个"],"title":"运行示例程序","title_tokens":["示例","程序","运行"]},{"location":"hhp/3.1_%E5%A4%9A%E8%8A%82%E7%82%B9%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/#_10","text":"发布者的实现方法publisher_member_function.cpp： #include <chrono> #include <functional> #include <memory> #include <string> #include \"rclcpp/rclcpp.hpp\" #include \"std_msgs/msg/string.hpp\" using namespace std :: chrono_literals ; /* This example creates a subclass of Node and uses std::bind() to register a * member function as a callback from the timer. */ class MinimalPublisher : public rclcpp :: Node { public : MinimalPublisher () : Node ( \"minimal_publisher\" ), count_ ( 0 ) { publisher_ = this -> create_publisher < std_msgs :: msg :: String > ( \"topic\" , 10 ); timer_ = this -> create_wall_timer ( 500 ms , std :: bind ( & MinimalPublisher :: timer_callback , this )); } private : void timer_callback () { auto message = std_msgs :: msg :: String (); message . data = \"Hello, world! \" + std :: to_string ( count_ ++ ); RCLCPP_INFO ( this -> get_logger (), \"Publishing: '%s'\" , message . data . c_str ()); publisher_ -> publish ( message ); } rclcpp :: TimerBase :: SharedPtr timer_ ; rclcpp :: Publisher < std_msgs :: msg :: String >:: SharedPtr publisher_ ; size_t count_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalPublisher > ()); rclcpp :: shutdown (); return 0 ; } 订阅者的实现方法subscriber_member_function.cpp： #include <memory> #include \"rclcpp/rclcpp.hpp\" #include \"std_msgs/msg/string.hpp\" using std :: placeholders :: _1 ; class MinimalSubscriber : public rclcpp :: Node { public : MinimalSubscriber () : Node ( \"minimal_subscriber\" ) { subscription_ = this -> create_subscription < std_msgs :: msg :: String > ( \"topic\" , 10 , std :: bind ( & MinimalSubscriber :: topic_callback , this , _1 )); } private : void topic_callback ( const std_msgs :: msg :: String :: SharedPtr msg ) const { RCLCPP_INFO ( this -> get_logger (), \"I heard: '%s'\" , msg -> data . c_str ()); } rclcpp :: Subscription < std_msgs :: msg :: String >:: SharedPtr subscription_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalSubscriber > ()); rclcpp :: shutdown (); return 0 ; }","text_tokens":["hpp","]","}","a","/","the","wall","return","t","create",".","argc","as","info","this","实现","[","subscriber","function","s","string",",","const","(","minimal","者","sharedptr","using","main","public","callback","placeholders","creates","=",")","<","to","timerbase","count","register",";","shared","example","\"","-","world","#","size","timer","hello","node","include","int","logger","*","void","i","class","的","c"," ","ms","functional","+","namespace","data","member","heard","std","msgs","10","方法","subscription","char","_","private","cpp","topic","订阅","%",":","shutdown","of","bind","发布者","{","argv","++","发布","&","msg","literals","spin","from","memory","auto","publishing","500","minimalsubscriber","and","rclcpp","0","get","message","!","publisher","chrono","：","str","'","subclass","uses",">","minimalpublisher","make","1","init","publish"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"hhp/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/","text":"多节点服务通信 话题通信可以实现多个ROS节点之间数据的单向传输，使用这种异步通信机制，发布者无法准确知道订阅者是否收到消息，本讲我们将一起学习ROS另外一种常用的通信方法—— 服务 ，可以实现类似 你问我答的同步通信 效果。 通信模型 在之前的课程中，我们通过一个节点驱动相机，发布图像话题，另外一个节点订阅图像话题，并实现对其中红色物体的识别，此时我们可以按照图像识别的频率，周期得到物体的位置。 这个位置信息可以继续发给机器人的上层应用使用，比如可以跟随目标运动，或者运动到目标位置附近。此时，我们并不需要这么高的频率一直订阅物体的位置，而是更希望在需要这个数据的时候，发一个查询的请求，然后尽快得到此时目标的最新位置。 这样的通信模型和话题单向传输有所不同，变成了发送一个请求，反馈一个应答的形式，好像是你问我答一样，这种通信机制在ROS中成为 服务，Service 。 客户端/服务器模型 从服务的实现机制上来看，这种你问我答的形式叫做 客户端/服务器模型 ，简称为CS模型，客户端在需要某些数据的时候，针对某个具体的服务，发送请求信息，服务器端收到请求之后，就会进行处理并反馈应答信息。 这种通信机制在生活中也很常见，比如我们经常浏览的各种网页，此时你的电脑浏览器就是客户端，通过域名或者各种操作，向网站服务器发送请求，服务器收到之后返回需要展现的页面数据。 同步通信 这个过程一般要求越快越好，假设服务器半天没有反应，你的浏览器一直转圈圈，那有可能是服务器宕机了，或者是网络不好，所以相比话题通信，在服务通信中，客户端可以通过接收到的应答信息，判断服务器端的状态，我们也称之为同步通信。 一对多通信 比如古月居这个网站，服务器是唯一存在的，并没有多个完全一样的古月居网站，但是可以访问古月居网站的客户端是不唯一的，大家每一个人都可以看到同样的界面。所以服务通信模型中，服务器端唯一，但客户端可以不唯一。 服务接口 和话题通信类似，服务通信的核心还是要传递数据，数据变成了两个部分，一个 请求的数据 ，比如请求苹果位置的命令，还有一个 反馈的数据 ，比如反馈苹果坐标位置的数据，这些数据和话题消息一样，在ROS中也是要标准定义的，话题使用.msg文件定义，服务使用的是.srv文件定义，后续我们会给大家介绍定义的方法。 编程方法 了解了服务通信的原理，接下来我们就要开始编写代码啦，我们尝试通过服务实现一个加法求解器的功能。 运行示例程序 当我们需要计算两个加数的求和结果时，就通过客户端节点，将两个加数封装成请求数据，针对服务“add_two_ints”发送出去，提供这个服务的服务器端节点，收到请求数据后，开始进行加法计算，并将求和结果封装成应答数据，反馈给客户端，之后客户端就可以得到想要的结果啦。 我们一起操作下这个例程。 $ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run learning_service_cpp server $ ros2 run learning_service_cpp client 2 3 话题和服务是最为常用的两种数据通信方法，前者适合传感器、控制指令等周期性、单向传输的数据，后者适合一问一答，同步性要求更高的数据，比如获取机器视觉识别到的目标位置。 代码解析 服务器端add_two_ints_server.cpp： #include \"rclcpp/rclcpp.hpp\" #include \"learning_service_cpp/srv/add_two_ints.hpp\" #include <memory> void add ( const std::shared_ptr<learning_service_cpp::srv::AddTwoInts::Request> request, std::shared_ptr<learning_service_cpp::srv::AddTwoInts::Response> response ) { response->sum = request->a + request->b ; RCLCPP_INFO ( rclcpp::get_logger ( \"rclcpp\" ) , \"Incoming request\\na: %ld\" \" b: %ld\" , request->a, request->b ) ; RCLCPP_INFO ( rclcpp::get_logger ( \"rclcpp\" ) , \"sending back response: [%ld]\" , ( long int ) response->sum ) ; } int main ( int argc, char **argv ) { rclcpp::init ( argc, argv ) ; std::shared_ptr<rclcpp::Node> node = rclcpp::Node::make_shared ( \"add_two_ints_server\" ) ; rclcpp::Service<learning_service_cpp::srv::AddTwoInts>::SharedPtr service = node->create_service<learning_service_cpp::srv::AddTwoInts> ( \"add_two_ints\" , & add ) ; RCLCPP_INFO ( rclcpp::get_logger ( \"rclcpp\" ) , \"Ready to add two ints.\" ) ; rclcpp::spin ( node ) ; rclcpp::shutdown () ; } 客户端add_two_ints_client.cpp： #include \"rclcpp/rclcpp.hpp\" #include \"learning_service_cpp/srv/add_two_ints.hpp\" #include <chrono> #include <cstdlib> #include <memory> using namespace std :: chrono_literals ; int main ( int argc , char ** argv ) { rclcpp :: init ( argc , argv ); if ( argc != 3 ) { RCLCPP_INFO ( rclcpp :: get_logger ( \"rclcpp\" ), \"usage: add_two_ints_client X Y\" ); return 1 ; } std :: shared_ptr < rclcpp :: Node > node = rclcpp :: Node :: make_shared ( \"add_two_ints_client\" ); rclcpp :: Client < learning_service_cpp :: srv :: AddTwoInts >:: SharedPtr client = node -> create_client < learning_service_cpp :: srv :: AddTwoInts > ( \"add_two_ints\" ); auto request = std :: make_shared < learning_service_cpp :: srv :: AddTwoInts :: Request > (); request -> a = atoll ( argv [ 1 ]); request -> b = atoll ( argv [ 2 ]); while ( ! client -> wait_for_service ( 1 s )) { if ( ! rclcpp :: ok ()) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"rclcpp\" ), \"Interrupted while waiting for the service. Exiting.\" ); return 0 ; } RCLCPP_INFO ( rclcpp :: get_logger ( \"rclcpp\" ), \"service not available, waiting again...\" ); } auto result = client -> async_send_request ( request ); // Wait for the result. if ( rclcpp :: spin_until_future_complete ( node , result ) == rclcpp :: FutureReturnCode :: SUCCESS ) { RCLCPP_INFO ( rclcpp :: get_logger ( \"rclcpp\" ), \"Sum: %ld\" , result . get () -> sum ); } else { RCLCPP_ERROR ( rclcpp :: get_logger ( \"rclcpp\" ), \"Failed to call service add_two_ints\" ); } rclcpp :: shutdown (); return 0 ; }","text_tokens":["就","a","处理","failed","na","available","argc","核心","就要","info","send","机器人","s","是否","还有",",","尽快","标准","main","using","接收","interrupted",")","无法","假设","了解","叫做","你","到","出去",";","shared","时","ok","\"","#","会","转圈","include","解析","页面","需要","加数","这个","要求","封装","call","文件","多个","的","其中","定义","返回","计算","中","source","收到","方法","提供","答","传递数据","功能","y","知道","cpp","程序","例程","上","future","介绍","传感器","尝试",":","发布者","半天","图像识别","发布","居","某些","。","again","一个","指令","ld","一般","atoll","接下","运动","应用","cstdlib","waiting","状态","下","当","until","hpp","}","3","the","也","信息","人","、","return","sum","ints","开始","各种","给","电脑","时候",".","通信模型","实现","可能","一问一答","位置","适合","感器","const","者","这种","原理","success","ros","具体","将","这么","按照","识别","$","驱动","back","发","访问","另外","void","是","浏览器","编写","两种","操作","+","exiting","或者","x","部分","为","课程","控制指令","称之为","周期性","服务器","结果","有所不同","_","一样","越好","和","一种","ptr","发给","一起","圈圈","shutdown","两个","argv","接口","代码","模型","从","图像","local","加法","我们","service","wait","在生活中","0","learning","!","chrono","：","setup","之间","效果",">","，","make","1","init","准确","run","futurereturncode","客户端","cs","没有","来看","ready","传输","常用","进行","求和","啦","还是","(","经常","sharedptr","同步","install","add","最为","获取","=","to","但是","我","宕机","while","消息","希望","同步性","类似","都","求解","node","某个","之后","之为","苹果","logger","*","后续","不","成","server","complete","相比","针对","最新","物体","想要","展现","网络","跟随","要","但","使用","问","转圈圈","很","这些","一直","机制","之前","%","话题","接下来","client","不同","{","incoming","&","msg","literals","memory","可以","并不需要","红色","周期","继续","得到","并","此时","然后","形式","而是","生活","单向","更","查询","]","存在","命令","数据","/","好像","对","ros2","服务","界面","完全","务器","create","控制","应答","讲","后","数据通信","[","等","”","long","大家","async","服务器发送","越快越好","反馈","运行","网站","服务器端","不好","那有","opt","相机","not","bash","<","示例","有所","高","result","变成","for","usage","浏览","发送","唯一","每","数据通","request","所以","-","后者","简称","response","这样","...","tros","int","了","else","机器","sending","过程","addtwoints"," ","编程","前者","在","namespace","网页","srv","\\","std","看到","多","视觉","节点","异步","频率","传递","“","char","域名","error","b","通信","学习","目标","上层","订阅","反应","通过","器","判断","成为","就是","坐标","spin","比如","2","向","auto","同样","越快","rclcpp","客户","古月","get","本","附近","if","下来","传感","two","常见","—","一对","请求"],"title":"多节点服务通信","title_tokens":["多","节点","服务","通信"]},{"location":"hhp/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_1","text":"话题通信可以实现多个ROS节点之间数据的单向传输，使用这种异步通信机制，发布者无法准确知道订阅者是否收到消息，本讲我们将一起学习ROS另外一种常用的通信方法—— 服务 ，可以实现类似 你问我答的同步通信 效果。","text_tokens":["单向","同步","一起","多个","的","无法","话题","数据"," ","发布者","我","服务","发布","ros","你","将","。","消息","可以","讲","我们","传输","实现","常用","节点","异步","收到","方法","本","是否","类似","使用","答","问","通信","学习","知道","者","之间","一种","—","另外","效果","，","订阅","这种","机制","准确"],"title":"多节点服务通信","title_tokens":["多","节点","服务","通信"]},{"location":"hhp/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_2","text":"在之前的课程中，我们通过一个节点驱动相机，发布图像话题，另外一个节点订阅图像话题，并实现对其中红色物体的识别，此时我们可以按照图像识别的频率，周期得到物体的位置。 这个位置信息可以继续发给机器人的上层应用使用，比如可以跟随目标运动，或者运动到目标位置附近。此时，我们并不需要这么高的频率一直订阅物体的位置，而是更希望在需要这个数据的时候，发一个查询的请求，然后尽快得到此时目标的最新位置。 这样的通信模型和话题单向传输有所不同，变成了发送一个请求，反馈一个应答的形式，好像是你问我答一样，这种通信机制在ROS中成为 服务，Service 。","text_tokens":["更","查询","单向","数据","好像","对","信息","服务","时候","应答","通信模型","传输","实现","机器人","位置","反馈","尽快","这种","相机","有所","高","我","变成","ros","你","到","这么","希望","按照","发送","识别","驱动","这样","发","了","另外","需要","是","这个","机器","的"," ","在","其中","或者","最新","物体","中","课程","节点","跟随","答","频率","使用","问","通信","有所不同","一样","和","目标","发给","订阅","上层","一直","机制","之前","话题","不同","图像识别","通过","发布","。","成为","一个","模型","比如","可以","图像","我们","service","并不需要","运动","应用","附近","红色","周期","继续","并","得到","此时","然后","形式","，","而是","请求"],"title":"通信模型","title_tokens":["通信模型","模型","通信"]},{"location":"hhp/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_3","text":"从服务的实现机制上来看，这种你问我答的形式叫做 客户端/服务器模型 ，简称为CS模型，客户端在需要某些数据的时候，针对某个具体的服务，发送请求信息，服务器端收到请求之后，就会进行处理并反馈应答信息。 这种通信机制在生活中也很常见，比如我们经常浏览的各种网页，此时你的电脑浏览器就是客户端，通过域名或者各种操作，向网站服务器发送请求，服务器收到之后返回需要展现的页面数据。","text_tokens":["浏览器","的","就"," ","/","数据","操作","处理","也","客户端","我","信息","cs","服务","在","通过","叫做","具体","你","某些","。","就是","模型","针对","从","网页","比如","各种","或者","电脑","时候","来看","务器","浏览","向","返回","为","发送","应答","我们","实现","在生活中","展现","客户","进行","简称","收到","会","答","服务器","问","域名","通信","服务器发送","某个","之后","反馈","常见","网站","并","形式","上","服务器端","很","此时","页面","，","需要","生活","经常","这种","机制","请求"],"title":"客户端/服务器模型","title_tokens":["客户","模型","/","服务器","客户端","务器","服务"]},{"location":"hhp/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_4","text":"这个过程一般要求越快越好，假设服务器半天没有反应，你的浏览器一直转圈圈，那有可能是服务器宕机了，或者是网络不好，所以相比话题通信，在服务通信中，客户端可以通过接收到的应答信息，判断服务器端的状态，我们也称之为同步通信。","text_tokens":["同步","要求","浏览器","过程","的","圈圈","话题","假设","半天","客户端","宕机","信息","也","服务","在","通过","判断","你","相比","到","。","没有","或者","务器","浏览","可以","越快","中","应答","一般","称之为","我们","可能","一直","所以","客户","网络","转圈","服务器","状态","通信","越快越好","转圈圈","之为","越好","服务器端","了","不好","接收","，","那有","反应","是","这个"],"title":"同步通信","title_tokens":["同步","通信"]},{"location":"hhp/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_5","text":"比如古月居这个网站，服务器是唯一存在的，并没有多个完全一样的古月居网站，但是可以访问古月居网站的客户端是不唯一的，大家每一个人都可以看到同样的界面。所以服务通信模型中，服务器端唯一，但客户端可以不唯一。","text_tokens":["多个","存在","的","不","但是","客户端","人","服务","居","。","一个","界面","模型","比如","没有","完全","务器","可以","同样","唯一","每","中","看到","通信模型","所以","客户","古月","但","服务器","大家","都","通信","一样","访问","网站","并","服务器端","，","是","这个"],"title":"一对多通信","title_tokens":["一对","通信","多"]},{"location":"hhp/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_6","text":"和话题通信类似，服务通信的核心还是要传递数据，数据变成了两个部分，一个 请求的数据 ，比如请求苹果位置的命令，还有一个 反馈的数据 ，比如反馈苹果坐标位置的数据，这些数据和话题消息一样，在ROS中也是要标准定义的，话题使用.msg文件定义，服务使用的是.srv文件定义，后续我们会给大家介绍定义的方法。","text_tokens":["介绍","文件","的","命令","话题","数据"," ","也","两个","变成","服务","在","ros","msg","。","一个","坐标","消息","比如","srv","定义","给","部分",".","核心","中","我们","方法","会","要","位置","类似","传递","传递数据","使用","还是","大家","还有","通信","一样","反馈","标准","和","苹果","了","这些","，","后续","是","请求"],"title":"服务接口","title_tokens":["服务","接口"]},{"location":"hhp/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_7","text":"了解了服务通信的原理，接下来我们就要开始编写代码啦，我们尝试通过服务实现一个加法求解器的功能。","text_tokens":["编写","尝试","的","接下来","服务","了解","通过","器","。","代码","一个","开始","就要","加法","我们","实现","接下","啦","通信","求解","功能","下来","了","，","原理"],"title":"编程方法","title_tokens":["编程","方法"]},{"location":"hhp/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_8","text":"当我们需要计算两个加数的求和结果时，就通过客户端节点，将两个加数封装成请求数据，针对服务“add_two_ints”发送出去，提供这个服务的服务器端节点，收到请求数据后，开始进行加法计算，并将求和结果封装成应答数据，反馈给客户端，之后客户端就可以得到想要的结果啦。 我们一起操作下这个例程。 $ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run learning_service_cpp server $ ros2 run learning_service_cpp client 2 3 话题和服务是最为常用的两种数据通信方法，前者适合传感器、控制指令等周期性、单向传输的数据，后者适合一问一答，同步性要求更高的数据，比如获取机器视觉识别到的目标位置。","text_tokens":["单向","更","run","就","3","数据","/","客户端","ros2","服务","、","ints","开始","给","务器",".","控制","应答","后","数据通信","传输","一问一答","常用","进行","等","”","求和","啦","位置","适合","感器","反馈","服务器端","opt","同步","install","add","最为","获取","bash","高","将","到","出去","时","发送","数据通","同步性","识别","后者","$","之后","tros","需要","加数","是","这个","要求","机器","封装","的","两种","成"," ","操作","前者","server","针对","计算","想要","控制指令","source","视觉","节点","收到","方法","周期性","提供","“","服务器","结果","通信","_","cpp","和","例程","目标","传感器","一起","话题","两个","client","通过","。","比如","2","可以","指令","local","加法","我们","service","客户","learning","下","setup","传感","周期","two","并","得到","当","，","请求"],"title":"运行示例程序","title_tokens":["示例","程序","运行"]},{"location":"hhp/3.2_%E5%A4%9A%E8%8A%82%E7%82%B9%E6%9C%8D%E5%8A%A1%E9%80%9A%E4%BF%A1/#_9","text":"服务器端add_two_ints_server.cpp： #include \"rclcpp/rclcpp.hpp\" #include \"learning_service_cpp/srv/add_two_ints.hpp\" #include <memory> void add ( const std::shared_ptr<learning_service_cpp::srv::AddTwoInts::Request> request, std::shared_ptr<learning_service_cpp::srv::AddTwoInts::Response> response ) { response->sum = request->a + request->b ; RCLCPP_INFO ( rclcpp::get_logger ( \"rclcpp\" ) , \"Incoming request\\na: %ld\" \" b: %ld\" , request->a, request->b ) ; RCLCPP_INFO ( rclcpp::get_logger ( \"rclcpp\" ) , \"sending back response: [%ld]\" , ( long int ) response->sum ) ; } int main ( int argc, char **argv ) { rclcpp::init ( argc, argv ) ; std::shared_ptr<rclcpp::Node> node = rclcpp::Node::make_shared ( \"add_two_ints_server\" ) ; rclcpp::Service<learning_service_cpp::srv::AddTwoInts>::SharedPtr service = node->create_service<learning_service_cpp::srv::AddTwoInts> ( \"add_two_ints\" , & add ) ; RCLCPP_INFO ( rclcpp::get_logger ( \"rclcpp\" ) , \"Ready to add two ints.\" ) ; rclcpp::spin ( node ) ; rclcpp::shutdown () ; } 客户端add_two_ints_client.cpp： #include \"rclcpp/rclcpp.hpp\" #include \"learning_service_cpp/srv/add_two_ints.hpp\" #include <chrono> #include <cstdlib> #include <memory> using namespace std :: chrono_literals ; int main ( int argc , char ** argv ) { rclcpp :: init ( argc , argv ); if ( argc != 3 ) { RCLCPP_INFO ( rclcpp :: get_logger ( \"rclcpp\" ), \"usage: add_two_ints_client X Y\" ); return 1 ; } std :: shared_ptr < rclcpp :: Node > node = rclcpp :: Node :: make_shared ( \"add_two_ints_client\" ); rclcpp :: Client < learning_service_cpp :: srv :: AddTwoInts >:: SharedPtr client = node -> create_client < learning_service_cpp :: srv :: AddTwoInts > ( \"add_two_ints\" ); auto request = std :: make_shared < learning_service_cpp :: srv :: AddTwoInts :: Request > (); request -> a = atoll ( argv [ 1 ]); request -> b = atoll ( argv [ 2 ]); while ( ! client -> wait_for_service ( 1 s )) { if ( ! rclcpp :: ok ()) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"rclcpp\" ), \"Interrupted while waiting for the service. Exiting.\" ); return 0 ; } RCLCPP_INFO ( rclcpp :: get_logger ( \"rclcpp\" ), \"service not available, waiting again...\" ); } auto result = client -> async_send_request ( request ); // Wait for the result. if ( rclcpp :: spin_until_future_complete ( node , result ) == rclcpp :: FutureReturnCode :: SUCCESS ) { RCLCPP_INFO ( rclcpp :: get_logger ( \"rclcpp\" ), \"Sum: %ld\" , result . get () -> sum ); } else { RCLCPP_ERROR ( rclcpp :: get_logger ( \"rclcpp\" ), \"Failed to call service add_two_ints\" ); } rclcpp :: shutdown (); return 0 ; }","text_tokens":["hpp","]","}","3","a","/","the","futurereturncode","客户端","服务","return","sum","until","failed","ints","na","available","务器","argc",".","create","ready","info","send","[","long","s","async",",","const","(","服务器端","sharedptr","main","using","interrupted","not","success","add","=",")","<","to","result","for","while","usage",";","shared","ok","request","\"","-","#","response","back","node","...","include","int","else","logger","*","void","sending","call","addtwoints"," ","server","+","exiting","complete","namespace","srv","\\","x","std","服务器","char","error","b","_","y","cpp","ptr","future","%",":","shutdown","client","{","argv","incoming","&","literals","again","spin","2","memory","auto","ld","atoll","service","wait","rclcpp","0","客户","learning","get","!","chrono","cstdlib","waiting","if","：","two",">","make","1","init"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"hhp/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/","text":"多节点动作通信 机器人是一个复杂的智能系统，并不仅仅是键盘遥控运动、识别某个目标这么简单，我们需要实现的是送餐、送货、分拣等满足具体场景需求的机器人。 在这些应用功能的实现中，另外一种ROS通信机制也会被常常用到——那就是 动作 。从这个名字上就可以很好理解这个概念的含义，这种通信机制的目的就是便于 对机器人某一完整行为的流程进行管理 。 通信模型 举个例子，比如我们想让机器人转个圈，这肯定不是一下就可以完成的，机器人得一点一点旋转，直到360度才能结束，假设机器人并不在我们眼前，发出指令后，我们根本不知道机器人到底有没有开始转圈，转到哪里了？ OK，现在我们需要的是一个反馈，比如每隔1s，告诉我们当前转到多少度了，10度、20度、30度，一段时间之后，到了360度，再发送一个信息，表示动作执行完成。 这样一个需要执行一段时间的行为，使用动作的通信机制就更为合适，就像装了一个进度条，我们可以随时把控进度，如果运动过程当中，我们还可以随时发送一个取消运动的命令。 客户端/服务器模型 动作和服务类似，使用的也是客户端和服务器模型，客户端发送动作的目标，想让机器人干什么，服务器端执行动作过程， 控制机器人达到运动的目标，同时周期反馈动作执行过程中的状态。 客户端发送一个运动的目标，想让机器人动起来，服务器端收到之后，就开始控制机器人运动，一边运动，一边反馈当前的状态，如果是一个导航动作，这个反馈可能是当前所处的坐标，如果是机械臂抓取，这个反馈可能又是机械臂的实时姿态。当运动执行结束后，服务器再反馈一个动作结束的信息。整个通信过程就此结束。 一对多通信 和服务一样，动作通信中的客户端可以有多个，大家都可以发送运动命令，但是服务器端只能有一个，毕竟只有一个机器人，先执行完成一个动作，才能执行下一个动作。 同步通信 既然有反馈，那动作也是一种同步通信机制，之前我们也介绍过，动作过程中的数据通信接口，使用.action文件进行定义。 由服务和话题合成 大家再仔细看下上边的动图，是不是还会发现一个隐藏的秘密。 动作的三个通信模块，竟然有两个是服务，一个是话题，当客户端发送运动目标时，使用的是服务的请求调用，服务器端也会反馈一个应带，表示收到命令。动作的反馈过程，其实就是一个话题的周期发布，服务器端是发布者，客户端是订阅者。 没错，动作是一种应用层的通信机制，其底层就是基于话题和服务来实现的。 编程方法 相比之前话题和服务的程序，动作通信的例程相对较长，我们一起来运行并分析一下。 运行示例程序 $ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run learning_action_cpp server $ ros2 run learning_action_cpp client 代码解析 动作的服务器fibonacci_action_server.cpp： #include <inttypes.h> #include <memory> #include \"learning_action_cpp/action/fibonacci.hpp\" #include \"rclcpp/rclcpp.hpp\" // TODO(jacobperron): Remove this once it is included as part of 'rclcpp.hpp' #include \"rclcpp_action/rclcpp_action.hpp\" class MinimalActionServer : public rclcpp :: Node { public : using Fibonacci = learning_action_cpp :: action :: Fibonacci ; using GoalHandleFibonacci = rclcpp_action :: ServerGoalHandle < Fibonacci > ; explicit MinimalActionServer ( const rclcpp :: NodeOptions & options = rclcpp :: NodeOptions ()) : Node ( \"minimal_action_server\" , options ) { using namespace std :: placeholders ; this -> action_server_ = rclcpp_action :: create_server < Fibonacci > ( this -> get_node_base_interface (), this -> get_node_clock_interface (), this -> get_node_logging_interface (), this -> get_node_waitables_interface (), \"fibonacci\" , std :: bind ( & MinimalActionServer :: handle_goal , this , _1 , _2 ), std :: bind ( & MinimalActionServer :: handle_cancel , this , _1 ), std :: bind ( & MinimalActionServer :: handle_accepted , this , _1 )); } private : rclcpp_action :: Server < Fibonacci >:: SharedPtr action_server_ ; rclcpp_action :: GoalResponse handle_goal ( const rclcpp_action :: GoalUUID & uuid , std :: shared_ptr < const Fibonacci :: Goal > goal ) { RCLCPP_INFO ( this -> get_logger (), \"Received goal request with order %d\" , goal -> order ); ( void ) uuid ; // Let's reject sequences that are over 9000 if ( goal -> order > 9000 ) { return rclcpp_action :: GoalResponse :: REJECT ; } return rclcpp_action :: GoalResponse :: ACCEPT_AND_EXECUTE ; } rclcpp_action :: CancelResponse handle_cancel ( const std :: shared_ptr < GoalHandleFibonacci > goal_handle ) { RCLCPP_INFO ( this -> get_logger (), \"Received request to cancel goal\" ); ( void ) goal_handle ; return rclcpp_action :: CancelResponse :: ACCEPT ; } void execute ( const std :: shared_ptr < GoalHandleFibonacci > goal_handle ) { RCLCPP_INFO ( this -> get_logger (), \"Executing goal\" ); rclcpp :: Rate loop_rate ( 1 ); const auto goal = goal_handle -> get_goal (); auto feedback = std :: make_shared < Fibonacci :: Feedback > (); auto & sequence = feedback -> sequence ; sequence . push_back ( 0 ); sequence . push_back ( 1 ); auto result = std :: make_shared < Fibonacci :: Result > (); for ( int i = 1 ; ( i < goal -> order ) && rclcpp :: ok (); ++ i ) { // Check if there is a cancel request if ( goal_handle -> is_canceling ()) { result -> sequence = sequence ; goal_handle -> canceled ( result ); RCLCPP_INFO ( this -> get_logger (), \"Goal Canceled\" ); return ; } // Update sequence sequence . push_back ( sequence [ i ] + sequence [ i - 1 ]); // Publish feedback goal_handle -> publish_feedback ( feedback ); RCLCPP_INFO ( this -> get_logger (), \"Publish Feedback\" ); loop_rate . sleep (); } // Check if goal is done if ( rclcpp :: ok ()) { result -> sequence = sequence ; goal_handle -> succeed ( result ); RCLCPP_INFO ( this -> get_logger (), \"Goal Succeeded\" ); } } void handle_accepted ( const std :: shared_ptr < GoalHandleFibonacci > goal_handle ) { using namespace std :: placeholders ; // this needs to return quickly to avoid blocking the executor, so spin up a new thread std :: thread { std :: bind ( & MinimalActionServer :: execute , this , _1 ), goal_handle }. detach (); } }; // class MinimalActionServer int main ( int argc , char ** argv ) { rclcpp :: init ( argc , argv ); auto action_server = std :: make_shared < MinimalActionServer > (); rclcpp :: spin ( action_server ); rclcpp :: shutdown (); return 0 ; } 动作的客户端fibonacci_action_client.cpp： #include <inttypes.h> #include <memory> #include <string> #include <iostream> #include \"learning_action_cpp/action/fibonacci.hpp\" #include \"rclcpp/rclcpp.hpp\" // TODO ( jacobperron ) : Remove this once it is included as part of 'rclcpp.hpp' #include \"rclcpp_action/rclcpp_action.hpp\" class MinimalActionClient : public rclcpp::Node { public: using Fibonacci = learning_action_cpp::action::Fibonacci ; using GoalHandleFibonacci = rclcpp_action::ClientGoalHandle<Fibonacci> ; explicit MinimalActionClient ( const rclcpp::NodeOptions & node_options = rclcpp::NodeOptions ()) : Node ( \"minimal_action_client\" , node_options ) , goal_done_ ( false ) { this->client_ptr_ = rclcpp_action::create_client<Fibonacci> ( this->get_node_base_interface () , this->get_node_graph_interface () , this->get_node_logging_interface () , this->get_node_waitables_interface () , \"fibonacci\" ) ; this->timer_ = this->create_wall_timer ( std::chrono::milliseconds ( 500 ) , std::bind ( & MinimalActionClient::send_goal, this )) ; } bool is_goal_done () const { return this->goal_done_ ; } void send_goal () { using namespace std::placeholders ; this->timer_->cancel () ; this->goal_done_ = false ; if ( !this->client_ptr_ ) { RCLCPP_ERROR ( this->get_logger () , \"Action client not initialized\" ) ; } if ( !this->client_ptr_->wait_for_action_server ( std::chrono::seconds ( 10 ))) { RCLCPP_ERROR ( this->get_logger () , \"Action server not available after waiting\" ) ; this->goal_done_ = true ; return ; } auto goal_msg = Fibonacci::Goal () ; goal_msg.order = 10 ; RCLCPP_INFO ( this->get_logger () , \"Sending goal\" ) ; auto send_goal_options = rclcpp_action::Client<Fibonacci>::SendGoalOptions () ; send_goal_options.goal_response_callback = std::bind ( & MinimalActionClient::goal_response_callback, this, _1 ) ; send_goal_options.feedback_callback = std::bind ( & MinimalActionClient::feedback_callback, this, _1, _2 ) ; send_goal_options.result_callback = std::bind ( & MinimalActionClient::result_callback, this, _1 ) ; auto goal_handle_future = this->client_ptr_->async_send_goal ( goal_msg, send_goal_options ) ; } private: rclcpp_action::Client<Fibonacci>::SharedPtr client_ptr_ ; rclcpp::TimerBase::SharedPtr timer_ ; bool goal_done_ ; void goal_response_callback ( std::shared_future<GoalHandleFibonacci::SharedPtr> future ) { auto goal_handle = future.get () ; if ( !goal_handle ) { RCLCPP_ERROR ( this->get_logger () , \"Goal was rejected by server\" ) ; } else { RCLCPP_INFO ( this->get_logger () , \"Goal accepted by server, waiting for result\" ) ; } } void feedback_callback ( GoalHandleFibonacci::SharedPtr, const std::shared_ptr<const Fibonacci::Feedback> feedback ) { RCLCPP_INFO ( this->get_logger () , \"Next number in sequence received: %\" PRId32, feedback->sequence.back ()) ; } void result_callback ( const GoalHandleFibonacci::WrappedResult & result ) { this->goal_done_ = true ; switch ( result.code ) { case rclcpp_action::ResultCode::SUCCEEDED: break ; case rclcpp_action::ResultCode::ABORTED: RCLCPP_ERROR ( this->get_logger () , \"Goal was aborted\" ) ; return ; case rclcpp_action::ResultCode::CANCELED: RCLCPP_ERROR ( this->get_logger () , \"Goal was canceled\" ) ; return ; default: RCLCPP_ERROR ( this->get_logger () , \"Unknown result code\" ) ; return ; } RCLCPP_INFO ( this->get_logger () , \"Result received\" ) ; for ( auto number : result.result->sequence ) { RCLCPP_INFO ( this->get_logger () , \"%\" PRId32, number ) ; } } } ; // class MinimalActionClient int main ( int argc, char ** argv ) { rclcpp::init ( argc, argv ) ; auto action_client = std::make_shared<MinimalActionClient> () ; while ( !action_client->is_goal_done ()) { rclcpp::spin_some ( action_client ) ; } rclcpp::shutdown () ; return 0 ; }","text_tokens":["得","行为","通信接口","was","相对","就","a","合成","code","received","available","execute","argc","转个","options","info","are","还会","order","send","机器人","s","抓取","handle","是不是",",","graph","常常","using","main","servergoalhandle","action","callback","included",")","clock","简单","假设","20","到","转",";","minimalactionserver","shared","时","进度","1s","ok","inttypes","\"","#","会","switch","转圈","timer","如果","360","fibonacci","include","解析","需要","publish","这个","有","check","class","文件","多个","的","wrappedresult","系统","遥控","定义","中","source","收到","方法","avoid","还","那","goalresponse","功能","导航","知道","cpp","程序","例程","上","sendgoaloptions","其","目的","一点","future","介绍",":","by","of","bind","发布者","发布","想","part","。","一个","指令","500","resultcode","nodeoptions","运动","应用","分析","waiting","状态","some","下","干什么","over","loop","当","完成","管理","hpp","一","}","the","也","信息","达到","就此","wall","、","todo","return","把","开始",".","通信模型","iostream","实现","可能","三个","流程","毕竟","reject","眼前","break","const","minimal","者","像","seconds","这种","合适","动作","过","placeholders","feedback","看","30","ros","具体","这么","识别","上边","$","accept","底层","发出","back","new","哪里","另外","i","void","是","例子","调用","同时","sequences","先","is","+","复杂","再","送货","需求","that","h","满足","succeed","服务器","_","一样","private","和","一种","unknown","ptr","仔细","once","名字","shutdown","当前","只能","两个","argv","there","uuid","接口","&&","代码","模型","从","local","我们","wait","0","learning","!","chrono","：","setup","update","'","一点一点",">","，","cancelresponse","make","发现","1","init","canceled","就此结束","run","jacobperron","with","客户端","段时间","thread","cancel","分拣","it","没有","不是","bool","as","进行","由","accepted","每隔","executor","executing","(","explicit","false","sharedptr","不仅","没错","detach","public","同步","install","=","to","但是","timerbase","才能","while","base","succeeded","sequence","in","up","类似","都","node","某个","之后","d","logger","*","so","initialized","不","直到","基于","整个","server","只有","实时","现在","秘密","相比","number","waitables","10","执行","其实","使用","键盘","milliseconds","动图","很","这些","机制","之前","done","%","push","话题","client","{","++","场景","&","智能","msg","肯定","memory","可以","当中","应用层","多少度","表示","模块","clientgoalhandle","周期","竟然","并","有没有","一段","应带","remove","]","一下","命令","let","/","数据","对","ros2","服务","随时","姿态","时间","aborted","务器","create","控制","goalhandlefibonacci","后","this","9000","根本","举个","隐藏","[","等","logging","大家","async","string","反馈","运行","服务器端","needs","起来","after","到底","opt","minimalactionclient","prid32","not","理解","case","一段时间","bash","true","<","示例","canceling","result","臂","for","某一","告诉","发送","request","-","概念","next","response","这样","interface","_-","tros","多少","了","int","else","rate","机器","sending","？","过程","较长"," ","控","编程","在","namespace","不仅仅","被","用到","送餐","std","多","节点","便于","装","char","error","圈","通信","结束","goaluuid","quickly","目标","这","订阅","goal","取消","来","default","好","blocking","既然","就是","什么","坐标","又","spin","比如","机械","2","动","auto","旋转","一边","进度条","and","更为","rclcpp","客户","get","if","仅仅","完整","含义","让","sleep","—","度","rejected","一对","所处","请求"],"title":"多节点动作通信","title_tokens":["多","节点","通信","动作"]},{"location":"hhp/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_1","text":"机器人是一个复杂的智能系统，并不仅仅是键盘遥控运动、识别某个目标这么简单，我们需要实现的是送餐、送货、分拣等满足具体场景需求的机器人。 在这些应用功能的实现中，另外一种ROS通信机制也会被常常用到——那就是 动作 。从这个名字上就可以很好理解这个概念的含义，这种通信机制的目的就是便于 对机器人某一完整行为的流程进行管理 。","text_tokens":["管理","行为","机器","理解","名字","的","就"," ","系统","简单","也","对","场景","在","、","ros","智能","复杂","遥控","具体","好","。","就是","一个","分拣","从","目的","不仅仅","这么","被","这种","用到","送餐","某一","可以","送货","中","需求","我们","识别","实现","概念","运动","进行","等","机器人","满足","会","应用","便于","流程","仅仅","键盘","通信","那","功能","某个","完整","含义","并","很","上","一种","常常","目标","这些","，","需要","另外","—","不仅","是","机制","这个","动作"],"title":"多节点动作通信","title_tokens":["多","节点","通信","动作"]},{"location":"hhp/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_2","text":"举个例子，比如我们想让机器人转个圈，这肯定不是一下就可以完成的，机器人得一点一点旋转，直到360度才能结束，假设机器人并不在我们眼前，发出指令后，我们根本不知道机器人到底有没有开始转圈，转到哪里了？ OK，现在我们需要的是一个反馈，比如每隔1s，告诉我们当前转到多少度了，10度、20度、30度，一段时间之后，到了360度，再发送一个信息，表示动作执行完成。 这样一个需要执行一段时间的行为，使用动作的通信机制就更为合适，就像装了一个进度条，我们可以随时把控进度，如果运动过程当中，我们还可以随时发送一个取消运动的命令。","text_tokens":["得","行为","一段","一下","就","命令","段时间","信息","、","把","随时","开始","没有","时间","不是","转个","后","根本","举个","机器人","每隔","眼前","反馈","像","到底","合适","动作","一段时间","假设","才能","30","20","到","转","进度","1s","告诉","ok","发送","这样","发出","转圈","如果","360","之后","多少","了","哪里","需要","是","机器","例子","？","的","过程","不"," ","控","直到","在","现在","再","10","执行","还","使用","装","圈","通信","知道","结束","这","机制","一点","取消","当前","想","。","一个","比如","肯定","旋转","可以","指令","进度条","我们","当中","更为","运动","多少度","表示","一点一点","让","并","完成","，","度","有没有"],"title":"通信模型","title_tokens":["通信模型","模型","通信"]},{"location":"hhp/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_3","text":"动作和服务类似，使用的也是客户端和服务器模型，客户端发送动作的目标，想让机器人干什么，服务器端执行动作过程， 控制机器人达到运动的目标，同时周期反馈动作执行过程中的状态。 客户端发送一个运动的目标，想让机器人动起来，服务器端收到之后，就开始控制机器人运动，一边运动，一边反馈当前的状态，如果是一个导航动作，这个反馈可能是当前所处的坐标，如果是机械臂抓取，这个反馈可能又是机械臂的实时姿态。当运动执行结束后，服务器再反馈一个动作结束的信息。整个通信过程就此结束。","text_tokens":["机器","就此结束","的","过程","就"," ","当前","同时","也","客户端","信息","整个","臂","服务","达到","实时","就此","想","姿态","。","再","模型","什么","一个","坐标","开始","机械","又","务器","动","控制","发送","中","一边","后","可能","客户","执行","运动","收到","机器人","抓取","类似","使用","服务器","状态","如果","干什么","通信","导航","周期","之后","反馈","结束","和","让","服务器端","当","目标","起来","，","是","这个","所处","动作"],"title":"客户端/服务器模型","title_tokens":["客户","模型","/","服务器","客户端","务器","服务"]},{"location":"hhp/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_4","text":"和服务一样，动作通信中的客户端可以有多个，大家都可以发送运动命令，但是服务器端只能有一个，毕竟只有一个机器人，先执行完成一个动作，才能执行下一个动作。","text_tokens":["有","机器","多个","的","命令","只能","但是","客户端","才能","只有","先","服务","。","一个","务器","可以","发送","中","客户","运动","执行","机器人","大家","服务器","毕竟","下","都","通信","一样","和","服务器端","完成","，","动作"],"title":"一对多通信","title_tokens":["一对","通信","多"]},{"location":"hhp/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_5","text":"既然有反馈，那动作也是一种同步通信机制，之前我们也介绍过，动作过程中的数据通信接口，使用.action文件进行定义。","text_tokens":["过","同步","有","通信接口","介绍","action","文件","过程","的","数据","也","接口","既然","。","定义",".","中","我们","进行","使用","那","通信","反馈","一种","，","是","机制","之前","动作"],"title":"同步通信","title_tokens":["同步","通信"]},{"location":"hhp/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_6","text":"大家再仔细看下上边的动图，是不是还会发现一个隐藏的秘密。 动作的三个通信模块，竟然有两个是服务，一个是话题，当客户端发送运动目标时，使用的是服务的请求调用，服务器端也会反馈一个应带，表示收到命令。动作的反馈过程，其实就是一个话题的周期发布，服务器端是发布者，客户端是订阅者。 没错，动作是一种应用层的通信机制，其底层就是基于话题和服务来实现的。","text_tokens":["有","仔细","应带","看","调用","的","命令","话题"," ","过程","来","也","两个","客户端","发布者","基于","服务","发布","秘密","再","。","一个","就是","其","不是","时","务器","请求","发送","还会","实现","上边","隐藏","客户","运动","收到","会","应用层","底层","应用","三个","其实","模块","使用","大家","服务器","表示","下","通信","是不是","周期","反馈","动图","竟然","和","者","服务器端","一种","当","目标","，","订阅","是","机制","没错","发现","动作"],"title":"由服务和话题合成","title_tokens":["和","由","话题","合成","服务"]},{"location":"hhp/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_7","text":"相比之前话题和服务的程序，动作通信的例程相对较长，我们一起来运行并分析一下。","text_tokens":["一","一下","相对","的","较长","话题","服务","相比","。","我们","分析","通信","程序","和","运行","并","例程","起来","，","之前","动作"],"title":"编程方法","title_tokens":["编程","方法"]},{"location":"hhp/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_8","text":"$ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run learning_action_cpp server $ ros2 run learning_action_cpp client","text_tokens":["action","install","run","bash"," ","/","client","server","ros2",".","local","source","$","learning","setup","_","tros","cpp","opt"],"title":"运行示例程序","title_tokens":["示例","程序","运行"]},{"location":"hhp/3.3_%E5%A4%9A%E8%8A%82%E7%82%B9%E5%8A%A8%E4%BD%9C%E9%80%9A%E4%BF%A1/#_9","text":"动作的服务器fibonacci_action_server.cpp： #include <inttypes.h> #include <memory> #include \"learning_action_cpp/action/fibonacci.hpp\" #include \"rclcpp/rclcpp.hpp\" // TODO(jacobperron): Remove this once it is included as part of 'rclcpp.hpp' #include \"rclcpp_action/rclcpp_action.hpp\" class MinimalActionServer : public rclcpp :: Node { public : using Fibonacci = learning_action_cpp :: action :: Fibonacci ; using GoalHandleFibonacci = rclcpp_action :: ServerGoalHandle < Fibonacci > ; explicit MinimalActionServer ( const rclcpp :: NodeOptions & options = rclcpp :: NodeOptions ()) : Node ( \"minimal_action_server\" , options ) { using namespace std :: placeholders ; this -> action_server_ = rclcpp_action :: create_server < Fibonacci > ( this -> get_node_base_interface (), this -> get_node_clock_interface (), this -> get_node_logging_interface (), this -> get_node_waitables_interface (), \"fibonacci\" , std :: bind ( & MinimalActionServer :: handle_goal , this , _1 , _2 ), std :: bind ( & MinimalActionServer :: handle_cancel , this , _1 ), std :: bind ( & MinimalActionServer :: handle_accepted , this , _1 )); } private : rclcpp_action :: Server < Fibonacci >:: SharedPtr action_server_ ; rclcpp_action :: GoalResponse handle_goal ( const rclcpp_action :: GoalUUID & uuid , std :: shared_ptr < const Fibonacci :: Goal > goal ) { RCLCPP_INFO ( this -> get_logger (), \"Received goal request with order %d\" , goal -> order ); ( void ) uuid ; // Let's reject sequences that are over 9000 if ( goal -> order > 9000 ) { return rclcpp_action :: GoalResponse :: REJECT ; } return rclcpp_action :: GoalResponse :: ACCEPT_AND_EXECUTE ; } rclcpp_action :: CancelResponse handle_cancel ( const std :: shared_ptr < GoalHandleFibonacci > goal_handle ) { RCLCPP_INFO ( this -> get_logger (), \"Received request to cancel goal\" ); ( void ) goal_handle ; return rclcpp_action :: CancelResponse :: ACCEPT ; } void execute ( const std :: shared_ptr < GoalHandleFibonacci > goal_handle ) { RCLCPP_INFO ( this -> get_logger (), \"Executing goal\" ); rclcpp :: Rate loop_rate ( 1 ); const auto goal = goal_handle -> get_goal (); auto feedback = std :: make_shared < Fibonacci :: Feedback > (); auto & sequence = feedback -> sequence ; sequence . push_back ( 0 ); sequence . push_back ( 1 ); auto result = std :: make_shared < Fibonacci :: Result > (); for ( int i = 1 ; ( i < goal -> order ) && rclcpp :: ok (); ++ i ) { // Check if there is a cancel request if ( goal_handle -> is_canceling ()) { result -> sequence = sequence ; goal_handle -> canceled ( result ); RCLCPP_INFO ( this -> get_logger (), \"Goal Canceled\" ); return ; } // Update sequence sequence . push_back ( sequence [ i ] + sequence [ i - 1 ]); // Publish feedback goal_handle -> publish_feedback ( feedback ); RCLCPP_INFO ( this -> get_logger (), \"Publish Feedback\" ); loop_rate . sleep (); } // Check if goal is done if ( rclcpp :: ok ()) { result -> sequence = sequence ; goal_handle -> succeed ( result ); RCLCPP_INFO ( this -> get_logger (), \"Goal Succeeded\" ); } } void handle_accepted ( const std :: shared_ptr < GoalHandleFibonacci > goal_handle ) { using namespace std :: placeholders ; // this needs to return quickly to avoid blocking the executor, so spin up a new thread std :: thread { std :: bind ( & MinimalActionServer :: execute , this , _1 ), goal_handle }. detach (); } }; // class MinimalActionServer int main ( int argc , char ** argv ) { rclcpp :: init ( argc , argv ); auto action_server = std :: make_shared < MinimalActionServer > (); rclcpp :: spin ( action_server ); rclcpp :: shutdown (); return 0 ; } 动作的客户端fibonacci_action_client.cpp： #include <inttypes.h> #include <memory> #include <string> #include <iostream> #include \"learning_action_cpp/action/fibonacci.hpp\" #include \"rclcpp/rclcpp.hpp\" // TODO ( jacobperron ) : Remove this once it is included as part of 'rclcpp.hpp' #include \"rclcpp_action/rclcpp_action.hpp\" class MinimalActionClient : public rclcpp::Node { public: using Fibonacci = learning_action_cpp::action::Fibonacci ; using GoalHandleFibonacci = rclcpp_action::ClientGoalHandle<Fibonacci> ; explicit MinimalActionClient ( const rclcpp::NodeOptions & node_options = rclcpp::NodeOptions ()) : Node ( \"minimal_action_client\" , node_options ) , goal_done_ ( false ) { this->client_ptr_ = rclcpp_action::create_client<Fibonacci> ( this->get_node_base_interface () , this->get_node_graph_interface () , this->get_node_logging_interface () , this->get_node_waitables_interface () , \"fibonacci\" ) ; this->timer_ = this->create_wall_timer ( std::chrono::milliseconds ( 500 ) , std::bind ( & MinimalActionClient::send_goal, this )) ; } bool is_goal_done () const { return this->goal_done_ ; } void send_goal () { using namespace std::placeholders ; this->timer_->cancel () ; this->goal_done_ = false ; if ( !this->client_ptr_ ) { RCLCPP_ERROR ( this->get_logger () , \"Action client not initialized\" ) ; } if ( !this->client_ptr_->wait_for_action_server ( std::chrono::seconds ( 10 ))) { RCLCPP_ERROR ( this->get_logger () , \"Action server not available after waiting\" ) ; this->goal_done_ = true ; return ; } auto goal_msg = Fibonacci::Goal () ; goal_msg.order = 10 ; RCLCPP_INFO ( this->get_logger () , \"Sending goal\" ) ; auto send_goal_options = rclcpp_action::Client<Fibonacci>::SendGoalOptions () ; send_goal_options.goal_response_callback = std::bind ( & MinimalActionClient::goal_response_callback, this, _1 ) ; send_goal_options.feedback_callback = std::bind ( & MinimalActionClient::feedback_callback, this, _1, _2 ) ; send_goal_options.result_callback = std::bind ( & MinimalActionClient::result_callback, this, _1 ) ; auto goal_handle_future = this->client_ptr_->async_send_goal ( goal_msg, send_goal_options ) ; } private: rclcpp_action::Client<Fibonacci>::SharedPtr client_ptr_ ; rclcpp::TimerBase::SharedPtr timer_ ; bool goal_done_ ; void goal_response_callback ( std::shared_future<GoalHandleFibonacci::SharedPtr> future ) { auto goal_handle = future.get () ; if ( !goal_handle ) { RCLCPP_ERROR ( this->get_logger () , \"Goal was rejected by server\" ) ; } else { RCLCPP_INFO ( this->get_logger () , \"Goal accepted by server, waiting for result\" ) ; } } void feedback_callback ( GoalHandleFibonacci::SharedPtr, const std::shared_ptr<const Fibonacci::Feedback> feedback ) { RCLCPP_INFO ( this->get_logger () , \"Next number in sequence received: %\" PRId32, feedback->sequence.back ()) ; } void result_callback ( const GoalHandleFibonacci::WrappedResult & result ) { this->goal_done_ = true ; switch ( result.code ) { case rclcpp_action::ResultCode::SUCCEEDED: break ; case rclcpp_action::ResultCode::ABORTED: RCLCPP_ERROR ( this->get_logger () , \"Goal was aborted\" ) ; return ; case rclcpp_action::ResultCode::CANCELED: RCLCPP_ERROR ( this->get_logger () , \"Goal was canceled\" ) ; return ; default: RCLCPP_ERROR ( this->get_logger () , \"Unknown result code\" ) ; return ; } RCLCPP_INFO ( this->get_logger () , \"Result received\" ) ; for ( auto number : result.result->sequence ) { RCLCPP_INFO ( this->get_logger () , \"%\" PRId32, number ) ; } } } ; // class MinimalActionClient int main ( int argc, char ** argv ) { rclcpp::init ( argc, argv ) ; auto action_client = std::make_shared<MinimalActionClient> () ; while ( !action_client->is_goal_done ()) { rclcpp::spin_some ( action_client ) ; } rclcpp::shutdown () ; return 0 ; }","text_tokens":["canceled","hpp","was","remove","]","jacobperron","}","let","a","/","the","with","客户端","code","服务","received","wall","todo","return","thread","cancel","it","available","execute","aborted","务器","create",".","argc","goalhandlefibonacci","options","as","info","are","this","order","9000","iostream","send","[","s","logging","accepted","handle","async","executor","reject",",","executing","string","const","(","break","minimal","explicit","graph","false","needs","sharedptr","seconds","after","using","main","minimalactionclient","detach","prid32","动作","public","action","servergoalhandle","placeholders","feedback","not","included","callback","case","=",")","true","<","clock","to","canceling","timerbase","result","for","while","base",";","succeeded","minimalactionserver","shared","sequence","bool","ok","request","inttypes","\"","in","-","next","#","accept","up","response","switch","timer","back","fibonacci","interface","node","_-","include","new","int","else","d","rate","logger","i","void","*","check","sending","class","so","的","initialized","wrappedresult"," ","server","sequences","is","+","number","waitables","namespace","std","that","10","h","avoid","succeed","服务器","char","error","goalresponse","_","private","cpp","milliseconds","goaluuid","quickly","unknown","ptr","goal","sendgoaloptions","future","done","%","push","once",":","shutdown","by","default","of","bind","client","{","argv","++","there","&","blocking","msg","uuid","part","&&","spin","2","memory","auto","500","resultcode","nodeoptions","and","wait","rclcpp","0","客户","learning","get","!","chrono","waiting","if","：","some","clientgoalhandle","update","'","sleep","over","loop",">","cancelresponse","make","rejected","1","init","publish"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"hhp/3.4_%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/","text":"零拷贝数据传输 在传统操作系统的数据传输过程中，系统内部会在磁盘、内存、缓存中多次进行数据拷贝，每次都会占用CPU的资源，数据量小的时候还好，随着数据量的增加，CPU的开销也会持续增加，尤其是在机器人图像数据的应用中 ，经常会发生这种问题，导致CPU都在做数据拷贝，没有时间处理其他的应用功能了，直接的感觉就是处理卡顿。 零拷贝技术 针对这种问题，零拷贝技术应运而生。 零拷贝主要的任务就是避免CPU将数据从一块存储拷贝到另外一块存储，避免让CPU做大量的数据拷贝任务，减少不必要的拷贝，或者让别的组件来做这一类简单的数据传输任务，让CPU解脱出来专注于别的任务。这样就可以让系统资源的利用更加有效。 TogetherROS中就提供了灵活、高效的零拷贝功能，可以显著降低大尺寸数据的通信延时和CPU占用，具体有多显著呢，我们不妨进行一个测试。 TogetherROS零拷贝性能测试 我们使用TogetherROS系统内部集成的性能测试工具——performance_test，来评估下开启零拷贝前后的性能差异，这里我们传输的样本数据量是4M。 未开启零拷贝进行数据传输 $ ros2 run performance_test perf_test --reliable --keep-last --history-depth 10 -s 1 -m Array4m -r 100 --max-runtime 30 #未开启 开启零拷贝数据传输： $ ros2 run performance_test perf_test --zero-copy --reliable --keep-last --history-depth 10 -s 1 -m Array4m -r 100 --max-runtime 30 #开启 好的，测试已经跑完了，我们把结果放到这里，来分析一下。 在这个测试中，关键有四个指标： 时延，也就是消息从发布者到订阅者的传输时间。不开启零拷贝的情况下，平均为0.004912s，开启零拷贝之后，速度快了差不多40倍，平均为0.000180s。 CPU使用率，表示通信活动所占用的CPU时间，大家可以看这个utime指标，开启零拷贝之后时间有显著的提升，消耗CPU的资源少了。 驻留内存，包括通信过程中分配的内存和共享内存，是这个maxrss中的数据，开启零拷贝之后，占用的内存也更少。 样本统计，包括测试中发送、接收以及丢失的消息数量，是这组数据，依然是开启零拷贝之后性能更好。 通过测试，对于大数据通信来讲，零拷贝在CPU消耗、内存占用以及通信延迟抖动方面的性能都会更好。 这里只是便于大家感受零拷贝技术的效果，具体编程中如何使用零拷贝机制呢？ 编程开发 为了方便大家使用，TogetherROS针对零拷贝功能进行了封装，风格类似ROS2中话题通信的接口，还是话题通信一样的流程，我们只需要修改几个函数就可以实现啦。 运行例程 $ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run hbmem_pubsub talker $ ros2 run hbmem_pubsub listener 代码解析 发布者publisher_hbmem.cpp： #include <chrono> #include <functional> #include <memory> #include <string> #include \"rclcpp/rclcpp.hpp\" #include \"hbmem_pubsub/msg/sample_message.hpp\" using namespace std :: chrono_literals ; class MinimalHbmemPublisher : public rclcpp :: Node { public : MinimalHbmemPublisher () : Node ( \"minimal_hbmem_publisher\" ), count_ ( 0 ) { // 创建publisher_hbmem，topic为\"topic\"，QOS为KEEPLAST(10)，以及默认的可靠传输 publisher_ = this -> create_publisher_hbmem < hbmem_pubsub :: msg :: SampleMessage > ( \"topic\" , 10 ); // 定时器，每隔40毫秒调用一次timer_callback进行消息发送 timer_ = this -> create_wall_timer ( 40 ms , std :: bind ( & MinimalHbmemPublisher :: timer_callback , this )); } private : // 定时器回调函数 void timer_callback () { // 获取要发送的消息 auto loanedMsg = publisher_ -> borrow_loaned_message (); // 判断消息是否可用，可能出现获取消息失败导致消息不可用的情况 if ( loanedMsg . is_valid ()) { // 引用方式获取实际的消息 auto & msg = loanedMsg . get (); // 获取当前时间，单位为us auto time_now = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now (). time_since_epoch ()). count (); // 对消息的index和time_stamp进行赋值 msg . index = count_ ; msg . time_stamp = time_now ; // 打印发送消息 RCLCPP_INFO ( this -> get_logger (), \"message: %d\" , msg . index ); publisher_ -> publish ( std :: move ( loanedMsg )); // 注意，发送后，loanedMsg已不可用 // 计数器加一 count_ ++ ; } else { // 获取消息失败，丢弃该消息 RCLCPP_INFO ( this -> get_logger (), \"Failed to get LoanMessage!\" ); } } // 定时器 rclcpp :: TimerBase :: SharedPtr timer_ ; // hbmem publisher rclcpp :: PublisherHbmem < hbmem_pubsub :: msg :: SampleMessage >:: SharedPtr publisher_ ; // 计数器 size_t count_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalHbmemPublisher > ()); rclcpp :: shutdown (); return 0 ; } 订阅者subscriber_hbmem.cpp： #include <memory> #include \"rclcpp/rclcpp.hpp\" #include \"hbmem_pubsub/msg/sample_message.hpp\" class MinimalHbmemSubscriber : public rclcpp :: Node { public : MinimalHbmemSubscriber () : Node ( \"minimal_hbmem_subscriber\" ) { // 创建subscription_hbmem，topic为\"sample\"，QOS为KEEPLAST(10)，以及默认的可靠传输 // 消息回调函数为topic_callback subscription_ = this -> create_subscription_hbmem < hbmem_pubsub :: msg :: SampleMessage > ( \"topic\" , 10 , std :: bind ( & MinimalHbmemSubscriber :: topic_callback , this , std :: placeholders :: _1 )); } private : // 消息回调函数 void topic_callback ( const hbmem_pubsub :: msg :: SampleMessage :: SharedPtr msg ) const { // 注意，msg只能在回调函数中使用，回调函数返回后，该消息就会被释放 // 获取当前时间 auto time_now = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now (). time_since_epoch ()) . count (); // 计算延时并打印出来 RCLCPP_INFO ( this -> get_logger (), \"msg %d, time cost %dus\" , msg -> index , time_now - msg -> time_stamp ); } // hbmem subscription rclcpp :: SubscriptionHbmem < hbmem_pubsub :: msg :: SampleMessage >:: SharedPtr subscription_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalHbmemSubscriber > ()); rclcpp :: shutdown (); return 0 ; } 接口汇总 我们整理一下，与ROS2中的话题通信相比，TogetherROS带有零拷贝机制的话题通信接口是这样的。 在发布者中，我们可以使用PublisherHbmem来创建一个发布者对象，然后通过create_publisher_hbmem发布数据，而在订阅者中，SubscriptionHbmem用来创建一个订阅者对象，通过 create_subscription_hbmem订阅需要的数据，至于底层如何完成零拷贝的过程，都交给TogetherROS即可。","text_tokens":["通信接口","pubsub","就","处理","failed","尤其","别的","灵活","数据传输","argc","info","只","不必","机器人","s","应运而生","是否","copy","显著",",","borrow","对于","一类","评估","using","main","接收","callback",")","clock","已经","简单","为了","0.000180","count","hbmem","到",";","shared","驻留","\"","加一","只是","#","会","timer","us","修改","include","解析","需要","move","前后","这个","qos","资源","有","封装","class","的","系统","风格","失败","samplemessage","开启","该","放到","集成","即可","返回","keeplast","计算","中","source","延时","reliable","提供","cast","更加","功能","数据量","cpp","差不多","例程","四个","情况","单位","其他",":","不多","bind","发布者","epoch","函数","发布","测试工具","。","必要","一个","应用","publisher","分析","下","zero","用","完成","publisherhbmem","hpp","工具","}","可靠","也","wall","runtime","、","return","完","把","抖动","赋值","时候","系统资源",".","共享内存","实现","可能","共享","避免","方面","流程","const","minimal","者","至于","--","这种","loanedmsg","placeholders","打印","看","少","loaned","更少","30","具体","将","默认","还好","毫秒","出来","对象","专注","数量","$","底层","据传","任务","talker","另外","void","是","丢弃","直接","差异","操作系统","调用","操作","大量","cost","提升","ms","is","listener","计数器","或者","loanmessage","为","延迟","depth","这组","stamp","结果","_","呢","一样","private","和","汇总","缓存","shutdown","当前","只能","以及","argv","dus","接口","代码","与","从","图像","local","占用","我们","组件","更好","0","!","chrono","传统","：","setup","所","last","效果",">","utime","，","make","1","init","sample","run","释放","样本","卡顿","如何","没有","t","零","传输","依然","subscriber","进行","解脱","100","啦","注意","随着","每隔","还是","(","平均","经常","不可","sharedptr","主要","public","install","获取","=","max","to","timerbase","关键","问题","跑","40","消息","试工","performance","定时器","keep","减少","size","持续","类似","不妨","消耗","都","node","之后","d","logger","*","定时","array4m","perf","有效","不","回调","包括","出现","相比","已","不必要","针对","未","m","做","10","test","小","尺寸","要","使用","磁盘","since","每次","使用率","机制","存储","%","创建","增加","话题","{","history","++","&","msg","感受","一块","literals","memory","可以","利用","表示","性能","time","感觉","内部","速度","然后","带有","实际","subscriptionhbmem","]","一下","拷贝","数据","/","对","togetherros","ros2","拷贝到","发生","时间","降低","create","后","数据通信","this","[","r","大家","大","string","分配","来讲","运行","这里","opt","多次","bash","<","内存","统计","cpu","可用","几个","而","发送","数据通","方式","-","这样","maxrss","一次","整理","0.004912","tros","高效","else","了","int","valid","now","于","机器","？","活动","过程"," ","编程","技术","测试","开销","functional","在","minimalhbmemsubscriber","namespace","index","被","std","交给","多","duration","steady","便于","导致","引用","subscription","char","通信","应运","topic","丢失","这","订阅","倍","microseconds","并打印","来","通过","好","判断","用率","就是","spin","时延","计数","auto","rclcpp","方便","get","message","开发","minimalhbmempublisher","4m","if","让","快","—","用来","指标","publish"],"title":"零拷贝数据传输","title_tokens":["零","传输","拷贝","数据","数据传输","据传"]},{"location":"hhp/3.4_%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/#_1","text":"在传统操作系统的数据传输过程中，系统内部会在磁盘、内存、缓存中多次进行数据拷贝，每次都会占用CPU的资源，数据量小的时候还好，随着数据量的增加，CPU的开销也会持续增加，尤其是在机器人图像数据的应用中 ，经常会发生这种问题，导致CPU都在做数据拷贝，没有时间处理其他的应用功能了，直接的感觉就是处理卡顿。","text_tokens":["其他","多次","资源","机器","直接","操作系统","缓存","的","过程","增加","数据","内存","拷贝","操作"," ","系统","也","处理","开销","在","、","cpu","问题","卡顿","尤其","。","就是","发生","还好","没有","时间","数据传输","时候","做","图像","中","占用","传输","进行","会","小","机器人","应用","传统","持续","随着","据传","导致","都","磁盘","功能","数据量","感觉","内部","了","，","每次","经常","这种","是"],"title":"零拷贝数据传输","title_tokens":["零","传输","拷贝","数据","数据传输","据传"]},{"location":"hhp/3.4_%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/#_2","text":"针对这种问题，零拷贝技术应运而生。 零拷贝主要的任务就是避免CPU将数据从一块存储拷贝到另外一块存储，避免让CPU做大量的数据拷贝任务，减少不必要的拷贝，或者让别的组件来做这一类简单的数据传输任务，让CPU解脱出来专注于别的任务。这样就可以让系统资源的利用更加有效。 TogetherROS中就提供了灵活、高效的零拷贝功能，可以显著降低大尺寸数据的通信延时和CPU占用，具体有多显著呢，我们不妨进行一个测试。","text_tokens":["就","拷贝","数据","togetherros","、","别的","灵活","拷贝到","数据传输","降低","系统资源","零","传输","不必","进行","解脱","避免","应运而生","显著","大","一类","这种","主要","简单","cpu","具体","问题","将","出来","专注","减少","这样","不妨","据传","任务","高效","了","另外","于","资源","有","有效","的"," ","技术","大量","系统","测试","不必要","针对","或者","做","中","多","延时","尺寸","提供","通信","更加","功能","呢","应运","和","这","存储","来","。","就是","一块","必要","从","一个","可以","占用","我们","组件","利用","让","，"],"title":"零拷贝技术","title_tokens":["拷贝","技术","零"]},{"location":"hhp/3.4_%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/#togetherros","text":"我们使用TogetherROS系统内部集成的性能测试工具——performance_test，来评估下开启零拷贝前后的性能差异，这里我们传输的样本数据量是4M。 未开启零拷贝进行数据传输 $ ros2 run performance_test perf_test --reliable --keep-last --history-depth 10 -s 1 -m Array4m -r 100 --max-runtime 30 #未开启 开启零拷贝数据传输： $ ros2 run performance_test perf_test --zero-copy --reliable --keep-last --history-depth 10 -s 1 -m Array4m -r 100 --max-runtime 30 #开启 好的，测试已经跑完了，我们把结果放到这里，来分析一下。 在这个测试中，关键有四个指标： 时延，也就是消息从发布者到订阅者的传输时间。不开启零拷贝的情况下，平均为0.004912s，开启零拷贝之后，速度快了差不多40倍，平均为0.000180s。 CPU使用率，表示通信活动所占用的CPU时间，大家可以看这个utime指标，开启零拷贝之后时间有显著的提升，消耗CPU的资源少了。 驻留内存，包括通信过程中分配的内存和共享内存，是这个maxrss中的数据，开启零拷贝之后，占用的内存也更少。 样本统计，包括测试中发送、接收以及丢失的消息数量，是这组数据，依然是开启零拷贝之后性能更好。 通过测试，对于大数据通信来讲，零拷贝在CPU消耗、内存占用以及通信延迟抖动方面的性能都会更好。 这里只是便于大家感受零拷贝技术的效果，具体编程中如何使用零拷贝机制呢？","text_tokens":["工具","run","一下","拷贝","数据","也","togetherros","样本","ros2","runtime","、","完","把","抖动","如何","时间","数据传输","零","传输","共享内存","数据通信","依然","进行","共享","s","100","方面","r","大家","copy","显著","大","分配","对于","平均","来讲","者","评估","--","这里","接收","看","max","少","已经","内存","更少","0.000180","关键","统计","30","cpu","具体","到","跑","40","消息","试工","performance","驻留","发送","数据通","keep","数量","-","只是","$","#","会","maxrss","据传","消耗","都","之后","0.004912","了","是","前后","这个","array4m","有","资源","差异","perf","？","活动","的","过程"," ","不","编程","技术","系统","包括","测试","提升","在","开启","放到","集成","未","m","为","中","延迟","10","test","depth","reliable","这组","便于","使用","结果","通信","_","呢","数据量","差不多","和","丢失","四个","订阅","使用率","机制","倍","情况","来","不多","发布者","以及","history","通过","发布","测试工具","好","感受","用率","。","就是","从","时延","可以","占用","我们","更好","分析","表示","性能","4m","：","下","zero","所","last","内部","快","效果","—","速度","utime","，","1","指标"],"title":"TogetherROS零拷贝性能测试","title_tokens":["零","拷贝","测试","性能","togetherros"]},{"location":"hhp/3.4_%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/#_3","text":"为了方便大家使用，TogetherROS针对零拷贝功能进行了封装，风格类似ROS2中话题通信的接口，还是话题通信一样的流程，我们只需要修改几个函数就可以实现啦。","text_tokens":["封装","的","就","话题","拷贝","为了","ros2","风格","togetherros","函数","接口","。","针对","几个","可以","中","我们","零","只","实现","进行","方便","啦","类似","使用","大家","流程","还是","通信","功能","一样","修改","了","，","需要"],"title":"编程开发","title_tokens":["编程","开发"]},{"location":"hhp/3.4_%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/#_4","text":"$ source /opt/tros/local_setup.bash $ source install/local_setup.bash $ ros2 run hbmem_pubsub talker $ ros2 run hbmem_pubsub listener","text_tokens":["_","ros2","source","hbmem","tros","install","pubsub","talker","run","$","bash","listener"," ","/","setup",".","opt","local"],"title":"运行例程","title_tokens":["运行","例程"]},{"location":"hhp/3.4_%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/#_5","text":"发布者publisher_hbmem.cpp： #include <chrono> #include <functional> #include <memory> #include <string> #include \"rclcpp/rclcpp.hpp\" #include \"hbmem_pubsub/msg/sample_message.hpp\" using namespace std :: chrono_literals ; class MinimalHbmemPublisher : public rclcpp :: Node { public : MinimalHbmemPublisher () : Node ( \"minimal_hbmem_publisher\" ), count_ ( 0 ) { // 创建publisher_hbmem，topic为\"topic\"，QOS为KEEPLAST(10)，以及默认的可靠传输 publisher_ = this -> create_publisher_hbmem < hbmem_pubsub :: msg :: SampleMessage > ( \"topic\" , 10 ); // 定时器，每隔40毫秒调用一次timer_callback进行消息发送 timer_ = this -> create_wall_timer ( 40 ms , std :: bind ( & MinimalHbmemPublisher :: timer_callback , this )); } private : // 定时器回调函数 void timer_callback () { // 获取要发送的消息 auto loanedMsg = publisher_ -> borrow_loaned_message (); // 判断消息是否可用，可能出现获取消息失败导致消息不可用的情况 if ( loanedMsg . is_valid ()) { // 引用方式获取实际的消息 auto & msg = loanedMsg . get (); // 获取当前时间，单位为us auto time_now = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now (). time_since_epoch ()). count (); // 对消息的index和time_stamp进行赋值 msg . index = count_ ; msg . time_stamp = time_now ; // 打印发送消息 RCLCPP_INFO ( this -> get_logger (), \"message: %d\" , msg . index ); publisher_ -> publish ( std :: move ( loanedMsg )); // 注意，发送后，loanedMsg已不可用 // 计数器加一 count_ ++ ; } else { // 获取消息失败，丢弃该消息 RCLCPP_INFO ( this -> get_logger (), \"Failed to get LoanMessage!\" ); } } // 定时器 rclcpp :: TimerBase :: SharedPtr timer_ ; // hbmem publisher rclcpp :: PublisherHbmem < hbmem_pubsub :: msg :: SampleMessage >:: SharedPtr publisher_ ; // 计数器 size_t count_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalHbmemPublisher > ()); rclcpp :: shutdown (); return 0 ; } 订阅者subscriber_hbmem.cpp： #include <memory> #include \"rclcpp/rclcpp.hpp\" #include \"hbmem_pubsub/msg/sample_message.hpp\" class MinimalHbmemSubscriber : public rclcpp :: Node { public : MinimalHbmemSubscriber () : Node ( \"minimal_hbmem_subscriber\" ) { // 创建subscription_hbmem，topic为\"sample\"，QOS为KEEPLAST(10)，以及默认的可靠传输 // 消息回调函数为topic_callback subscription_ = this -> create_subscription_hbmem < hbmem_pubsub :: msg :: SampleMessage > ( \"topic\" , 10 , std :: bind ( & MinimalHbmemSubscriber :: topic_callback , this , std :: placeholders :: _1 )); } private : // 消息回调函数 void topic_callback ( const hbmem_pubsub :: msg :: SampleMessage :: SharedPtr msg ) const { // 注意，msg只能在回调函数中使用，回调函数返回后，该消息就会被释放 // 获取当前时间 auto time_now = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now (). time_since_epoch ()) . count (); // 计算延时并打印出来 RCLCPP_INFO ( this -> get_logger (), \"msg %d, time cost %dus\" , msg -> index , time_now - msg -> time_stamp ); } // hbmem subscription rclcpp :: SubscriptionHbmem < hbmem_pubsub :: msg :: SampleMessage >:: SharedPtr subscription_ ; }; int main ( int argc , char * argv []) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < MinimalHbmemSubscriber > ()); rclcpp :: shutdown (); return 0 ; }","text_tokens":["subscriptionhbmem","sample","hpp","pubsub","]","}","就","/","可靠","对","释放","wall","return","failed","赋值","时间","t","create",".","argc","后","info","传输","this","可能","[","进行","subscriber","注意","是否","每隔","string",",","borrow","const","(","minimal","者","不可","sharedptr","using","loanedmsg","main","public","callback","placeholders","打印","获取","=",")","<","clock","loaned","to","timerbase","count","hbmem","可用",";","shared","默认","40","消息","毫秒","定时器","出来","发送","方式","\"","加一","-","#","size","会","timer","us","一次","node","include","else","int","d","valid","now","logger","*","void","move","定时","qos","丢弃","class","调用","的"," ","回调","cost","ms","出现","失败","functional","is","在","minimalhbmemsubscriber","samplemessage","namespace","已","该","计数器","index","被","loanmessage","返回","keeplast","计算","为","std","中","10","duration","steady","延时","要","引用","导致","subscription","stamp","char","cast","使用","_","private","cpp","topic","和","since","订阅","情况","单位","microseconds","%","并打印","创建",":","shutdown","当前","只能","bind","发布者","以及","{","argv","++","epoch","函数","dus","发布","&","判断","msg","literals","spin","计数","memory","auto","rclcpp","0","get","message","!","publisher","chrono","minimalhbmempublisher","if","：","time","用",">","，","make","publisherhbmem","实际","1","init","publish"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"hhp/3.4_%E9%9B%B6%E6%8B%B7%E8%B4%9D%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/#_6","text":"我们整理一下，与ROS2中的话题通信相比，TogetherROS带有零拷贝机制的话题通信接口是这样的。 在发布者中，我们可以使用PublisherHbmem来创建一个发布者对象，然后通过create_publisher_hbmem发布数据，而在订阅者中，SubscriptionHbmem用来创建一个订阅者对象，通过 create_subscription_hbmem订阅需要的数据，至于底层如何完成零拷贝的过程，都交给TogetherROS即可。","text_tokens":["subscriptionhbmem","通信接口","创建","一下","的","来","话题","拷贝"," ","数据","过程","发布者","togetherros","ros2","在","发布","通过","hbmem","相比","接口","如何","。","一个","与","即可","而","create","可以","对象","中","交给","我们","零","底层","这样","publisher","使用","subscription","都","通信","整理","_","者","然后","至于","完成","带有","，","需要","订阅","publisherhbmem","用来","是","机制"],"title":"接口汇总","title_tokens":["汇总","接口"]},{"location":"hhp/3.5_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1%E9%85%8D%E7%BD%AE/","text":"分布式通信配置 智能机器人的功能繁多，全都放在一个计算机里，经常会遇到计算能力不够、处理出现卡顿等情况，如果可以将这些任务拆解，分配到多个计算机中运行岂不是可以减轻压力？ 这就是分布式系统， 可以实现多计算平台上的任务分配。 分布式通信 什么叫分布式？ 机器人功能是由各种节点组成的，这些节点可能位于不同的计算机中，这种结构可以将原本资源消耗较多的任务，分配到不同的平台上，减轻计算压力，这就是分布式通信框架的典型应用之一。 比如在这款机器人系统中，就有两个计算平台。 机器人体积比较小，不适合放一个笔记本电脑在上边，于是采用旭日派作为控制器，主要实现传感器驱动、电机控制、AI应用等功能，此外我们还需要在电脑上监控机器人的传感器信息，并且远程控制机器人运动。 两个计算平台之间的通信，看上去还有点复杂，毕竟相互传输的数据还挺多的，不过TogehterROS都已经为我们准备好了，我们只需要在每一个计算上配置好TogehterROS或者ROS2的环境，功能开发上完全不需要做任何变化，实现非常方便。 接下来，我们就带领大家一起来感受下分布式系统的魅力。 分布式网络搭建 旭日派配置完成后，确保已经和你所使用的电脑连接到了同一个局域网络中。接下来我们打通两个计算平台的通信能力。具体需要做什么呢？ 简而言之，什么都不需要做。我们直接用命令行测试一下话题通信的效果。 $ ros2 run examples_rclcpp_minimal_publisher publisher_member_function # 旭日派端 $ ros2 run examples_rclcpp_minimal_subscriber subscriber_member_function # PC端 神奇的事情就这样发生了，旭日X3派上安装的是TogetherROS，我的电脑上安装的是ROS2，他们只要处于同一网络中，就可以实现通信了，感觉就像在一个电脑里一样。 Attention 如使用虚拟机，请将虚拟机网络修改为 桥接模式 不过这也会带来一个问题，如果一个网络中有很多个计算机，我们并不希望他们都可以互通互联，而是可以分组通信，小组之间是无法实现通信的。 分布式网络分组 没问题，ROS2提供了一个DOMAIN的机制，就类似分组一样，处于同一个DOMAIN中的计算机才能通信，我们可以在电脑和旭日X3派端中加入这样一句配置，即可将两者分配到一个小组中： $ export ROS_DOMAIN_ID = <your_domain_id> 如果分配的ID不同，则两者无法实现通信。 话题分布式通信 之前编写的例程是否可以在不修改任何代码的情况下，直接使用呢？ 以话题通信为例，旭日派作为发布者，发布Hello World字符串，电脑作为订阅者，订阅Hello World字符串，我们看下效果如何。 $ ros2 run learning_topic_cpp talker # 旭日派端 $ ros2 run learning_topic_cpp listener # PC端 好啦，我们在分布式网络中测试了ROS一系列例程，都没有任何问题，在实际的机器人开发中，类似的方法会频繁用到，我们几乎不需要任何配置，代码也不需要做任何修改，一切都会变得如此轻松。","text_tokens":["为例","放在","一","一下","ai","run","就","命令","派端","数据","事情","处理","也","信息","小组","繁多","配置","ros2","togetherros","、","此外","字符串","卡顿","如何","分布","不过","发生","各种","完全","简而言之","不是","没有","电脑","togehterros","任何","同一","控制","没","并且","后","不够","相互","传输","实现","可能","只","subscriber","attention","个","等","机器人","由","位于","function","your","啦","适合","是否","确保","大家","毕竟","一系","局域网","感器","只要","如此","分配","minimal","轻松","运行","典型","者","一句","起来","经常","任务分配","像","这种","压力","主要","减轻","他们","=","神奇","看","无法","<","已经","监控","我","旭日","才能","采用","非常","examples","计算能力","具体","你","将","到","问题","互通","ros","系列","分布式","桥接","岂","体积","希望","每","分布式系统","上边","$","#","world","会","驱动","这样","频繁","类似","比较","如果","hello","消耗","x3","拆解","都","任务","看上去","模式","能力","修改","互联","talker","而言","了","export","需要","连接","组成","id","是","局域网络","资源","有","机器","计算机","挺","直接","虚拟机","笔记","？","多个","的","如","编写"," ","里","不","系统","出现","测试","一切","变得","两者","在","很多","复杂","有点","较","笔记本","member","listener","即可","或者","用到","做","搭建","计算","结构","为","中","多","pc","命令行","网络","节点","方法","小","于是","控制器","还","提供","使用","通信","功能","呢","_","一样","框架","topic","cpp","叫","和","例程","上","同一个","局域","这些","这","订阅","遇到","带来","机制","之前","情况","以","传感器","全都","话题","准备","接下来","变化","两个","则","平台","不同","发布者","请","发布","智能","好","一系列","感受","。","就是","一个","什么","分组","看上","比如","代码","布式","电机","domain","可以","原本","远程","我们","虚拟","这款","接下","rclcpp","运动","中有","环境","方便","learning","几乎","应用","publisher","笔记本电脑","开发","端","：","派","下","传感","下来","安装","用","之一","所","感觉","魅力","带领","并","之间","打通","效果","完成","加入","，","处于","而是",">","算机","字符","实际","作为","上去","放"],"title":"分布式通信配置","title_tokens":["分布","分布式","布式","配置","通信"]},{"location":"hhp/3.5_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1%E9%85%8D%E7%BD%AE/#_1","text":"智能机器人的功能繁多，全都放在一个计算机里，经常会遇到计算能力不够、处理出现卡顿等情况，如果可以将这些任务拆解，分配到多个计算机中运行岂不是可以减轻压力？ 这就是分布式系统， 可以实现多计算平台上的任务分配。","text_tokens":["机器","计算机","放在","？","全都","的","多个"," ","里","处理","系统","出现","平台","繁多","、","智能","计算能力","将","卡顿","到","分布","。","就是","一个","分布式","岂","布式","不是","计算","可以","中","多","不够","实现","分布式系统","等","机器人","会","如果","拆解","任务","功能","能力","分配","运行","上","这些","，","经常","这","遇到","算机","压力","任务分配","减轻","情况"],"title":"分布式通信配置","title_tokens":["分布","分布式","布式","配置","通信"]},{"location":"hhp/3.5_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1%E9%85%8D%E7%BD%AE/#_2","text":"什么叫分布式？ 机器人功能是由各种节点组成的，这些节点可能位于不同的计算机中，这种结构可以将原本资源消耗较多的任务，分配到不同的平台上，减轻计算压力，这就是分布式通信框架的典型应用之一。 比如在这款机器人系统中，就有两个计算平台。 机器人体积比较小，不适合放一个笔记本电脑在上边，于是采用旭日派作为控制器，主要实现传感器驱动、电机控制、AI应用等功能，此外我们还需要在电脑上监控机器人的传感器信息，并且远程控制机器人运动。 两个计算平台之间的通信，看上去还有点复杂，毕竟相互传输的数据还挺多的，不过TogehterROS都已经为我们准备好了，我们只需要在每一个计算上配置好TogehterROS或者ROS2的环境，功能开发上完全不需要做任何变化，实现非常方便。 接下来，我们就带领大家一起来感受下分布式系统的魅力。","text_tokens":["一","ai","就","数据","信息","ros2","配置","、","此外","分布","不过","各种","完全","电脑","togehterros","任何","控制","并且","相互","传输","可能","实现","只","由","机器人","位于","等","适合","大家","毕竟","感器","分配","典型","起来","主要","这种","压力","减轻","已经","监控","旭日","采用","非常","将","到","分布式","体积","每","上边","分布式系统","驱动","比较","消耗","都","任务","看上去","了","需要","组成","是","资源","有","机器","计算机","挺","笔记","？","的"," ","不","系统","在","复杂","有点","较","笔记本","或者","做","计算","结构","为","中","多","节点","小","于是","控制器","还","通信","功能","框架","叫","上","这些","这","传感器","准备","接下来","变化","两个","不同","平台","好","感受","。","就是","什么","一个","看上","比如","布式","电机","可以","原本","远程","我们","这款","接下","运动","环境","方便","应用","笔记本电脑","开发","派","下","传感","下来","之一","魅力","带领","之间","，","算机","作为","上去","放"],"title":"分布式通信","title_tokens":["分布","布式","分布式","通信"]},{"location":"hhp/3.5_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1%E9%85%8D%E7%BD%AE/#_3","text":"旭日派配置完成后，确保已经和你所使用的电脑连接到了同一个局域网络中。接下来我们打通两个计算平台的通信能力。具体需要做什么呢？ 简而言之，什么都不需要做。我们直接用命令行测试一下话题通信的效果。 $ ros2 run examples_rclcpp_minimal_publisher publisher_member_function # 旭日派端 $ ros2 run examples_rclcpp_minimal_subscriber subscriber_member_function # PC端 神奇的事情就这样发生了，旭日X3派上安装的是TogetherROS，我的电脑上安装的是ROS2，他们只要处于同一网络中，就可以实现通信了，感觉就像在一个电脑里一样。 Attention 如使用虚拟机，请将虚拟机网络修改为 桥接模式 不过这也会带来一个问题，如果一个网络中有很多个计算机，我们并不希望他们都可以互通互联，而是可以分组通信，小组之间是无法实现通信的。","text_tokens":["派端","一下","run","事情","就","命令","也","小组","ros2","配置","togetherros","不过","发生","简而言之","电脑","同一","后","实现","attention","subscriber","个","function","确保","局域网","只要","minimal","像","他们","神奇","无法","已经","我","旭日","examples","具体","互通","你","将","到","问题","桥接","希望","$","#","会","这样","如果","x3","都","模式","能力","修改","互联","而言","了","需要","连接","是","局域网络","直接","计算机","虚拟机","？","的","如"," ","不","里","测试","在","很多","member","做","计算","为","中","pc","命令行","网络","使用","通信","_","呢","一样","和","同一个","上","局域","这","带来","话题","接下来","两个","平台","请","。","一个","什么","分组","可以","虚拟","我们","接下","rclcpp","中有","publisher","端","派","下来","安装","感觉","用","所","并","打通","效果","之间","完成","，","处于","而是","算机"],"title":"分布式网络搭建","title_tokens":["分布","网络","分布式","布式","搭建"]},{"location":"hhp/3.5_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1%E9%85%8D%E7%BD%AE/#_4","text":"没问题，ROS2提供了一个DOMAIN的机制，就类似分组一样，处于同一个DOMAIN中的计算机才能通信，我们可以在电脑和旭日X3派端中加入这样一句配置，即可将两者分配到一个小组中： $ export ROS_DOMAIN_ID = <your_domain_id> 如果分配的ID不同，则两者无法实现通信。","text_tokens":["计算机","派端","=","的","就","<"," ","无法","才能","不同","旭日","则","小组","ros2","配置","在","两者","ros","问题","将","到","。","一个","分组","即可","domain","电脑","同一","计算","没","可以","中","我们","实现","$","your","这样","提供","类似","如果","：","x3","通信","_","一样","分配","和","了","同一个","加入","一句","export","，","处于","id",">","算机","机制"],"title":"分布式网络分组","title_tokens":["分布","分组","网络","分布式","布式"]},{"location":"hhp/3.5_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1%E9%85%8D%E7%BD%AE/#_5","text":"之前编写的例程是否可以在不修改任何代码的情况下，直接使用呢？ 以话题通信为例，旭日派作为发布者，发布Hello World字符串，电脑作为订阅者，订阅Hello World字符串，我们看下效果如何。 $ ros2 run learning_topic_cpp talker # 旭日派端 $ ros2 run learning_topic_cpp listener # PC端 好啦，我们在分布式网络中测试了ROS一系列例程，都没有任何问题，在实际的机器人开发中，类似的方法会频繁用到，我们几乎不需要任何配置，代码也不需要做任何修改，一切都会变得如此轻松。","text_tokens":["为例","派端","run","也","ros2","配置","字符串","如何","分布","没有","电脑","任何","字符","机器人","啦","是否","一系","如此","轻松","者","看","旭日","ros","问题","系列","分布式","world","$","频繁","#","会","类似","hello","都","修改","talker","了","需要","直接","机器","编写","？","的","不"," ","测试","一切","变得","在","listener","用到","做","中","pc","网络","方法","使用","通信","_","呢","topic","cpp","例程","订阅","之前","以","情况","话题","发布者","发布","好","一系列","。","代码","布式","可以","我们","几乎","learning","开发","端","下","派","效果","，","作为","实际"],"title":"话题分布式通信","title_tokens":["分布","分布式","话题","布式","通信"]},{"location":"hhp/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/","text":"数字输入与输出 数字输入与输出是最常用的一种外设通信方式，虽然每一个端口只有0和1两种状态，但却可以组合出各种各样的变化。 数字输入与输出原理 数字输入与输出，也称为通用输入输出，全称是General-purpose input/output，大部分情况下，我们都会用简称GPIO GPIO的功能，主要是指这个管脚可以作为数字信号的输入或者输出使用，到底是输入还是输出呢，这需要我们使用系统寄存器来进行配置。 当GPIO被设置为输入模式时，就可以读取这个管脚上的电平高低，从而实现读取外部信号的功能，比如外部按键的信号，就是这样读取的。 当GPIO被设置为输出模式时，我们就可以主动改变管脚的电平高低了，这样就能通过电平的变化，控制外部的设备，比如点亮或者熄灭一个LED灯。 除此之外，一些IO口还可以配置成其他功能，比如PWM输出，串口通信等等。 关于旭日X3派的管脚定义，大家可以参考这张图，他会显示每个管脚具体可以实现什么功能。 这里需要说明一点，旭日X3派的管脚序号定义有三种编码方式： 第一种就是Board编码，这种就是按照主板上管脚排针编号，分别对应1~40号排针。 第二种就是BCM编码，这种方式是参考 Broadcom SOC 的通道编号，侧重CPU寄存器，在使用BCM库或者使用python编程时，常采用的一种编码方式。 第三种就是X3编码，可以理解为是旭日X3派自己的编码方式，在使用旭日派自己的驱动库编程时，会使用到这种编码。 大家在后续编程开发中，需要结合函数接口的说明，使用对应的引脚编号，不然可能会出现意料之外的问题。 引脚复用配置工具 虽然从硬件上看，扩展出来的引脚只有40个，不过大部分引脚还可以配置成多种功能，这样延伸出来变化可就多了，那如何配置引脚的不同功能呢？ 我们可以使用旭日X3派中提供的srpi-config工具进行配置。 直接在终端中输入这个指令，就可以看到这样的窗口，okay配置对应管脚为专用功能，disabled配置对应管脚为GPIO模式，按照自己的需要进行配置即可，配置完成后重启才会生效。 了解了GPIO的概念，接下来我们就要开始编程啦。 数字输入编程 首先我们来看下最基本的数字输入测试，读取一个按键的状态。 硬件接线 我们将按键的一边连接到旭日X3派的38号引脚上，这是一个GPIO的接口，另一边连接到39号引脚，也就是GND。 原理很简单，按键没按下时，导线是断开的，GPIO是默认的状态，按键按下后，导线就会导通，GPIO的状态变成了GND。 这样，我们就可以通过电平的变化，知道按键的状态啦。 运行例程 我们不妨来运行一下，看下实际效果是不是这样。 $ sudo python3 simple_input.py 我们将一个按键开关接到对应的管脚上， 然后连接到旭日X3PI当中，运行刚才的程序。之后我们按下或是松开按键时，他都会打印出对应的电平变化。 按下显示的就是LOW，也就是低电平，松开就是HIGH，也就是高电平。 代码解析 数字输入的功能实现啦，我们来看下代码是如何实现的。 simple_input.py： #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 定义使用的GPIO通道为38 input_pin = 38 # BOARD 编码 38 def main (): prev_value = None # 设置管脚编码模式为硬件编号 BOARD GPIO . setmode ( GPIO . BOARD ) # 设置为输入模式 GPIO . setup ( input_pin , GPIO . IN ) print ( \"Starting demo now! Press CTRL+C to exit\" ) try : while True : # 读取管脚电平 value = GPIO . input ( input_pin ) if value != prev_value : if value == GPIO . HIGH : value_str = \"HIGH\" else : value_str = \"LOW\" print ( \"Value read from pin {} : {} \" . format ( input_pin , value_str )) prev_value = value time . sleep ( 1 ) finally : GPIO . cleanup () if __name__ == '__main__' : main () 我们在Python中需要引入X3Pi的GPIO库，从而使用对应的GPIO功能。 主函数里首先需要定义了一个变量来存储这个管脚的电平信号。 进行初始化，设置管脚的编码模式为BOARD模式，之后定义输入用的管脚，这里使用的是BOARD编码，因为他是第38个管脚，所以为38号。 之后的话就会进入到循环当中，这样的一个函数就可以读出当前的电平值。 没有按下按键的时候，38管脚和GND是断开的，他就是高电平，按下按键时，就和GND导通了，这个管脚就会编程低电平。 如果电平值和上一次存储的不一致，后面的判断就会判断出是升高还是降低，最后会把结果打印出来。 松开按键时同理。 数字输出编程 GPIO不止有输入功能，还有输出功能，大家应该经常看到电子设别上的LED灯吧，这就是典型的IO输出控制的设备，我们也来试一试。 硬件接线 我们将一个LED灯的正极连接到了2号引脚，这是5V电源，用来给LED供电的，不过LED电阻小，为了不至于烧坏，我们最好还是在电路中串联一个电阻来限制电流大小。 接下来，当LED的负极接到GND，也就是电源的0V上时，LED两边会因为有电势差而被点亮；当LED的负极也连接到高电平，也就是5V的时候，会因为两边没有电势差，也就不会被点亮。 这个负极的电平信号我们就用GPIO来输出，所以我们把LED的负极连接到任意的GPIO引脚上，比如38号，将这个引脚设置为输出模式，当输出高电平时，灯就会熄灭，输出低电平，灯就会被点亮。 把这两个动作放到一个循环中，就可以实现闪烁的功能啦。 运行示例程序 快来运行例程试一试吧，按照刚才的设置，将实物连接完成，然后连接到X3Pi，运行程序，就可以看到这个LED就会开始闪烁了。 $ sudo python3 simple_input.py 代码解析 simple_out.py： #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 定义使用的GPIO通道为38 output_pin = 38 # BOARD 编码 38 def main (): # 设置管脚编码模式为硬件编号 BOARD GPIO . setmode ( GPIO . BOARD ) # 设置为输出模式，并且初始化为高电平 GPIO . setup ( output_pin , GPIO . OUT , initial = GPIO . HIGH ) # 记录当前管脚状态 curr_value = GPIO . HIGH print ( \"Starting demo now! Press CTRL+C to exit\" ) try : # 间隔1秒时间，循环控制LED灯亮灭 while True : time . sleep ( 1 ) GPIO . output ( output_pin , curr_value ) curr_value ^= GPIO . HIGH finally : GPIO . cleanup () if __name__ == '__main__' : main () 数字输入与输出集成 学习了GPIO的输入与输出功能后，我们就可以做一些自动化的功能了。 硬件接线 比如我们同时连接一个按键和LED灯，尝试实现按键被按下，灯被点亮，松开，灯熄灭，这样的功能。 运行示例程序 我们通过这个例程来试一试效果如何？ $ sudo python3 button_led.py 我们来看一下具体的操作，同样的，按照刚才的设置，将实物连接完成，然后连接到X3Pi，运行刚才的程序。按下按键后，就可以看到LED被点亮了，松开之后，LED就熄灭了。 代码解析 button_led.py #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 定义使用的GPIO通道： # 36号作为输出，可以点亮一个LED # 38号作为输入，可以接一个按钮 led_pin = 36 # BOARD 编码 36 but_pin = 38 # BOARD 编码 38 # 禁用警告信息 GPIO . setwarnings ( False ) def main (): prev_value = None # Pin Setup: GPIO . setmode ( GPIO . BOARD ) # BOARD pin-numbering scheme GPIO . setup ( led_pin , GPIO . OUT ) # LED pin set as output GPIO . setup ( but_pin , GPIO . IN ) # Button pin set as input # Initial state for LEDs: GPIO . output ( led_pin , GPIO . LOW ) print ( \"Starting demo now! Press CTRL+C to exit\" ) try : while True : curr_value = GPIO . input ( but_pin ) if curr_value != prev_value : GPIO . output ( led_pin , curr_value ) prev_value = curr_value print ( \"Outputting {} to Pin {} \" . format ( curr_value , led_pin )) time . sleep ( 1 ) finally : GPIO . cleanup () # cleanup all GPIO if __name__ == '__main__' : main () 基本的配置还是一样的，引入基本的库，然后设置为BOARD模式，然后初始化两个管脚，一个用来读取按键的通断，一个用来控制LED的亮灭，之后只需要判断按键的状态来做出对应的控制LED的动作就可以了。","text_tokens":["out","就","端口","配置","三种","分别","点亮","没","就要","exit","并且","hobot","只","多种","button","还有","是不是",",","每个","print","主板","main","重启",")","简单","基本","为了","了解","到","编号","时","生效","\"","进入","#","会","如果","x3","cleanup","^","模式","pwm","电路","解析","需要","连接","初始","这个","有","name","变量","专用","排针","的","电流","系统","却","各种各样","试一试","全称","通道","放到","集成","即可","从而","定义","这是","中","设别","还","提供","引入","那","功能","srpi","他","主","知道","程序","寄存器","上","例程","一点","情况","才","其他","尝试",":","scheme","警告","函数","。","一个","通断","value","亮","__","指令","等等","一致","断开","接下","意料之外","状态","下","派","能","用","board","当","完成","供电","工具","}","秒","大部","侧重","通用","负极","也","称为","第一种","信息","数字","电阻","高低","把","开始","各种","给","py","时候",".","出","curr","吧","实现","可能","按键","gpio","disabled","熄灭","终端","至于","导线","36","这种","原理","动作","打印","电子","看","正极","sudo","值","具体","将","默认","引脚","导通","出来","按照","电源","format","$","驱动","5v","低电平","是","编码","直接","两种","两边","操作","同时","用来","+","串口","灭","出是","0v","或者","部分","窗口","为","def","broadcom","结果","指","_","呢","一样","和","一种","pin","说明","当前","两个","信号","bin","接口","口","代码","与","从","x3pi","outputting","我们","0","!","第二","数字信号","：","按下","setup","set","'","okay","一些","自己","序号","效果","try","，","作为","闪烁","1","第二种","python3","不然","如何","不过","没有","不是","来看","会导通","usr","as","任意","常用","进行","个","啦","还是","循环","二种","(","张图","按","典型","false","经常","主要","simple","库","可","；","刚才","=","不至于","initial","output","to","旭日","while","采用","高电平","问题","不止","40","low","python","gnd","in","硬件","最","不妨","都","之后","输出","复用","input","后续","输入","设置","除此","组合","实际效果","c","成","里","不","按钮","出现","另一边","只有","或是","press","做","结合","prev","常","38","小","但","使用","首先","外设","很","自动","read","存储","读出","的话","第一","env","接下来","意料","因为","之外","不同","{","灯","demo","from","应该","可以","输入输出","~","编码方式","延伸","电势","接","当中","大部分","松开","import","but","设备","接到","time","第三种","大小","然后","主动","实际","虽然","config","setwarnings","同理","一下","/","接线","state","电势差","时间","电平","none","降低","最好","控制","general","后","39","大家","finally","运行","这里","到底","理解","扩展","true","示例","各样","变成","high","for","cpu","改变","led","开关","而","每","寄存","参考","方式","starting","记录","-","所以","概念","实物","简称","这样","他会","一次","else","了","now","初始化","？","读取"," ","编程","自动化","测试","号","在","做出","限制","被","第三","第","看到","多","烧坏","最后","setmode","通信","关于","学习","leds","间隔","除此之外","这","不会","ctrl","来","管脚","变化","all","通过","判断","就是","什么","比如","2","同样","对应","一边","后面","升高","soc","灯亮","禁用","purpose","显示","开发","if","io","下来","str","上时","串联","外部","sleep","快","bcm","numbering"],"title":"数字输入与输出","title_tokens":["输入","输出","与","数字"]},{"location":"hhp/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_1","text":"数字输入与输出是最常用的一种外设通信方式，虽然每一个端口只有0和1两种状态，但却可以组合出各种各样的变化。","text_tokens":["组合","的","两种","各样","端口","变化","却","各种各样","只有","数字","。","一个","与","各种","可以","出","每","方式","0","常用","但","最","状态","通信","输出","外设","和","一种","，","是","输入","1","虽然"],"title":"数字输入与输出","title_tokens":["输入","输出","与","数字"]},{"location":"hhp/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_2","text":"数字输入与输出，也称为通用输入输出，全称是General-purpose input/output，大部分情况下，我们都会用简称GPIO GPIO的功能，主要是指这个管脚可以作为数字信号的输入或者输出使用，到底是输入还是输出呢，这需要我们使用系统寄存器来进行配置。 当GPIO被设置为输入模式时，就可以读取这个管脚上的电平高低，从而实现读取外部信号的功能，比如外部按键的信号，就是这样读取的。 当GPIO被设置为输出模式时，我们就可以主动改变管脚的电平高低了，这样就能通过电平的变化，控制外部的设备，比如点亮或者熄灭一个LED灯。 除此之外，一些IO口还可以配置成其他功能，比如PWM输出，串口通信等等。 关于旭日X3派的管脚定义，大家可以参考这张图，他会显示每个管脚具体可以实现什么功能。 这里需要说明一点，旭日X3派的管脚序号定义有三种编码方式： 第一种就是Board编码，这种就是按照主板上管脚排针编号，分别对应1~40号排针。 第二种就是BCM编码，这种方式是参考 Broadcom SOC 的通道编号，侧重CPU寄存器，在使用BCM库或者使用python编程时，常采用的一种编码方式。 第三种就是X3编码，可以理解为是旭日X3派自己的编码方式，在使用旭日派自己的驱动库编程时，会使用到这种编码。 大家在后续编程开发中，需要结合函数接口的说明，使用对应的引脚编号，不然可能会出现意料之外的问题。","text_tokens":["第二种","不然","就","/","大部","侧重","通用","也","称为","第一种","bcm","配置","数字","三种","分别","点亮","高低","电平","控制","general","实现","可能","进行","按键","gpio","大家","还是","二种","熄灭","每个","张图","主板","这里","到底","主要","这种","库","理解","output","旭日","采用","cpu","具体","问题","到","40","改变","编号","led","引脚","时","按照","寄存","参考","方式","python","-","简称","会","这样","驱动","他会","x3","都","模式","pwm","输出","了","input","需要","后续","是","输入","设置","这个","除此","有","编码","排针","读取","的"," ","成","编程","系统","出现","号","在","串口","全称","通道","被","第三","或者","从而","定义","部分","结合","为","中","常","还","使用","broadcom","通信","指","功能","呢","关于","寄存器","上","除此之外","一种","这","一点","情况","其他","说明","第一","来","管脚","意料","变化","之外","信号","灯","函数","通过","接口","。","就是","一个","与","口","什么","比如","可以","输入输出","对应","编码方式","~","我们","等等","soc","purpose","大部分","意料之外","设备","显示","第二","开发","数字信号","：","下","派","能","io","用","第三种","一些","外部","自己","序号","board","当","，","主动","作为","1"],"title":"数字输入与输出原理","title_tokens":["输出","与","输入","原理","数字"]},{"location":"hhp/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_3","text":"虽然从硬件上看，扩展出来的引脚只有40个，不过大部分引脚还可以配置成多种功能，这样延伸出来变化可就多了，那如何配置引脚的不同功能呢？ 我们可以使用旭日X3派中提供的srpi-config工具进行配置。 直接在终端中输入这个指令，就可以看到这样的窗口，okay配置对应管脚为专用功能，disabled配置对应管脚为GPIO模式，按照自己的需要进行配置即可，配置完成后重启才会生效。 了解了GPIO的概念，接下来我们就要开始编程啦。","text_tokens":["config","工具","就","大部","配置","如何","不过","开始","就要","后","进行","个","多种","啦","disabled","gpio","终端","重启","可","看","扩展","旭日","了解","40","引脚","出来","按照","生效","-","概念","会","这样","硬件","x3","模式","了","需要","输入","这个","直接","专用","？","的","成"," ","编程","只有","在","即可","部分","窗口","为","中","看到","多","还","提供","使用","那","功能","呢","srpi","上","才","管脚","接下来","变化","不同","。","从","可以","指令","对应","延伸","我们","接下","大部分","派","下来","okay","自己","完成","，","虽然"],"title":"引脚复用配置工具","title_tokens":["配置","工具","引脚","复用"]},{"location":"hhp/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_4","text":"首先我们来看下最基本的数字输入测试，读取一个按键的状态。","text_tokens":["基本","我们","首先","。","测试","的","读取","一个","按键","，","最","来看","状态","输入","下","数字"],"title":"数字输入编程","title_tokens":["编程","输入","数字"]},{"location":"hhp/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_5","text":"我们将按键的一边连接到旭日X3派的38号引脚上，这是一个GPIO的接口，另一边连接到39号引脚，也就是GND。 原理很简单，按键没按下时，导线是断开的，GPIO是默认的状态，按键按下后，导线就会导通，GPIO的状态变成了GND。 这样，我们就可以通过电平的变化，知道按键的状态啦。","text_tokens":["的","就"," ","也","另一边","简单","变化","旭日","变成","号","通过","将","到","接口","。","就是","一个","默认","引脚","电平","时","没","可以","这是","一边","会导通","后","gnd","我们","断开","39","按键","38","这样","啦","gpio","状态","x3","派","下","按下","知道","按","很","上","了","，","连接","导线","是","原理"],"title":"硬件接线","title_tokens":["硬件","接线"]},{"location":"hhp/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_6","text":"我们不妨来运行一下，看下实际效果是不是这样。 $ sudo python3 simple_input.py 我们将一个按键开关接到对应的管脚上， 然后连接到旭日X3PI当中，运行刚才的程序。之后我们按下或是松开按键时，他都会打印出对应的电平变化。 按下显示的就是LOW，也就是低电平，松开就是HIGH，也就是高电平。","text_tokens":["simple","打印","python3","刚才","一下","看","的","来","实际效果"," ","管脚","变化","也","旭日","high","sudo","或是","高电平","将","到","。","就是","一个","开关","x3pi","电平","不是","时","py","low",".","出","对应","我们","当中","松开","$","按键","会","这样","接到","显示","不妨","按下","下","都","是不是","_","他","之后","程序","运行","效果","上","然后","低电平","，","input","连接","实际"],"title":"运行例程","title_tokens":["运行","例程"]},{"location":"hhp/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_7","text":"数字输入的功能实现啦，我们来看下代码是如何实现的。 simple_input.py： #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 定义使用的GPIO通道为38 input_pin = 38 # BOARD 编码 38 def main (): prev_value = None # 设置管脚编码模式为硬件编号 BOARD GPIO . setmode ( GPIO . BOARD ) # 设置为输入模式 GPIO . setup ( input_pin , GPIO . IN ) print ( \"Starting demo now! Press CTRL+C to exit\" ) try : while True : # 读取管脚电平 value = GPIO . input ( input_pin ) if value != prev_value : if value == GPIO . HIGH : value_str = \"HIGH\" else : value_str = \"LOW\" print ( \"Value read from pin {} : {} \" . format ( input_pin , value_str )) prev_value = value time . sleep ( 1 ) finally : GPIO . cleanup () if __name__ == '__main__' : main () 我们在Python中需要引入X3Pi的GPIO库，从而使用对应的GPIO功能。 主函数里首先需要定义了一个变量来存储这个管脚的电平信号。 进行初始化，设置管脚的编码模式为BOARD模式，之后定义输入用的管脚，这里使用的是BOARD编码，因为他是第38个管脚，所以为38号。 之后的话就会进入到循环当中，这样的一个函数就可以读出当前的电平值。 没有按下按键的时候，38管脚和GND是断开的，他就是高电平，按下按键时，就和GND导通了，这个管脚就会编程低电平。 如果电平值和上一次存储的不一致，后面的判断就会判断出是升高还是降低，最后会把结果打印出来。 松开按键时同理。","text_tokens":["python3","同理","}","就","/","数字","把","如何","没有","none","电平","降低","py","时候","来看",".","usr","exit","as","hobot","实现","进行","个","按键","啦","gpio","循环","还是","finally",",","(","print","这里","main","simple","库","打印","=",")","true","to","high","while","值","高电平","到","编号","low","时","导通","出来","python","starting","\"","format","进入","gnd","in","所以","#","会","这样","硬件","如果","cleanup","一次","模式","之后","else","了","低电平","input","now","需要","初始","是","输入","设置","这个","编码","name","变量","初始化","读取","的","c"," ","里","编程","不","在","+","号","通道","press","出是","从而","定义","第","为","中","prev","最后","38","setmode","引入","使用","def","结果","功能","_","他","首先","主","和","上","pin","read","存储","读出","的话","ctrl",":","env","来","管脚","当前","因为","{","信号","函数","bin","判断","。","代码","一个","就是","value","x3pi","demo","from","__","可以","对应","后面","升高","我们","当中","一致","断开","import","松开","!","if","：","time","下","setup","按下","str","'","用","sleep","board","try","，","1"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"hhp/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_8","text":"GPIO不止有输入功能，还有输出功能，大家应该经常看到电子设别上的LED灯吧，这就是典型的IO输出控制的设备，我们也来试一试。","text_tokens":["有","电子","的","来","也","灯","试一试","不止","。","就是","led","应该","控制","看到","我们","吧","设别","设备","大家","gpio","还有","io","功能","输出","典型","上","，","经常","这","输入"],"title":"数字输出编程","title_tokens":["编程","输出","数字"]},{"location":"hhp/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_9","text":"我们将一个LED灯的正极连接到了2号引脚，这是5V电源，用来给LED供电的，不过LED电阻小，为了不至于烧坏，我们最好还是在电路中串联一个电阻来限制电流大小。 接下来，当LED的负极接到GND，也就是电源的0V上时，LED两边会因为有电势差而被点亮；当LED的负极也连接到高电平，也就是5V的时候，会因为两边没有电势差，也就不会被点亮。 这个负极的电平信号我们就用GPIO来输出，所以我们把LED的负极连接到任意的GPIO引脚上，比如38号，将这个引脚设置为输出模式，当输出高电平时，灯就会熄灭，输出低电平，灯就会被点亮。 把这两个动作放到一个循环中，就可以实现闪烁的功能啦。","text_tokens":["就","负极","也","电阻","点亮","把","电势差","不过","没有","电平","给","时候","最好","任意","实现","啦","gpio","还是","循环","熄灭","至于","动作","；","不至于","为了","正极","高电平","将","到","引脚","led","时","而","电源","gnd","所以","会","模式","输出","电路","5v","了","低电平","连接","这个","设置","有","的"," ","电流","两边","号","在","限制","放到","0v","被","这是","为","中","烧坏","38","小","功能","上","这","不会","闪烁","来","接下来","因为","两个","灯","信号","。","就是","一个","比如","2","可以","电势","我们","接下","接到","下来","上时","用","串联","大小","当","，","用来","供电"],"title":"硬件接线","title_tokens":["硬件","接线"]},{"location":"hhp/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_10","text":"快来运行例程试一试吧，按照刚才的设置，将实物连接完成，然后连接到X3Pi，运行程序，就可以看到这个LED就会开始闪烁了。 $ sudo python3 simple_input.py","text_tokens":["simple","python3","刚才","的","来","就"," ","sudo","试一试","将","到","。","led","x3pi","开始","这个","py",".","可以","按照","看到","吧","实物","$","会","_","程序","运行","快","例程","了","然后","完成","，","连接","input","闪烁","设置"],"title":"运行示例程序","title_tokens":["示例","程序","运行"]},{"location":"hhp/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_11","text":"simple_out.py： #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 定义使用的GPIO通道为38 output_pin = 38 # BOARD 编码 38 def main (): # 设置管脚编码模式为硬件编号 BOARD GPIO . setmode ( GPIO . BOARD ) # 设置为输出模式，并且初始化为高电平 GPIO . setup ( output_pin , GPIO . OUT , initial = GPIO . HIGH ) # 记录当前管脚状态 curr_value = GPIO . HIGH print ( \"Starting demo now! Press CTRL+C to exit\" ) try : # 间隔1秒时间，循环控制LED灯亮灭 while True : time . sleep ( 1 ) GPIO . output ( output_pin , curr_value ) curr_value ^= GPIO . HIGH finally : GPIO . cleanup () if __name__ == '__main__' : main ()","text_tokens":["python3","out","秒","/","时间","电平","py",".","控制","curr","usr","并且","exit","as","hobot","gpio","循环","finally",",","(","print","main","simple","=",")","initial","true","output","to","high","while","高电平","编号","led","starting","\"","记录","#","硬件","cleanup","^","模式","输出","now","初始","设置","编码","name","初始化","的","c"," ","+","通道","press","灭","定义","为","38","setmode","使用","def","_","间隔","pin","ctrl",":","env","管脚","当前","bin","value","demo","__","灯亮","import","!","状态","if","time","：","setup","'","sleep","board","try","，","1"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"hhp/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_12","text":"学习了GPIO的输入与输出功能后，我们就可以做一些自动化的功能了。","text_tokens":["功能","学习","后","我们","输出","一些","。","的","与","就","了","自动化","，","可以","做","gpio","自动","输入"],"title":"数字输入与输出集成","title_tokens":["输出","集成","与","输入","数字"]},{"location":"hhp/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_13","text":"比如我们同时连接一个按键和LED灯，尝试实现按键被按下，灯被点亮，松开，灯熄灭，这样的功能。","text_tokens":["尝试","的","同时","灯","点亮","。","一个","比如","led","被","我们","实现","松开","按键","这样","下","功能","熄灭","按","和","，","连接"],"title":"硬件接线","title_tokens":["硬件","接线"]},{"location":"hhp/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_14","text":"我们通过这个例程来试一试效果如何？ $ sudo python3 button_led.py 我们来看一下具体的操作，同样的，按照刚才的设置，将实物连接完成，然后连接到X3Pi，运行刚才的程序。按下按键后，就可以看到LED被点亮了，松开之后，LED就熄灭了。","text_tokens":["python3","刚才","一下","？","的","来","就"," ","操作","设置","sudo","通过","试一试","具体","点亮","将","如何","到","。","led","x3pi","被","py","来看",".","同样","可以","按照","后","看到","我们","实物","松开","$","按键","button","按下","_","之后","熄灭","程序","运行","例程","效果","然后","了","完成","，","连接","这个"],"title":"运行示例程序","title_tokens":["示例","程序","运行"]},{"location":"hhp/4.1_%E6%95%B0%E5%AD%97%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/#_15","text":"button_led.py #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 定义使用的GPIO通道： # 36号作为输出，可以点亮一个LED # 38号作为输入，可以接一个按钮 led_pin = 36 # BOARD 编码 36 but_pin = 38 # BOARD 编码 38 # 禁用警告信息 GPIO . setwarnings ( False ) def main (): prev_value = None # Pin Setup: GPIO . setmode ( GPIO . BOARD ) # BOARD pin-numbering scheme GPIO . setup ( led_pin , GPIO . OUT ) # LED pin set as output GPIO . setup ( but_pin , GPIO . IN ) # Button pin set as input # Initial state for LEDs: GPIO . output ( led_pin , GPIO . LOW ) print ( \"Starting demo now! Press CTRL+C to exit\" ) try : while True : curr_value = GPIO . input ( but_pin ) if curr_value != prev_value : GPIO . output ( led_pin , curr_value ) prev_value = curr_value print ( \"Outputting {} to Pin {} \" . format ( curr_value , led_pin )) time . sleep ( 1 ) finally : GPIO . cleanup () # cleanup all GPIO if __name__ == '__main__' : main () 基本的配置还是一样的，引入基本的库，然后设置为BOARD模式，然后初始化两个管脚，一个用来读取按键的通断，一个用来控制LED的亮灭，之后只需要判断按键的状态来做出对应的控制LED的动作就可以了。","text_tokens":["python3","setwarnings","out","}","就","/","信息","state","配置","点亮","none","py",".","控制","curr","usr","exit","as","hobot","只","按键","button","gpio","还是","finally",",","(","print","false","36","main","动作","库","=",")","initial","true","output","to","基本","for","while","led","low","starting","\"","format","in","-","#","cleanup","模式","之后","输出","了","input","now","初始","需要","输入","设置","编码","name","初始化","读取","的","c"," ","按钮","用来","号","+","做出","通道","press","灭","定义","为","prev","38","setmode","引入","使用","def","_","一样","leds","pin","ctrl",":","env","来","管脚","scheme","警告","两个","{","all","bin","判断","。","一个","通断","value","亮","demo","outputting","__","可以","对应","接","禁用","import","but","!","if","状态","time","：","setup","set","'","sleep","board","然后","try","，","作为","numbering","1"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"hhp/4.2_PWM%E8%84%89%E5%86%B2%E5%AE%BD%E5%BA%A6%E8%B0%83%E5%88%B6/","text":"PWM脉冲宽度调制 我们已经可以用GPIO控制LED灯一闪一闪亮晶晶了，这样只有亮和灭的状态似乎还是太简单了，能不能对LED的亮度进行调整呢？ 当然没问题，这就要用到接下来学习的PWM脉冲宽度调制了。 PWM脉冲宽度调制原理 在GPIO的数字输入和输出模式中，只有高低电平，高电平一般是3.3V或者5V，低电平就是0V，如果我想要一个折中一点的电压怎么办呢？PWM大家了解一下。 PWM，全称是脉冲宽度调制 ， 是一种对模拟信号电平进行数字编码的方法，通过高分辨率计数器，调制出一定占空比的方波，通过这种方式对模拟信号的电平进行编码。 通俗点来说，如果我们有一个10W的灯泡，在一个小时中亮了半个小时，那我们宏观来看，它在这一个小时中的功率就是5W，这样就相当于是它的电压被降低了。而我们还可以通过改变这一个小时中，灯泡被点亮的时长，来等效出不同的电压。 然后，我们把一个小时缩短为很小的一个时间，到达一定的微分程度，表现出来的就是电压的变化，而这个很小的时间，就是PWM频率的倒数，被点亮的时间在这个很小的时间中所占的百分比就叫做占空比。 这里大家也要注意，虽然PWM在尽力呈现出模拟信号的样子，但本质还是数字信号，因为在给定的某一任何时刻，引脚只能高电平或者低电平。 通过PWM技术，可以让数字电路产生类似模拟信号的效果，从而实现类似的无级控制，比如风扇的转速，或者屏幕的亮度，很多都是通过PWM技术实现的调节。 PWM编程 接下来我们就来试一试，通过PWM让一个LED实现不同亮度的变化，也就是我们常见的呼吸灯了。 硬件接线 还是用这个LED灯，一端连接电阻，再到5V高电平的引脚，另外一端，接到33号引脚的PWM接口。 运行示例程序 大家先来运行例程，看看效果如何。 $ sudo python3 simple_pwm.py 我们来看一下实物的操作，按照刚才的设置，将实物连接完成，然后连接到X3Pi，运行刚才的程序。就可以看到这样的一个呼吸灯的效果了。 代码解析 simple_pwm.py： #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 支持PWM的管脚: 32 and 33, 在使用PWM时，必须确保该管脚没有被其他功能占用 output_pin = 33 def main (): # Pin Setup: # Board pin-numbering scheme GPIO . setmode ( GPIO . BOARD ) # 支持的频率范围： 48KHz ~ 192MHz p = GPIO . PWM ( output_pin , 48000 ) # 初始占空比 25%， 先每0.25秒增加5%占空比，达到100%之后再每0.25秒减少5%占空比 val = 25 incr = 5 p . ChangeDutyCycle ( val ) p . start ( val ) print ( \"PWM running. Press CTRL+C to exit.\" ) try : while True : time . sleep ( 0.25 ) if val >= 100 : incr = - incr if val <= 0 : incr = - incr val += incr p . ChangeDutyCycle ( val ) finally : p . stop () GPIO . cleanup () if __name__ == '__main__' : main () 一样的引入GPIO的库，然后设置管脚编码模式为BOARD，然后创建一个PWM的实例化对象p，同时设置他的频率，之后就可以通过ChangeDutyCycle来改变他的占空比，在循环当中，占空比大于等于100时，就会以5%的梯度减小；当小于等于0时，就会以5%的梯度增大。","text_tokens":["亮晶晶","就","changedutycycle","点亮","任何","没","就要","exit","hobot","晶晶","无级",",","print","main",")","通俗","10w","已经","太","简单","了解","叫做","到","时","灯一闪","折中","时刻","\"","当于","#","会","如果","cleanup","百分比","模式","pwm","电路","解析","当然","连接","初始","这个","有","name","调制","的","试一试","任何时刻","全称","该","从而","中","怎么","方法","还","引入","stop","那","功能","他","程序","例程","看看","一点","以","其他",":","scheme","方波","。","一个","亮","减小","__","一般","接下","状态","能","v","用","board","当","完成","给定","呈现","一","秒","范围","也","达到","数字","电阻","很小","把","48000","化","25%","py","增大",".","出","start","必须","5w","实现","gpio","程度","这种","原理","sudo","将","现出","相当","调节","引脚","3.3","出来","按照","对象","$","分辨率","val","一定","产生","5v","另外","低电平","是","编码","操作","同时","先","+","再","小于","灭","梯度","计数器","0v","半个","或者","为","def","分辨","_","呢","一样","等效","和","一闪","一种","pin","时长","高分辨率","点","风扇","只能","似乎","不能","信号","bin","到达","接口","代码","x3pi","样子","占用","我们","模拟","0","高分","!","数字信号","：","setup","'","效果",">","33","电压","，","try","python3","占","大于","5","如何","屏幕","没有","来看","usr","as","进行","100","注意","25","确保","还是","循环","(","simple","100%","库","；","刚才","=","output","to","我","48khz","宽度","while","高电平","问题","何时","呈现出","辨率","0.25","减少","incr","硬件","类似","都","之后","输出","中亮","宏观","输入","设置","缩短","中所","c","尽力","只有","本质","press","微分","想要","一端","灯泡","相当于","要","但","使用","小时","创建","亮度","env","增加","接下来","因为","不同","灯","可以","~","当中","import","接到","time","倒数","然后","实例","虽然","一下","/","接线","对","数字电","时间","电平","降低","控制","表现","running","数字编码","大家","finally","它","百分","运行","这里","调整","true","<","示例","脉冲","高","p","改变","led","而","每","方式","-","实物","这样","占空比","了","？"," ","编程","技术","功率","在","号","很多","被","用到","看到","setmode","频率","学习","来说","怎么办","转速","这","数字电路","ctrl","来","管脚","模拟信号","变化","通过","32","就是","5%","比如","计数","某","and","192mhz","if","下来","等于","呼吸","支持","让","常见","sleep","numbering"],"title":"PWM脉冲宽度调制","title_tokens":["pwm","调制","宽度","脉冲"]},{"location":"hhp/4.2_PWM%E8%84%89%E5%86%B2%E5%AE%BD%E5%BA%A6%E8%B0%83%E5%88%B6/#pwm","text":"我们已经可以用GPIO控制LED灯一闪一闪亮晶晶了，这样只有亮和灭的状态似乎还是太简单了，能不能对LED的亮度进行调整呢？ 当然没问题，这就要用到接下来学习的PWM脉冲宽度调制了。","text_tokens":["调整","？","亮度","亮晶晶","的","调制"," ","已经","接下来","太","简单","对","脉冲","似乎","不能","只有","宽度","问题","。","灭","led","亮","用到","灯一闪","控制","可以","没","就要","我们","接下","进行","这样","晶晶","gpio","状态","还是","能","呢","下来","学习","pwm","用","和","当然","一闪","了","，","这"],"title":"PWM脉冲宽度调制","title_tokens":["pwm","调制","宽度","脉冲"]},{"location":"hhp/4.2_PWM%E8%84%89%E5%86%B2%E5%AE%BD%E5%BA%A6%E8%B0%83%E5%88%B6/#pwm_1","text":"在GPIO的数字输入和输出模式中，只有高低电平，高电平一般是3.3V或者5V，低电平就是0V，如果我想要一个折中一点的电压怎么办呢？PWM大家了解一下。 PWM，全称是脉冲宽度调制 ， 是一种对模拟信号电平进行数字编码的方法，通过高分辨率计数器，调制出一定占空比的方波，通过这种方式对模拟信号的电平进行编码。 通俗点来说，如果我们有一个10W的灯泡，在一个小时中亮了半个小时，那我们宏观来看，它在这一个小时中的功率就是5W，这样就相当于是它的电压被降低了。而我们还可以通过改变这一个小时中，灯泡被点亮的时长，来等效出不同的电压。 然后，我们把一个小时缩短为很小的一个时间，到达一定的微分程度，表现出来的就是电压的变化，而这个很小的时间，就是PWM频率的倒数，被点亮的时间在这个很小的时间中所占的百分比就叫做占空比。 这里大家也要注意，虽然PWM在尽力呈现出模拟信号的样子，但本质还是数字信号，因为在给定的某一任何时刻，引脚只能高电平或者低电平。 通过PWM技术，可以让数字电路产生类似模拟信号的效果，从而实现类似的无级控制，比如风扇的转速，或者屏幕的亮度，很多都是通过PWM技术实现的调节。","text_tokens":["占","一","一下","就","对","也","数字","很小","点亮","把","数字电","时间","屏幕","电平","降低","来看","任何","控制","出","5w","表现","实现","进行","注意","数字编码","gpio","大家","还是","无级","它","程度","百分","这里","这种","通俗","10w","脉冲","高","我","宽度","了解","叫做","高电平","何时","现出","相当","调节","改变","呈现出","引脚","辨率","而","3.3","出来","折中","方式","时刻","当于","这样","分辨率","类似","如果","百分比","都","模式","pwm","一定","产生","输出","电路","中亮","占空比","宏观","5v","了","低电平","是","输入","这个","编码","有","？","的","调制","缩短"," ","中所","尽力","技术","功率","只有","本质","在","很多","任何时刻","全称","微分","计数器","0v","被","半个","或者","从而","为","中","想要","怎么","灯泡","相当于","方法","要","还","但","频率","分辨","小时","那","呢","来说","等效","和","怎么办","一种","转速","这","时长","高分辨率","一点","点","数字电路","亮度","风扇","来","只能","因为","模拟信号","变化","不同","方波","信号","通过","到达","。","就是","一个","比如","计数","某","可以","样子","一般","我们","模拟","高分","数字信号","v","倒数","让","效果","然后","电压","，","给定","呈现","虽然"],"title":"PWM脉冲宽度调制原理","title_tokens":["pwm","调制","脉冲","原理","宽度"]},{"location":"hhp/4.2_PWM%E8%84%89%E5%86%B2%E5%AE%BD%E5%BA%A6%E8%B0%83%E5%88%B6/#pwm_2","text":"接下来我们就来试一试，通过PWM让一个LED实现不同亮度的变化，也就是我们常见的呼吸灯了。","text_tokens":["亮度","就","来","的","接下来","变化","也","不同","灯","通过","试一试","。","就是","一个","led","我们","实现","接下","下来","pwm","呼吸","让","常见","了","，"],"title":"PWM编程","title_tokens":["编程","pwm"]},{"location":"hhp/4.2_PWM%E8%84%89%E5%86%B2%E5%AE%BD%E5%BA%A6%E8%B0%83%E5%88%B6/#_1","text":"还是用这个LED灯，一端连接电阻，再到5V高电平的引脚，另外一端，接到33号引脚的PWM接口。","text_tokens":["的","灯","电阻","号","高电平","到","接口","再","。","引脚","led","电平","一端","接到","还是","pwm","用","5v","另外","33","，","连接","这个"],"title":"硬件接线","title_tokens":["硬件","接线"]},{"location":"hhp/4.2_PWM%E8%84%89%E5%86%B2%E5%AE%BD%E5%BA%A6%E8%B0%83%E5%88%B6/#_2","text":"大家先来运行例程，看看效果如何。 $ sudo python3 simple_pwm.py 我们来看一下实物的操作，按照刚才的设置，将实物连接完成，然后连接到X3Pi，运行刚才的程序。就可以看到这样的一个呼吸灯的效果了。","text_tokens":["simple","python3","刚才","一下","的","来","就"," ","操作","先","灯","sudo","将","如何","到","。","一个","x3pi","py","来看",".","可以","按照","看到","我们","实物","$","这样","大家","_","pwm","呼吸","程序","运行","例程","效果","然后","了","完成","，","看看","连接","设置"],"title":"运行示例程序","title_tokens":["示例","程序","运行"]},{"location":"hhp/4.2_PWM%E8%84%89%E5%86%B2%E5%AE%BD%E5%BA%A6%E8%B0%83%E5%88%B6/#_3","text":"simple_pwm.py： #!/usr/bin/env python3 import Hobot.GPIO as GPIO import time # 支持PWM的管脚: 32 and 33, 在使用PWM时，必须确保该管脚没有被其他功能占用 output_pin = 33 def main (): # Pin Setup: # Board pin-numbering scheme GPIO . setmode ( GPIO . BOARD ) # 支持的频率范围： 48KHz ~ 192MHz p = GPIO . PWM ( output_pin , 48000 ) # 初始占空比 25%， 先每0.25秒增加5%占空比，达到100%之后再每0.25秒减少5%占空比 val = 25 incr = 5 p . ChangeDutyCycle ( val ) p . start ( val ) print ( \"PWM running. Press CTRL+C to exit.\" ) try : while True : time . sleep ( 0.25 ) if val >= 100 : incr = - incr if val <= 0 : incr = - incr val += incr p . ChangeDutyCycle ( val ) finally : p . stop () GPIO . cleanup () if __name__ == '__main__' : main () 一样的引入GPIO的库，然后设置管脚编码模式为BOARD，然后创建一个PWM的实例化对象p，同时设置他的频率，之后就可以通过ChangeDutyCycle来改变他的占空比，在循环当中，占空比大于等于100时，就会以5%的梯度减小；当小于等于0时，就会以5%的梯度增大。","text_tokens":["python3","大于","就","秒","/","changedutycycle","范围","达到","5","48000","化","没有","25%","py","增大",".","start","usr","exit","必须","as","running","hobot","100","25","确保","gpio","循环","finally",",","(","print","main","simple","100%","库","；","=",")","true","output","<","to","48khz","p","while","改变","时","对象","每","0.25","\"","-","#","减少","incr","会","cleanup","val","模式","pwm","之后","占空比","初始","设置","name","编码","的","c"," ","同时","先","在","+","该","再","press","小于","梯度","被","为","setmode","引入","使用","def","频率","stop","_","功能","他","一样","pin","以","其他","创建","ctrl",":","env","来","管脚","scheme","增加","通过","bin","32","。","5%","一个","减小","__","可以","~","占用","and","当中","0","import","!","192mhz","if","time","：","setup","'","等于","支持","sleep","board",">","33","try","，","然后","当","numbering","实例"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"hhp/4.3_UART%E5%BC%82%E6%AD%A5%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/","text":"UART串口通信 现在的传感器和执行器种类越来越多，需要和控制器传输的数据也是多种多样，只用GPIO来控制和读取的话，只有0和1的状态，未免还是有点麻烦，各种各样的通信方法也层出不穷，UART串口通信绝对是最为常用的一种。 串口通信原理 串行通信是一种通讯协议，也可以简称为串口，可以理解为数据是串成一串的，所以也就只能一位一位的发送，这样传输的速度虽然受到了限制，但是对硬件线路的要求小，只需要一对传输线，一个发送，一个接收，就可以实现双向通信了。 一般情况下，串口模块发送数据的管脚叫做TX，接收数据的管脚叫做RX。发送端发过去的数据，需要对方串口模块的接收端来接收，所以一侧发送端的TX需要连接到另外一侧的接收端RX，接收和发送在两方看来是相对的，所以我们接线的时候，要记住永远是TX引脚连接到RX引脚，接反了数据就传输不了了。 硬件连接 接下来，我们就尝试通过一个串口模块来实现电脑和旭日X3Pi的串口通信。 在接线方面，我们先交叉连接串口模块和旭日X3Pi的RX、TX，同时为了让两边具有相同的参考电平，还要将两者的GND连接到一起，然后再把串口模块连接到电脑就可以了。 运行示例程序 接下来就可以运行串口通信的例程了。 $ sudo python3 test_serial.py 实物接线完成后，在旭日X3派的终端中输入指令启动例程，很快就可以在终端中看到串口向外发送的数据了。 在串口连接的电脑中打开一个串口软件，用来接收和发送数据，设置好端口和波特率，就能看到旭日X3派发过来的数据了。我们再使用电脑的串口软件尝试下发送数据给旭日X3派，输入1234，点击发送，可以看到，X3Pi的终端这边也成功的接收到了数据并且打印出来了。 代码解析 test_serial.py： #!/usr/bin/env python3 import sys import os import time # 导入python串口库 import serial import serial.tools.list_ports def serialTest (): print ( \"List of enabled UART:\" ) os . system ( 'ls /dev/tty[a-zA-Z]*' ) uart_dev = input ( \"请输入需要测试的串口设备名:\" ) baudrate = input ( \"请输入波特率(9600,19200,38400,57600,115200,921600):\" ) try : ser = serial . Serial ( uart_dev , int ( baudrate ), timeout = 1 ) # 1s timeout except Exception as e : print ( \"open serial failed! \\n \" ) print ( ser ) print ( \"Starting demo now! Press CTRL+C to exit\" ) while True : test_data = \"AA55\" write_num = ser . write ( test_data . encode ( 'UTF-8' )) print ( \"Send: \" , test_data ) received_data = ser . read ( write_num ) . decode ( 'UTF-8' ) if received_data : print ( \"Recv: \" , received_data ) time . sleep ( 1 ) ser . close () return 0 if __name__ == '__main__' : if serialTest () != 0 : print ( \"Serial test failed!\" ) else : print ( \"Serial test success!\" ) X3Pi这边如果要使用串口，直接使用serial库就可以了，这里我们先调用系统的库，打印出当前有哪些串口，然后手动输入选择串口的设备名，再输入串口的波特率，就可以进项串口的初始化了，初始化成功之后就会进入循环。 循环中，X3Pi会每隔一秒发送一次AA55，同时还会判断是否接收到了数据，如果接收到了数据也会打印出来。","text_tokens":["相对","就","a","两方","端口","received","failed","点击","交叉","相同","并且","exit","还会","只","send","多种","是否","921600",",","print","一位","main","接收",")","为了","叫做","名","到","1s","\"","派发","进入","#","会","如果","x3","层出不穷","解析","需要","连接","还要","初始","传输线","name","要求","有","串成","的","系统","各种各样","serial","tx","data","串行","具有","中","方法","程序","例程","serialtest","情况","传感器","尝试",":","of","接收端","。","一个","baudrate","n","__","指令","打开","一般","8","接下","enabled","状态","下","派","能","完成","过来","open","永远","软件","也","、","return","把","各种","给","电脑","时候","py",".","出","只用","实现","57600","方面","gpio","感器","recv","终端","原理","success","打印","decode","记住","encode","sudo","将","引脚","出来","exception","$","ser","波特","另外","启动","是","write","直接","调用","两边","同时","先","+","串口","有点","再","不了","为","def","_","和","一种","ports","一起","只能","当前","bin","哪些","dev","代码","未免","x3pi","过去","我们","0","!","：","'","协议","try","，","1","python3","uart","波特率","一串","num","ls","usr","as","传输","常用","每隔","还是","循环","端的","越来","(","库","最为","=","to","但是","旭日","while","rx","e","python","gnd","这边","硬件","多种多样","执行器","之后","input","*","输入","设置","向外","38400","c","只有","两者","现在","press","接反","双向通信","za","sys","执行","test","9600","小","要","使用","1234","read","的话","env","aa55","接下来","请","demo","可以","import","设备","发送数据","模块","19200","time","速度","看来","然后","通讯","虽然","双向","]","timeout","数据","/","接线","115200","对","种类","麻烦","system","线路","电平","控制","后","[","进项","一秒","运行","成功","这里","os","z","理解","true","接收数据","示例","各样","close","很快","发送","参考","starting","所以","实物","-","简称","这样","一次","int","了","else","now","初始化","读取"," ","测试","对方","在","限制","\\","多样","一侧","看到","多","手动","绝对","控制器","list","通信","utf","受到","导入","ctrl","来","管脚","通过","好","判断","越来越","except","选择","tools","if","传感","下来","让","sleep","用来","tty","一对","端发"],"title":"UART异步串口通信","title_tokens":["串口","通信","异步","uart"]},{"location":"hhp/4.3_UART%E5%BC%82%E6%AD%A5%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/#uart","text":"现在的传感器和执行器种类越来越多，需要和控制器传输的数据也是多种多样，只用GPIO来控制和读取的话，只有0和1的状态，未免还是有点麻烦，各种各样的通信方法也层出不穷，UART串口通信绝对是最为常用的一种。","text_tokens":["传感器","的话","uart","最为","读取","的","来","数据","各样","也","种类","各种各样","只有","麻烦","串口","现在","有点","。","未免","各种","多样","控制","只用","越来越","多","传输","绝对","0","执行","常用","多种","控制器","方法","多种多样","执行器","gpio","状态","还是","越来","感器","通信","层出不穷","传感","和","一种","，","需要","是","1"],"title":"UART串口通信","title_tokens":["串口","通信","uart"]},{"location":"hhp/4.3_UART%E5%BC%82%E6%AD%A5%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/#_1","text":"串行通信是一种通讯协议，也可以简称为串口，可以理解为数据是串成一串的，所以也就只能一位一位的发送，这样传输的速度虽然受到了限制，但是对硬件线路的要求小，只需要一对传输线，一个发送，一个接收，就可以实现双向通信了。 一般情况下，串口模块发送数据的管脚叫做TX，接收数据的管脚叫做RX。发送端发过去的数据，需要对方串口模块的接收端来接收，所以一侧发送端的TX需要连接到另外一侧的接收端RX，接收和发送在两方看来是相对的，所以我们接线的时候，要记住永远是TX引脚连接到RX引脚，接反了数据就传输不了了。","text_tokens":["双向","相对","就","数据","两方","一串","接线","也","对","线路","时候","传输","只","实现","端的","一位","接收","理解","接收数据","但是","记住","叫做","到","引脚","rx","发送","所以","简称","这样","硬件","了","另外","需要","连接","是","传输线","要求","串成","的"," ","对方","在","串口","限制","tx","接反","串行","一侧","不了","为","双向通信","小","要","通信","和","受到","一种","情况","来","管脚","只能","接收端","。","一个","一对","过去","可以","一般","我们","发送数据","模块","下","协议","速度","看来","，","通讯","永远","端发","虽然"],"title":"串口通信原理","title_tokens":["串口","原理","通信"]},{"location":"hhp/4.3_UART%E5%BC%82%E6%AD%A5%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/#_2","text":"接下来，我们就尝试通过一个串口模块来实现电脑和旭日X3Pi的串口通信。 在接线方面，我们先交叉连接串口模块和旭日X3Pi的RX、TX，同时为了让两边具有相同的参考电平，还要将两者的GND连接到一起，然后再把串口模块连接到电脑就可以了。","text_tokens":["一起","尝试","就","来","的","接下来"," ","两边","接线","同时","为了","旭日","先","两者","通过","在","串口","、","tx","将","到","把","。","再","一个","x3pi","rx","电平","电脑","具有","交叉","相同","可以","参考","gnd","我们","实现","接下","模块","方面","通信","下来","和","让","了","然后","，","连接","还要"],"title":"硬件连接","title_tokens":["硬件","连接"]},{"location":"hhp/4.3_UART%E5%BC%82%E6%AD%A5%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/#_3","text":"接下来就可以运行串口通信的例程了。 $ sudo python3 test_serial.py 实物接线完成后，在旭日X3派的终端中输入指令启动例程，很快就可以在终端中看到串口向外发送的数据了。 在串口连接的电脑中打开一个串口软件，用来接收和发送数据，设置好端口和波特率，就能看到旭日X3派发过来的数据了。我们再使用电脑的串口软件尝试下发送数据给旭日X3派，输入1234，点击发送，可以看到，X3Pi的终端这边也成功的接收到了数据并且打印出来了。","text_tokens":["向外","打印","python3","尝试","软件","就","的","波特率","接下来"," ","数据","接线","设置","端口","也","旭日","sudo","在","串口","serial","好","到","。","再","一个","x3pi","给","py","电脑","点击","出来",".","可以","指令","很快","发送","中","打开","后","看到","并且","我们","派发","接下","实物","$","test","这边","发送数据","使用","x3","派","下","通信","能","_","波特","下来","1234","运行","和","例程","了","终端","完成","过来","，","启动","连接","成功","用来","输入","接收"],"title":"运行示例程序","title_tokens":["示例","程序","运行"]},{"location":"hhp/4.3_UART%E5%BC%82%E6%AD%A5%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/#_4","text":"test_serial.py： #!/usr/bin/env python3 import sys import os import time # 导入python串口库 import serial import serial.tools.list_ports def serialTest (): print ( \"List of enabled UART:\" ) os . system ( 'ls /dev/tty[a-zA-Z]*' ) uart_dev = input ( \"请输入需要测试的串口设备名:\" ) baudrate = input ( \"请输入波特率(9600,19200,38400,57600,115200,921600):\" ) try : ser = serial . Serial ( uart_dev , int ( baudrate ), timeout = 1 ) # 1s timeout except Exception as e : print ( \"open serial failed! \\n \" ) print ( ser ) print ( \"Starting demo now! Press CTRL+C to exit\" ) while True : test_data = \"AA55\" write_num = ser . write ( test_data . encode ( 'UTF-8' )) print ( \"Send: \" , test_data ) received_data = ser . read ( write_num ) . decode ( 'UTF-8' ) if received_data : print ( \"Recv: \" , received_data ) time . sleep ( 1 ) ser . close () return 0 if __name__ == '__main__' : if serialTest () != 0 : print ( \"Serial test failed!\" ) else : print ( \"Serial test success!\" ) X3Pi这边如果要使用串口，直接使用serial库就可以了，这里我们先调用系统的库，打印出当前有哪些串口，然后手动输入选择串口的设备名，再输入串口的波特率，就可以进项串口的初始化了，初始化成功之后就会进入循环。 循环中，X3Pi会每隔一秒发送一次AA55，同时还会判断是否接收到了数据，如果接收到了数据也会打印出来。","text_tokens":["python3","uart","]","timeout","波特率","a","/","就","数据","115200","也","received","system","return","failed","num","ls","py",".","出","usr","exit","as","还会","send","[","57600","进项","是否","每隔","循环","一秒","921600",",","(","print","recv","成功","这里","os","z","main","接收","库","success","打印","=",")","decode","true","to","encode","while","名","到","close","e","出来","1s","发送","python","starting","\"","exception","进入","-","#","这边","会","如果","ser","一次","波特","之后","int","else","了","input","需要","*","now","初始","输入","write","name","直接","有","初始化","调用","的","38400","c"," ","同时","系统","测试","先","+","串口","serial","再","press","data","\\","中","za","手动","sys","test","9600","要","def","list","使用","_","utf","serialtest","read","导入","ports","ctrl",":","env","aa55","当前","of","请","bin","哪些","判断","dev","。","baudrate","x3pi","demo","n","__","可以","我们","8","0","import","except","!","设备","选择","tools","enabled","if","19200","time","：","'","sleep","然后","try","，","tty","open","1"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"hhp/4.4_SPI%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/","text":"SPI同步串行通信 UART串口通信中的数据只能一位一位的传输，如果数据量比较大的时候，传输速率会受到很大影响，此时我们就可以考虑使用同步串行通信了，比如SPI。 SPI通信原理 SPI，全称是Serial Peripheral Interface，也就是串行外设接口，同样是一种通信协议，在很多芯片中都有集成。 相比之前学习的UART串口通信，他多了两根线，其中一个是时钟信号，另一个是设备使能信号，用来控制设备是否启用，所以也产生了主从设备的概念。 MISO ：Master Input Slave Output，主设备数据输入，从设备数据输出； MOSI ：Master Output Slave Input，主设备数据输出，从设备数据输入； SCLK ：Serial Clock，时钟信号，由主设备产生； CS ：Chip Select，从设备使能信号，由主设备控制。 这样，在一组SPI通信的系统中，可以连接多个设备，想要和哪个设备通信时，就使能这个设备，除能其他设备。 我们在开发中常见的SPI设备会有一些传感器，还有电阻屏之类的。 硬件连线 在SPI的通信中，有一个管脚负责发送，另外一个管脚负责接收，如果我们把同一组SPI的发送和接收接到一起，岂不是能接收到自己发送的数据吗？ 我们不妨来试一试，这里使用一个跳线帽直接把19，21两个SPI的通信管脚短接。 运行示例程序 大家来运行例程，看看会发生什么？ $ sudo python3 test_spi.py 在旭日X3派的终端中，输入运行例程的指令，接下来我们就可以看到通过SPI传输并收到的数据啦，相当于是左手传递给右手，自己给自己循环传输数据了。 代码解析 test_spi.py： #!/usr/bin/env python3 import sys import os import time # 导入spidev模块 import spidev def BytesToHex ( Bytes ): return '' . join ([ \"0x %02X \" % x for x in Bytes ]) . strip () def spidevTest (): # 设置spi的bus号（0, 1, 2）和片选(0, 1) spi_bus = input ( \"Please input SPI bus num:\" ) spi_device = input ( \"Please input SPI cs num:\" ) # 创建spidev类的对象以访问基于spidev的Python函数。 spi = spidev . SpiDev () # 打开spi总线句柄 spi . open ( int ( spi_bus ), int ( spi_device )) # 设置 spi 频率为 12MHz spi . max_speed_hz = 12000000 print ( \"Starting demo now! Press CTRL+C to exit\" ) # 发送 [0x55, 0xAA], 接收的数据应该也是 [0x55, 0xAA] try : while True : resp = spi . xfer2 ([ 0x55 , 0xAA ]) print ( BytesToHex ( resp )) time . sleep ( 1 ) except KeyboardInterrupt : spi . close () if __name__ == '__main__' : print ( \"List of enabled spi controllers:\" ) os . system ( 'ls /dev/spidev*' ) spidevTest () 在python中使用spidev这个库，初始化X3Pi的SPI，之后使用xerf2发送数据，同时接收数据，并打印出来，会发现打印出来的就是我们发送的。","text_tokens":["python3","uart","]","负责","由主","就","数据","/","一组","也","mosi","cs","0x","电阻","system","return","把","发生","num","线","02x","句柄","不是","给","py","时候","ls","控制",".","usr","exit","吗","短接","传输","bytestohex","[","左手","啦","是否","两根","大家","循环","感器","还有","很大","bus","大",",","(","print","运行","一位","终端","总线","这里","select","os","main","接收","原理","之类","同步","；","库","打印","时钟","另","=",")","max","true","output","clock","示例","to","接收数据","旭日","for","sudo","spidev","while","使能","到","类","相当","close","岂","时","出来","对象","发送","python","starting","\"","当于","in","所以","speed","概念","$","#","会","这样","硬件","spidevtest","比较","不妨","如果","传输数据","x3","interface","都","之后","slave","产生","传输速率","输出","除能","解析","使","访问","keyboardinterrupt","bytes","了","int","另外","input","连接","now","*","初始","是","输入","这个","设置","xerf2","有","name","直接","controllers","初始化","帽","？","多个","的","c"," ","同时","系统","基于","在","号","串口","serial","很多","试一试","相比","+","全称","其中","速率","press","0xaa","集成","21","考虑","0x55","串行","x","片选","为","中","想要","strip","看到","多","sys","哪个","test","收到","相当于","master","发现","右手","同","使用","连线","传递","def","频率","list","通信","他","学习","数据量","_","主","外设","和","程序","join","受到","例程","一种","12mhz","芯片","看看","）","之前","导入","以","xfer2","其他","传感器","%","并打印","创建","一起","ctrl","（","peripheral","env","来","管脚","接下来","只能",":","of","两个","device","信号","函数","通过","bin","dev","接口","。","就是","一个","什么","从","代码","比如","启用","2","demo","x3pi","主从","应该","__","可以","同样","屏","指令","please","打开","我们","接下","0","import","except","设备","接到","!","发送数据","开发","模块","enabled","12000000","if","：","time","派","hz","能","resp","19","传感","chip","下来","'","通信协议","spi","一些","sclk","影响","协议","常见","此时","自己","并","sleep","跳线","，","try","miso","用来","open","1"],"title":"SPI同步串行通信","title_tokens":["同步","spi","通信","串行"]},{"location":"hhp/4.4_SPI%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#spi","text":"UART串口通信中的数据只能一位一位的传输，如果数据量比较大的时候，传输速率会受到很大影响，此时我们就可以考虑使用同步串行通信了，比如SPI。","text_tokens":["同步","uart","的","就","数据","只能","串口","速率","。","比如","考虑","时候","串行","可以","中","我们","传输","会","比较","使用","如果","通信","很大","数据量","大","传输速率","spi","一位","影响","受到","此时","了","，"],"title":"SPI同步串行通信","title_tokens":["同步","spi","通信","串行"]},{"location":"hhp/4.4_SPI%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#spi_1","text":"SPI，全称是Serial Peripheral Interface，也就是串行外设接口，同样是一种通信协议，在很多芯片中都有集成。 相比之前学习的UART串口通信，他多了两根线，其中一个是时钟信号，另一个是设备使能信号，用来控制设备是否启用，所以也产生了主从设备的概念。 MISO ：Master Input Slave Output，主设备数据输入，从设备数据输出； MOSI ：Master Output Slave Input，主设备数据输出，从设备数据输入； SCLK ：Serial Clock，时钟信号，由主设备产生； CS ：Chip Select，从设备使能信号，由主设备控制。 这样，在一组SPI通信的系统中，可以连接多个设备，想要和哪个设备通信时，就使能这个设备，除能其他设备。 我们在开发中常见的SPI设备会有一些传感器，还有电阻屏之类的。","text_tokens":["uart","由主","就","数据","一组","也","mosi","cs","电阻","线","控制","是否","两根","感器","还有","select","之类","；","时钟","另","output","clock","使能","时","所以","概念","会","这样","interface","都","slave","产生","输出","除能","使","了","input","连接","是","输入","这个","有","多个","的"," ","系统","在","串口","serial","很多","相比","全称","其中","集成","串行","中","想要","多","哪个","master","通信","他","学习","主","外设","和","一种","芯片","之前","其他","传感器","peripheral","信号","接口","。","就是","一个","从","启用","主从","同样","可以","屏","我们","设备","开发","：","能","传感","chip","通信协议","spi","一些","sclk","协议","常见","，","miso","用来"],"title":"SPI通信原理","title_tokens":["spi","原理","通信"]},{"location":"hhp/4.4_SPI%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#_1","text":"在SPI的通信中，有一个管脚负责发送，另外一个管脚负责接收，如果我们把同一组SPI的发送和接收接到一起，岂不是能接收到自己发送的数据吗？ 我们不妨来试一试，这里使用一个跳线帽直接把19，21两个SPI的通信管脚短接。","text_tokens":["有","直接","一起","负责","？","帽","的","来","管脚","数据"," ","一组","两个","在","试一试","把","到","。","一个","21","岂","不是","发送","中","吗","短接","我们","接到","同","使用","不妨","如果","通信","能","19","spi","和","自己","另外","跳线","，","这里","接收"],"title":"硬件连线","title_tokens":["连线","硬件"]},{"location":"hhp/4.4_SPI%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#_2","text":"大家来运行例程，看看会发生什么？ $ sudo python3 test_spi.py 在旭日X3派的终端中，输入运行例程的指令，接下来我们就可以看到通过SPI传输并收到的数据啦，相当于是左手传递给右手，自己给自己循环传输数据了。","text_tokens":["python3","？","的","来","就"," ","接下来","数据","旭日","sudo","在","通过","。","相当","什么","发生","给","py",".","指令","可以","中","看到","我们","当于","传输","接下","$","test","收到","会","相当于","左手","啦","右手","传递","大家","传输数据","循环","x3","派","_","下来","spi","运行","自己","并","例程","终端","了","，","看看","是","输入"],"title":"运行示例程序","title_tokens":["示例","程序","运行"]},{"location":"hhp/4.4_SPI%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#_3","text":"test_spi.py： #!/usr/bin/env python3 import sys import os import time # 导入spidev模块 import spidev def BytesToHex ( Bytes ): return '' . join ([ \"0x %02X \" % x for x in Bytes ]) . strip () def spidevTest (): # 设置spi的bus号（0, 1, 2）和片选(0, 1) spi_bus = input ( \"Please input SPI bus num:\" ) spi_device = input ( \"Please input SPI cs num:\" ) # 创建spidev类的对象以访问基于spidev的Python函数。 spi = spidev . SpiDev () # 打开spi总线句柄 spi . open ( int ( spi_bus ), int ( spi_device )) # 设置 spi 频率为 12MHz spi . max_speed_hz = 12000000 print ( \"Starting demo now! Press CTRL+C to exit\" ) # 发送 [0x55, 0xAA], 接收的数据应该也是 [0x55, 0xAA] try : while True : resp = spi . xfer2 ([ 0x55 , 0xAA ]) print ( BytesToHex ( resp )) time . sleep ( 1 ) except KeyboardInterrupt : spi . close () if __name__ == '__main__' : print ( \"List of enabled spi controllers:\" ) os . system ( 'ls /dev/spidev*' ) spidevTest () 在python中使用spidev这个库，初始化X3Pi的SPI，之后使用xerf2发送数据，同时接收数据，并打印出来，会发现打印出来的就是我们发送的。","text_tokens":["python3","]","/","数据","也","cs","0x","system","return","num","02x","句柄","ls","py",".","usr","exit","bytestohex","[","bus",",","(","print","总线","os","main","接收","库","打印","=",")","max","true","接收数据","to","for","while","spidev","类","close","出来","对象","发送","python","starting","\"","in","speed","#","会","spidevtest","之后","访问","keyboardinterrupt","bytes","int","input","now","*","初始","是","设置","这个","xerf2","name","初始化","controllers","的","c"," ","同时","基于","号","+","在","press","0xaa","0x55","x","片选","为","中","strip","sys","test","发现","def","频率","list","使用","_","join","和","12mhz","）","导入","xfer2","以","%","并打印","创建","ctrl","（",":","env","of","device","函数","bin","dev","。","就是","2","demo","x3pi","应该","__","打开","please","我们","0","import","except","!","发送数据","模块","enabled","12000000","if","time","：","hz","resp","'","spi","sleep","try","，","open","1"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"hhp/4.5_I2C%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/","text":"I2C同步串行通信 SPI通信虽然功能更强大了，但是需要4根线做连接，还是有点复杂，接下来I2C的连线就简单很多了。 I2C通信原理 I2C也是一种常用的串行通信方式，和SPI一样可以连接多个设备，重点是它只需要两根线就可以完成。 不过他的两根线和UART不同，不全是传输数据用的，I2C中的一根线是时钟线，另一根才是传输数据的，这根线可以双向的传输数据。 I2C通信中可以有多个主设备或者从设备，只要能通过地址找到彼此的位置即可。 主器件用于启动总线传送数据，并产生时钟给各种从机，此时任何被寻址的器件均被认为是从机。在总线上主和从、发和收的关系不是恒定的，而取决于此时数据传送方向。如果主机要发送数据给从机，主机首先得找到从机的地址，然后主动发送数据过去，最后也得由主机终止数据传送；如果主机要接收从机的数据，同样由主机得找到从机的地址，然后主机接收从器件发送的数据，最后由主机终止接收过程。 因为I2C的特性，使用I2C的设备比SPI多很多，比如图中的紫外线传感器，陀螺仪之类的，都是使用I2C进行通信的。 硬件接线 我们找来一个常用的陀螺仪模块，按照这里的接线图连接到旭日X3派的40PIN接口上，这里除了I2C通信的两根线之外，另外两根是电源线，负责给这个模块供电的，让它正常工作起来。 运行示例程序 接线是挺简单的，我们继续来运行这个例程，看下能否收到数据。 $ sudo python3 mpu6500_i2c.py 在终端启动例程，很快就可以看到通过I2C读取到了大量传感器的数据，这些就是陀螺仪模块的原始数据，收到之后我们就可以进行结算处理啦，这就是我们后续机器人开发的需要解决的问题了。 代码解析 mpu6500_i2c.py： #!/usr/bin/env python3 import smbus , time def MPU6050_start (): # alter sample rate (stability) samp_rate_div = 0 # sample rate = 8 kHz/(1+samp_rate_div) bus . write_byte_data ( MPU6050_ADDR , SMPLRT_DIV , samp_rate_div ) time . sleep ( 0.1 ) # reset all sensors bus . write_byte_data ( MPU6050_ADDR , PWR_MGMT_1 , 0x00 ) time . sleep ( 0.1 ) # power management and crystal settings bus . write_byte_data ( MPU6050_ADDR , PWR_MGMT_1 , 0x01 ) time . sleep ( 0.1 ) #Write to Configuration register bus . write_byte_data ( MPU6050_ADDR , CONFIG , 0 ) time . sleep ( 0.1 ) #Write to Gyro configuration register gyro_config_sel = [ 0b00000 , 0b010000 , 0b10000 , 0b11000 ] # byte registers gyro_config_vals = [ 250.0 , 500.0 , 1000.0 , 2000.0 ] # degrees/sec gyro_indx = 0 bus . write_byte_data ( MPU6050_ADDR , GYRO_CONFIG , int ( gyro_config_sel [ gyro_indx ])) time . sleep ( 0.1 ) #Write to Accel configuration register accel_config_sel = [ 0b00000 , 0b01000 , 0b10000 , 0b11000 ] # byte registers accel_config_vals = [ 2.0 , 4.0 , 8.0 , 16.0 ] # g (g = 9.81 m/s^2) accel_indx = 0 bus . write_byte_data ( MPU6050_ADDR , ACCEL_CONFIG , int ( accel_config_sel [ accel_indx ])) time . sleep ( 0.1 ) # interrupt register (related to overflow of data [FIFO]) bus . write_byte_data ( MPU6050_ADDR , INT_ENABLE , 1 ) time . sleep ( 0.1 ) return gyro_config_vals [ gyro_indx ], accel_config_vals [ accel_indx ] def read_raw_bits ( register ): # read accel and gyro values high = bus . read_byte_data ( MPU6050_ADDR , register ) low = bus . read_byte_data ( MPU6050_ADDR , register + 1 ) # combine higha and low for unsigned bit value value = (( high << 8 ) | low ) # convert to +- value if ( value > 32768 ): value -= 65536 return value def mpu6050_conv (): # raw acceleration bits acc_x = read_raw_bits ( ACCEL_XOUT_H ) acc_y = read_raw_bits ( ACCEL_YOUT_H ) acc_z = read_raw_bits ( ACCEL_ZOUT_H ) # raw temp bits ## t_val = read_raw_bits(TEMP_OUT_H) # uncomment to read temp # raw gyroscope bits gyro_x = read_raw_bits ( GYRO_XOUT_H ) gyro_y = read_raw_bits ( GYRO_YOUT_H ) gyro_z = read_raw_bits ( GYRO_ZOUT_H ) #convert to acceleration in g and gyro dps a_x = ( acc_x / ( 2.0 ** 15.0 )) * accel_sens a_y = ( acc_y / ( 2.0 ** 15.0 )) * accel_sens a_z = ( acc_z / ( 2.0 ** 15.0 )) * accel_sens w_x = ( gyro_x / ( 2.0 ** 15.0 )) * gyro_sens w_y = ( gyro_y / ( 2.0 ** 15.0 )) * gyro_sens w_z = ( gyro_z / ( 2.0 ** 15.0 )) * gyro_sens ## temp = ((t_val)/333.87)+21.0 # uncomment and add below in return return a_x , a_y , a_z , w_x , w_y , w_z # MPU6050 Registers MPU6050_ADDR = 0x68 PWR_MGMT_1 = 0x6B SMPLRT_DIV = 0x19 CONFIG = 0x1A GYRO_CONFIG = 0x1B ACCEL_CONFIG = 0x1C INT_ENABLE = 0x38 ACCEL_XOUT_H = 0x3B ACCEL_YOUT_H = 0x3D ACCEL_ZOUT_H = 0x3F TEMP_OUT_H = 0x41 GYRO_XOUT_H = 0x43 GYRO_YOUT_H = 0x45 GYRO_ZOUT_H = 0x47 # start I2C driver bus = smbus . SMBus ( 0 ) # start comm with i2c bus gyro_sens , accel_sens = MPU6050_start () # instantiate gyro/accel while True : print ( mpu6050_conv ()) 这里我们看一下怎么使用I2C和陀螺仪通信来获取信息。主体上有三个大的函数，而这三个函数的功能都比较单一，第一个函数通过给陀螺仪发送数据来进行初始化的设置，比如配置陀螺仪的电源寄存器，加速度寄存器等；第二个函数则是从陀螺仪读取数据；第三个函数则是将读取到的函数进行计算，从而变成真正的加速度等信息。 具体的读写操作可以看下面的代码片段，也是直接调用函数指定地址和数据就好了。 这里我们也能看到几个关键的参数，比如陀螺仪MPU6050的地址是0x68，通过这个地址才能确认到陀螺仪的存在，然后进行初始化，初始化完成之后进入循环，不停的将数据打印出来。","text_tokens":["得","out","就","a","处理","配置","上主","外线","线","任何","0b11000","|","只","0x19","比","机器人","s","找到",",","print","0x1b","+-","接收","addr","registers","时钟",")","简单","获取信息","一根","到","div","reset","进入","samp","#","片段","如果","x3","^","##","解析","combine","需要","连接","初始","这个","有","原始","多个","的","终止","关系","management","data","读写","即可","从而","串行","计算","中","怎么","收到","真正","mpu6500","0x00","功能","他","主","y","程序","不停","例程","上","comm","寄存器","取决于","才","传感器",":","of","0x3f","函数","。","一个","value","能否","fifo","0x68","8","0x43","接下","0x6b","指定","mgmt","sel","派","下","能","用","spi","寻址","完成","供电","负责","线图","彼此","也","信息","mpu6050","、","return","各种","给","py",".","start","khz","sens","位置","三个","0x47","i2c","感器","enable","只要","终端","smbus","原理","认为","打印","另","看","sudo","具体","将","强大","出来","按照","电源","vals","smplrt","$","indx","传输数据","val","产生","250.0","acceleration","2.0","另外","启动","是","dps","write","直接","根线","convert","取信","调用","操作","大量","均","+","复杂","有点","crystal","或者","x","方向","0x41","h","def","0x3b","特性","_","找","一样","byte","和","一种","1000.0","这根","传送数据","接线图","bin","接口","代码","0.1","从","overflow","过去","是从","alter","我们","0","!","第二","driver","：","zout","读取数据","pwr",">","，","参数","1","sample","python3","0b01000","uart","取决","raw","with","65536","不过","uncomment","紫外线","不是","t","下面","usr","传输","常用","进行","由","啦","accel","不全是","两根","还是","循环","bus","higha","第三个","(","加速度","w","主机","bits","同步","；","add","获取","正常","=","to","但是","才能","旭日","关键","while","加速","问题","第一个","low","发和收","工作","xout","in","解决","硬件","都","之后","4","*","后续","设置","挺","地址","m","做","第二个","读写操作","40pin","sec","gyro","要","使用","连线","首先","acc","stability","settings","这些","power","read","0x1a","0x1c","第一","调用函数","env","接下来","因为","电源线","之外","则","不同","0x01","32768","可以","紫外","除了","用于","import","设备","发送数据","陀螺","模块","time","0b10000","继续","并","此时","然后","速度","interrupt","主动","虽然","更","config","双向","]","一下","存在","数据","/","接线","确认","重点","g","0x38","恒定","[","9.81","等","原始数据","二个","大","它","运行","总线","起来","这里","z","之类","机","instantiate","21.0","true","<","示例","8.0","2000.0","high","for","4.0","变成","register","几个","而","0x3d","很快","发送","寄存","方式","gyroscope","陀螺仪","-","bit","比较","unsigned","器件","degrees","int","了","rate","传送","configuration","机器","初始化","读取","过程"," ","在","15.0","很多","16.0","从机","被","第三","看到","图中","多","conv","最后","通信","sensors","这","0b00000","来","below","主体","all","通过","好","结算","就是","比如","2","单一","同样","and","values","0b010000","开发","temp","if","下来","传感","500.0","让","sleep","0x45","related","333.87","yout"],"title":"I2C同步串行通信","title_tokens":["同步","i2c","通信","串行"]},{"location":"hhp/4.5_I2C%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#i2c","text":"SPI通信虽然功能更强大了，但是需要4根线做连接，还是有点复杂，接下来I2C的连线就简单很多了。","text_tokens":["更","根线","的","就","接下来","但是","简单","很多","复杂","有点","。","强大","做","接下","连线","还是","i2c","通信","功能","下来","spi","4","了","，","需要","连接","虽然"],"title":"I2C同步串行通信","title_tokens":["同步","i2c","通信","串行"]},{"location":"hhp/4.5_I2C%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#i2c_1","text":"I2C也是一种常用的串行通信方式，和SPI一样可以连接多个设备，重点是它只需要两根线就可以完成。 不过他的两根线和UART不同，不全是传输数据用的，I2C中的一根线是时钟线，另一根才是传输数据的，这根线可以双向的传输数据。 I2C通信中可以有多个主设备或者从设备，只要能通过地址找到彼此的位置即可。 主器件用于启动总线传送数据，并产生时钟给各种从机，此时任何被寻址的器件均被认为是从机。在总线上主和从、发和收的关系不是恒定的，而取决于此时数据传送方向。如果主机要发送数据给从机，主机首先得找到从机的地址，然后主动发送数据过去，最后也得由主机终止数据传送；如果主机要接收从机的数据，同样由主机得找到从机的地址，然后主机接收从器件发送的数据，最后由主机终止接收过程。 因为I2C的特性，使用I2C的设备比SPI多很多，比如图中的紫外线传感器，陀螺仪之类的，都是使用I2C进行通信的。","text_tokens":["得","uart","双向","取决","就","数据","彼此","也","重点","、","不过","上主","外线","线","各种","紫外线","不是","给","任何","恒定","传输","只","常用","进行","由","比","找到","位置","不全是","两根","i2c","感器","只要","它","总线","接收","主机","认为","；","之类","机","时钟","另","一根","发和收","而","发送","方式","陀螺仪","传输数据","如果","都","产生","器件","需要","连接","启动","是","传送","有","多个","的","终止","过程"," ","关系","在","均","很多","地址","从机","即可","被","或者","串行","方向","中","图中","多","最后","要","使用","特性","通信","他","一样","主","首先","和","一种","取决于","才","传感器","这根","传送数据","因为","不同","通过","。","从","比如","过去","是从","可以","同样","紫外","用于","设备","发送数据","陀螺","能","传感","用","spi","寻址","并","此时","然后","完成","，","主动"],"title":"I2C通信原理","title_tokens":["原理","i2c","通信"]},{"location":"hhp/4.5_I2C%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#_1","text":"我们找来一个常用的陀螺仪模块，按照这里的接线图连接到旭日X3派的40PIN接口上，这里除了I2C通信的两根线之外，另外两根是电源线，负责给这个模块供电的，让它正常工作起来。","text_tokens":["负责","线图","接线图","的","来","正常","接线","电源线","之外","旭日","到","接口","。","一个","线","给","按照","电源","工作","除了","我们","40pin","陀螺仪","常用","陀螺","模块","两根","x3","派","i2c","通信","找","它","让","上","供电","另外","起来","，","连接","这里","是","这个"],"title":"硬件接线","title_tokens":["硬件","接线"]},{"location":"hhp/4.5_I2C%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#_2","text":"接线是挺简单的，我们继续来运行这个例程，看下能否收到数据。 $ sudo python3 mpu6500_i2c.py 在终端启动例程，很快就可以看到通过I2C读取到了大量传感器的数据，这些就是陀螺仪模块的原始数据，收到之后我们就可以进行结算处理啦，这就是我们后续机器人开发的需要解决的问题了。","text_tokens":["挺","python3","传感器","原始","机器","看","读取","的","来","就","数据"," ","接线","大量","处理","简单","sudo","在","通过","问题","到","结算","。","就是","能否","py",".","可以","很快","看到","我们","陀螺仪","$","收到","进行","机器人","解决","mpu6500","啦","陀螺","模块","原始数据","开发","下","i2c","感器","_","传感","之后","继续","运行","例程","终端","了","这些","，","启动","这","需要","后续","是","这个"],"title":"运行示例程序","title_tokens":["示例","程序","运行"]},{"location":"hhp/4.5_I2C%E5%90%8C%E6%AD%A5%E4%B8%B2%E8%A1%8C%E9%80%9A%E4%BF%A1/#_3","text":"mpu6500_i2c.py： #!/usr/bin/env python3 import smbus , time def MPU6050_start (): # alter sample rate (stability) samp_rate_div = 0 # sample rate = 8 kHz/(1+samp_rate_div) bus . write_byte_data ( MPU6050_ADDR , SMPLRT_DIV , samp_rate_div ) time . sleep ( 0.1 ) # reset all sensors bus . write_byte_data ( MPU6050_ADDR , PWR_MGMT_1 , 0x00 ) time . sleep ( 0.1 ) # power management and crystal settings bus . write_byte_data ( MPU6050_ADDR , PWR_MGMT_1 , 0x01 ) time . sleep ( 0.1 ) #Write to Configuration register bus . write_byte_data ( MPU6050_ADDR , CONFIG , 0 ) time . sleep ( 0.1 ) #Write to Gyro configuration register gyro_config_sel = [ 0b00000 , 0b010000 , 0b10000 , 0b11000 ] # byte registers gyro_config_vals = [ 250.0 , 500.0 , 1000.0 , 2000.0 ] # degrees/sec gyro_indx = 0 bus . write_byte_data ( MPU6050_ADDR , GYRO_CONFIG , int ( gyro_config_sel [ gyro_indx ])) time . sleep ( 0.1 ) #Write to Accel configuration register accel_config_sel = [ 0b00000 , 0b01000 , 0b10000 , 0b11000 ] # byte registers accel_config_vals = [ 2.0 , 4.0 , 8.0 , 16.0 ] # g (g = 9.81 m/s^2) accel_indx = 0 bus . write_byte_data ( MPU6050_ADDR , ACCEL_CONFIG , int ( accel_config_sel [ accel_indx ])) time . sleep ( 0.1 ) # interrupt register (related to overflow of data [FIFO]) bus . write_byte_data ( MPU6050_ADDR , INT_ENABLE , 1 ) time . sleep ( 0.1 ) return gyro_config_vals [ gyro_indx ], accel_config_vals [ accel_indx ] def read_raw_bits ( register ): # read accel and gyro values high = bus . read_byte_data ( MPU6050_ADDR , register ) low = bus . read_byte_data ( MPU6050_ADDR , register + 1 ) # combine higha and low for unsigned bit value value = (( high << 8 ) | low ) # convert to +- value if ( value > 32768 ): value -= 65536 return value def mpu6050_conv (): # raw acceleration bits acc_x = read_raw_bits ( ACCEL_XOUT_H ) acc_y = read_raw_bits ( ACCEL_YOUT_H ) acc_z = read_raw_bits ( ACCEL_ZOUT_H ) # raw temp bits ## t_val = read_raw_bits(TEMP_OUT_H) # uncomment to read temp # raw gyroscope bits gyro_x = read_raw_bits ( GYRO_XOUT_H ) gyro_y = read_raw_bits ( GYRO_YOUT_H ) gyro_z = read_raw_bits ( GYRO_ZOUT_H ) #convert to acceleration in g and gyro dps a_x = ( acc_x / ( 2.0 ** 15.0 )) * accel_sens a_y = ( acc_y / ( 2.0 ** 15.0 )) * accel_sens a_z = ( acc_z / ( 2.0 ** 15.0 )) * accel_sens w_x = ( gyro_x / ( 2.0 ** 15.0 )) * gyro_sens w_y = ( gyro_y / ( 2.0 ** 15.0 )) * gyro_sens w_z = ( gyro_z / ( 2.0 ** 15.0 )) * gyro_sens ## temp = ((t_val)/333.87)+21.0 # uncomment and add below in return return a_x , a_y , a_z , w_x , w_y , w_z # MPU6050 Registers MPU6050_ADDR = 0x68 PWR_MGMT_1 = 0x6B SMPLRT_DIV = 0x19 CONFIG = 0x1A GYRO_CONFIG = 0x1B ACCEL_CONFIG = 0x1C INT_ENABLE = 0x38 ACCEL_XOUT_H = 0x3B ACCEL_YOUT_H = 0x3D ACCEL_ZOUT_H = 0x3F TEMP_OUT_H = 0x41 GYRO_XOUT_H = 0x43 GYRO_YOUT_H = 0x45 GYRO_ZOUT_H = 0x47 # start I2C driver bus = smbus . SMBus ( 0 ) # start comm with i2c bus gyro_sens , accel_sens = MPU6050_start () # instantiate gyro/accel while True : print ( mpu6050_conv ()) 这里我们看一下怎么使用I2C和陀螺仪通信来获取信息。主体上有三个大的函数，而这三个函数的功能都比较单一，第一个函数通过给陀螺仪发送数据来进行初始化的设置，比如配置陀螺仪的电源寄存器，加速度寄存器等；第二个函数则是从陀螺仪读取数据；第三个函数则是将读取到的函数进行计算，从而变成真正的加速度等信息。 具体的读写操作可以看下面的代码片段，也是直接调用函数指定地址和数据就好了。 这里我们也能看到几个关键的参数，比如陀螺仪MPU6050的地址是0x68，通过这个地址才能确认到陀螺仪的存在，然后进行初始化，初始化完成之后进入循环，不停的将数据打印出来。","text_tokens":["sample","config","python3","0b01000","out","]","一下","存在","就","a","/","数据","raw","with","也","信息","mpu6050","配置","确认","g","return","0x38","65536","uncomment","下面","t","py","给",".","0b11000","start","usr","khz","|","sens","[","9.81","0x19","进行","等","s","accel","三个","0x47","循环","二个","i2c","bus","enable","higha",",","大","第三个","(","print","0x1b","加速度","+-","w","z","这里","smbus","addr","bits","；","registers","打印","instantiate","add","获取","=",")","看","21.0","true","<","to","8.0","2000.0","才能","high","for","4.0","while","register","获取信息","加速","变成","具体","关键","将","第一个","到","div","几个","low","参数","而","出来","0x3d","vals","发送","reset","电源","寄存","smplrt","gyroscope","xout","进入","陀螺仪","in","samp","-","#","indx","片段","bit","比较","unsigned","val","都","^","##","之后","250.0","combine","acceleration","degrees","int","了","2.0","rate","初始","*","dps","是","设置","这个","write","configuration","有","初始化","直接","convert","取信","读取","的","调用"," ","操作","management","+","15.0","16.0","data","地址","crystal","m","第三","读写","从而","第二个","x","读写操作","计算","怎么","看到","sec","conv","0x41","gyro","h","真正","mpu6500","def","使用","0x3b","0x00","通信","_","功能","sensors","y","acc","byte","和","stability","settings","comm","上","寄存器","不停","power","这","1000.0","read","0x1a","0x1c","第一","调用函数",":","env","0b00000","below","来","of","0x3f","主体","则","all","0x01","函数","通过","bin","好","。","代码","一个","0.1","value","2","overflow","32768","fifo","单一","比如","是从","可以","0x68","alter","and","我们","8","values","0x43","0","import","0x6b","指定","mgmt","!","第二","0b010000","陀螺","temp","发送数据","if","sel","time","：","0b10000","driver","zout","能","读取数据","500.0","sleep","pwr","速度",">","interrupt","然后","，","完成","0x45","related","333.87","1","yout"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"hhp/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/","text":"USB外设驱动 在电脑上，我们最常用的接口之一，应该就是USB了，相比之前讲到的外设通信方法，USB更加复杂，速度也更快。 USB通信原理 USB不仅是我们生活中最常用的一种接口，也是一种串行总线的通讯方式。他类似于UART，有两根线用来传输数据。 而且USB还有专门的接口规范，比如我们常听说的USB Type A、Type C。例如这里列出来的USB口，打印机常用的B口，手机上用的C口，都是标准的USB接口。 USB的接口规范，使用广泛，很多成熟的外设都是采用的USB接口。 摄像头驱动 比如USB摄像头。 硬件接线 这里我们使用一个USB摄像头，通过一个相机驱动把它跑起来，并且可以看到图像数据。 方法有很多中，TogetherROS兼容ROS2的所有功能，那我们就先试试ROS2中的标准方法，在旭日X3PI上直接安装一个usb_cam功能包。 ROS2相机驱动 安装与配置 首先安装ROS2的相机驱动包： # 安装功能包 $ sudo apt install ros-foxy-usb-cam 安装好之后，为了让系统能够找到该功能包，需要进入tros的目录，建立对应的软连接。 # 建立软连接 $ cd /opt/tros $ sudo python3 create_soft_link.py --foxy /opt/ros/foxy/ --tros /opt/tros/ 因为旭日X3Pi可以连接csi摄像头，设备名占用了video0-7，所以外接的USB摄像头会被自动分配到video8，我们需要在ROS2的功能包中修改一下设备号。 # 修改配置文件 $ cd /opt/tros/share/usb_cam/config $ sudo vim params.yaml 然后给这个设备添加权限，最后再设置TogetherROS的环境变量就可以使用啦。 # 添加可执行权限 $ sudo chmod 777 /dev/video8 # 添加环境变量 $ source /opt/tros/local_setup.bash 运行相机驱动 我们来试一试。 $ ros2 launch usb_cam demo_launch.py #启动相机，X3Pi $ ros2 run rqt_image_view rqt_image_view #查看图像，PC 这里直接在X3Pi中启动usb_cam的launch文件，然后再启动一个能和他通信的Ubuntu桌面系统，打开rqt_image_view，选择对应的话题，就可以看到图像了。也就是说明我们成功的用TROS驱动了这个USB摄像头。 TogetherROS相机驱动 除此之外，TogetherROS中也提供了USB摄像头的驱动节点，连接摄像头之后，直接设置设备的权限和TogetherROS的环境变量就可以使用了。 $ source /opt/tros/local_setup.bash $ sudo chmod 777 /dev/video8 $ ros2 launch hobot_usb_cam hobot_usb_cam.launch.py 之后可以再打开一个新的终端，输入对应的指令，然后启动websocket这个节点，就可以把image这个话题的数据发送到网页了。 $ source /opt/tros/local_setup.bash $ cd /opt/tros/lib/websocket/webservice $ sudo chmod +x ./sbin/nginx $ sudo ./sbin/nginx -p . $ ros2 run websocket websocket --ros-args -p image_topic: = /image -p image_type: = mjpeg -p only_show_image: = true 这时我们直接打开在通一个局域网下的浏览器，输入X3Pi的地址，就可以进去到一个网页，点击左上方web端展示即可看到USB摄像头的实时画面。 激光雷达驱动 移动机器人中常用的激光雷达大多也是USB借口的，比如这款rplidar。 安装与配置 如果我们想把它跑起来，同样需要一个驱动包，大家可以在工作空间中下载雷达的驱动包，然后进行编译。编译完成后，添加环境变量就可以使用这个功能包了。 # 下载源码 $ mkdir -p catkin_ws/src $ cd ~/catkin_ws/src $ git clone -b ros2 https://github.com/slamtec/rplidar_ros.git # 编译 $ cd ~/catkin_ws $ colcon build --symlink-install # 添加环境变量 $ source ~/catkin_ws/install/setup.bash # 添加权限 $ sudo chmod 777 /dev/ttyUSB0 还要记得给激光雷达的USB口设置对应的权限。 运行激光雷达驱动 驱动安装好之后，就可以启动雷达了。 在旭日X3派的终端中，运行启动激光雷达的launch文件。 $ ros2 launch rplidar_ros2 rplidar_launch.py #启动雷达，X3PI $ ros2 run rviz2 rviz2 #查看点云，PC 启动成功后，我们在电脑端的Ubuntu系统中，在ros2环境下打开rviz2，然后将世界坐标系改为laser，然后添加LaserScan的可视化选项，并且把Reliability Policy的选项改为System Default，此时就可以看到激光雷达的点云数据了。","text_tokens":["git","就","a","配置","https","线","点击","rplidar","坐标系","并且","video8","hobot","机器人","找到","mjpeg","还有","查看","标准","这时","rviz2","为了","名","到","cd","sbin","symlink","进入","#","会","送到","only","如果","x3","世界","修改","需要","连接","params","还要","这个","有","变量","文件","的","系统","试一试","该","即可","串行","中","source","方法","提供","那","更加","他","功能","上","image","目录","规范",":","github","包","进去","想","。","一个","能够","激光","左上方","打开","指令","这款","包中","下","派","能","借口","用","之一","外接","完成","chmod","选项","试试","也","、","catkin","把","给","电脑","py","空间",".","type","src","clone","终端","--","原理","show","打印","发送到","sudo","ros","将","ttyusb0","出来","$","驱动","传输数据","启动","是","直接","浏览器","build","launch","先","+","复杂","环境变量","yaml","再","x","软","mkdir","_","apt","和","改为","一种","手机","再启动","列出来","所有","laser","印机","foxy","dev","接口","口","激光雷达","与","x3pi","图像","local","占用","lib","我们","soft","：","setup","权限","，","列出","配置文件","python3","uart","csi","run","像头","展示","policy","摄像头","nginx","编译","传输","常用","进行","啦","两根","局域网","端的","记得","不仅","可","install","=","旭日","采用","跑","ws","share","工作","硬件","类似","最","都","明","之后","专门","设置","输入","除此","c","实时","相比","建立","地址","rqt","也就是说","执行","常","例如","使用","移动","vim","雷达","首先","websocket","外设","上用","局域","自动","而且","之前","video0","话题","因为","777","laserscan","之外","demo","7","应该","可以","~","环境","设备","端","安装","此时","速度","然后","通讯","生活","slamtec","更","config","一下","colcon","数据","/","接线","可视","画面","togetherros","ros2","system","可视化","reliability","create","usb","后","link","大家","它","分配","运行","包了","总线","起来","成功","这里","opt","相机","添加","左上","bash","true","web","p","com","浏览","发送","方式","-","所以","讲到","源码","tros","移动机器人","下载","了","打印机","于","机器","上方"," ","摄像","广泛","动机","在","号","很多","兼容","网页","ubuntu","被","串行总线","看到","pc","最后","节点","cam","新","b","听说","通信","topic","点云","view","除此之外","来","大多","default","环境变","通过","好","就是","坐标","比如","就是说","args","同样","对应","选择","webservice","成熟","通","让","快","用来","桌面"],"title":"USB外设驱动","title_tokens":["驱动","外设","usb"]},{"location":"hhp/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#usb","text":"在电脑上，我们最常用的接口之一，应该就是USB了，相比之前讲到的外设通信方法，USB更加复杂，速度也更快。","text_tokens":["更","的","也","在","复杂","相比","接口","。","就是","电脑","应该","usb","我们","常用","方法","讲到","最","通信","更加","之一","外设","快","上","了","速度","，","之前"],"title":"USB外设驱动","title_tokens":["驱动","外设","usb"]},{"location":"hhp/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#usb_1","text":"USB不仅是我们生活中最常用的一种接口，也是一种串行总线的通讯方式。他类似于UART，有两根线用来传输数据。 而且USB还有专门的接口规范，比如我们常听说的USB Type A、Type C。例如这里列出来的USB口，打印机常用的B口，手机上用的C口，都是标准的USB接口。 USB的接口规范，使用广泛，很多成熟的外设都是采用的USB接口。","text_tokens":["有","打印","uart","这里","的","a","数据"," ","c","也","列出来","广泛","用来","采用","、","很多","印机","接口","。","口","比如","线","列出","串行","出来","usb","串行总线","中","方式","我们","type","传输","常用","常","类似","最","两根","传输数据","而且","例如","使用","b","还有","听说","都","他","成熟","标准","外设","上用","打印机","一种","总线","手机","，","通讯","生活","不仅","是","专门","于","规范"],"title":"USB通信原理","title_tokens":["usb","原理","通信"]},{"location":"hhp/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#_1","text":"比如USB摄像头。","text_tokens":["像头","。","比如","摄像","摄像头","usb"],"title":"摄像头驱动","title_tokens":["摄像","像头","摄像头","驱动"]},{"location":"hhp/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#_2","text":"这里我们使用一个USB摄像头，通过一个相机驱动把它跑起来，并且可以看到图像数据。 方法有很多中，TogetherROS兼容ROS2的所有功能，那我们就先试试ROS2中的标准方法，在旭日X3PI上直接安装一个usb_cam功能包。","text_tokens":["所有","有","直接","的","就","摄像","数据"," ","试试","包","旭日","先","togetherros","ros2","通过","在","很多","兼容","把","像头","跑","。","一个","摄像头","x3pi","可以","usb","图像","中","并且","看到","我们","方法","驱动","cam","使用","那","功能","_","它","安装","标准","上","起来","，","这里","相机"],"title":"硬件接线","title_tokens":["硬件","接线"]},{"location":"hhp/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#ros2","text":"","text_tokens":[],"title":"ROS2相机驱动","title_tokens":["驱动","相机","ros2"]},{"location":"hhp/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#_3","text":"首先安装ROS2的相机驱动包： # 安装功能包 $ sudo apt install ros-foxy-usb-cam 安装好之后，为了让系统能够找到该功能包，需要进入tros的目录，建立对应的软连接。 # 建立软连接 $ cd /opt/tros $ sudo python3 create_soft_link.py --foxy /opt/ros/foxy/ --tros /opt/tros/ 因为旭日X3Pi可以连接csi摄像头，设备名占用了video0-7，所以外接的USB摄像头会被自动分配到video8，我们需要在ROS2的功能包中修改一下设备号。 # 修改配置文件 $ cd /opt/tros/share/usb_cam/config $ sudo vim params.yaml 然后给这个设备添加权限，最后再设置TogetherROS的环境变量就可以使用啦。 # 添加可执行权限 $ sudo chmod 777 /dev/video8 # 添加环境变量 $ source /opt/tros/local_setup.bash","text_tokens":["config","python3","chmod","csi","一下","就","/","ros2","配置","togetherros","像头","摄像头","给","py","create",".","usb","video8","啦","找到","link","分配","--","opt","相机","添加","可","install","bash","为了","旭日","sudo","ros","名","到","cd","share","进入","-","所以","$","#","会","驱动","之后","tros","修改","了","需要","连接","params","这个","设置","变量","文件","的"," ","摄像","系统","在","号","该","环境变量","yaml","建立","再","被","软","source","执行","最后","cam","使用","功能","_","vim","首先","apt","自动","目录","video0","环境变","因为","777","包","好","foxy","dev","。","x3pi","能够","7","可以","对应","local","占用","我们","soft","包中","环境","设备","：","setup","权限","安装","外接","让","然后","，","配置文件"],"title":"安装与配置","title_tokens":["安装","与","配置"]},{"location":"hhp/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#_4","text":"我们来试一试。 $ ros2 launch usb_cam demo_launch.py #启动相机，X3Pi $ ros2 run rqt_image_view rqt_image_view #查看图像，PC 这里直接在X3Pi中启动usb_cam的launch文件，然后再启动一个能和他通信的Ubuntu桌面系统，打开rqt_image_view，选择对应的话题，就可以看到图像了。也就是说明我们成功的用TROS驱动了这个USB摄像头。","text_tokens":["直接","这里","run","文件","的","来","话题"," ","就","摄像","系统","launch","ros2","在","试一试","像头","。","就是","一个","摄像头","x3pi","demo","ubuntu","rqt","就是说","py","这个",".","usb","打开","图像","对应","中","可以","看到","我们","也就是说","pc","再启动","$","#","cam","驱动","选择","能","通信","_","他","查看","明","tros","用","和","了","view","然后","，","启动","image","成功","相机","桌面"],"title":"运行相机驱动","title_tokens":["相机","运行","驱动"]},{"location":"hhp/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#togetherros","text":"除此之外，TogetherROS中也提供了USB摄像头的驱动节点，连接摄像头之后，直接设置设备的权限和TogetherROS的环境变量就可以使用了。 $ source /opt/tros/local_setup.bash $ sudo chmod 777 /dev/video8 $ ros2 launch hobot_usb_cam hobot_usb_cam.launch.py 之后可以再打开一个新的终端，输入对应的指令，然后启动websocket这个节点，就可以把image这个话题的数据发送到网页了。 $ source /opt/tros/local_setup.bash $ cd /opt/tros/lib/websocket/webservice $ sudo chmod +x ./sbin/nginx $ sudo ./sbin/nginx -p . $ ros2 run websocket websocket --ros-args -p image_topic: = /image -p image_type: = mjpeg -p only_show_image: = true 这时我们直接打开在通一个局域网下的浏览器，输入X3Pi的地址，就可以进去到一个网页，点击左上方web端展示即可看到USB摄像头的实时画面。","text_tokens":["chmod","run","就","/","数据","也","画面","togetherros","ros2","把","像头","展示","摄像头","点击","py","nginx",".","usb","type","video8","hobot","mjpeg","局域网","终端","--","opt","show","左上","发送到","=","这时","bash","true","web","p","sudo","ros","到","cd","sbin","浏览","发送","-","$","驱动","送到","only","之后","tros","了","连接","启动","输入","这个","设置","除此","直接","变量","浏览器","的","上方","摄像"," ","launch","在","+","实时","环境变量","再","网页","地址","即可","x","中","看到","source","节点","cam","新","提供","使用","_","websocket","topic","和","除此之外","局域","image",":","话题","环境变","777","之外","进去","dev","。","一个","x3pi","args","左上方","可以","打开","local","对应","指令","lib","我们","环境","设备","webservice","端","setup","权限","下","通","然后","，"],"title":"TogetherROS相机驱动","title_tokens":["驱动","相机","togetherros"]},{"location":"hhp/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#_5","text":"移动机器人中常用的激光雷达大多也是USB借口的，比如这款rplidar。","text_tokens":["机器","的","大多","也","动机","。","激光雷达","比如","激光","rplidar","usb","中","这款","常用","机器人","借口","移动","雷达","移动机器人","，","是"],"title":"激光雷达驱动","title_tokens":["驱动","雷达","激光雷达","激光"]},{"location":"hhp/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#_6","text":"如果我们想把它跑起来，同样需要一个驱动包，大家可以在工作空间中下载雷达的驱动包，然后进行编译。编译完成后，添加环境变量就可以使用这个功能包了。 # 下载源码 $ mkdir -p catkin_ws/src $ cd ~/catkin_ws/src $ git clone -b ros2 https://github.com/slamtec/rplidar_ros.git # 编译 $ cd ~/catkin_ws $ colcon build --symlink-install # 添加环境变量 $ source ~/catkin_ws/install/setup.bash # 添加权限 $ sudo chmod 777 /dev/ttyUSB0 还要记得给激光雷达的USB口设置对应的权限。","text_tokens":["chmod","git","colcon","就","/","ros2","catkin","把","https","给","空间","rplidar",".","usb","编译","后","进行","大家","src","clone","它","包了","记得","起来","--","添加","install","bash","p","com","sudo","ros","跑","cd","ws","ttyusb0","工作","symlink","-","$","#","驱动","源码","如果","下载","需要","还要","这个","设置","变量","build","的"," ","在","环境变量","中","source","使用","mkdir","b","功能","雷达","_",":","github","环境变","777","包","dev","想","。","口","一个","激光雷达","激光","可以","同样","~","对应","我们","环境","setup","权限","然后","完成","，","slamtec"],"title":"安装与配置","title_tokens":["安装","与","配置"]},{"location":"hhp/4.6_USB%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8/#_7","text":"驱动安装好之后，就可以启动雷达了。 在旭日X3派的终端中，运行启动激光雷达的launch文件。 $ ros2 launch rplidar_ros2 rplidar_launch.py #启动雷达，X3PI $ ros2 run rviz2 rviz2 #查看点云，PC 启动成功后，我们在电脑端的Ubuntu系统中，在ros2环境下打开rviz2，然后将世界坐标系改为laser，然后添加LaserScan的可视化选项，并且把Reliability Policy的选项改为System Default，此时就可以看到激光雷达的点云数据了。","text_tokens":["添加","laser","文件","run","就","的"," ","default","数据","laserscan","选项","系统","rviz2","可视","旭日","launch","ros2","在","system","好","把","将","。","policy","激光雷达","坐标","x3pi","ubuntu","可视化","reliability","py","激光","rplidar","电脑",".","可以","打开","坐标系","中","并且","后","看到","我们","pc","$","#","环境","驱动","x3","派","端的","下","_","雷达","查看","安装","之后","世界","运行","改为","点云","终端","了","然后","此时","，","启动","成功"],"title":"运行激光雷达驱动","title_tokens":["雷达","运行","激光雷达","驱动","激光"]},{"location":"hhp/5.1_%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%BB%8B%E7%BB%8D/","text":"机器视觉介绍 机器视觉概念 机器视觉， 就是用计算机来模拟人的视觉功能，但这并不仅仅是人眼的简单延伸，更重要的是像人脑一样，可以从客观事物的图像中提取信息，进行处理并加以理解，最终用于实际检测、控制等场景。 获取图像信息相对简单，但想让机器人理解图像中千变万化的物品，就难上加难了。 为了解决这一系列复杂的问题，机器视觉也是一个涉猎广泛的交叉学科，横跨人工智能、神经生物学、物理学、计算机科学、图像处理、模式识别等诸多领域。时至今日，在各个领域中，都有大量开发者或组织参与其中，也积累了众多技术，不过依然还有很多问题亟待解决，就像我们对自己大脑的研究也只是冰山一角一样，机器视觉的研究也将会是一个长久的工作。 机器视觉相关的关键技术也有不少，比如视觉图像的采集和信号处理，这个过程主要是通过传感器硬件采集外部光信号的过程，光信号最终会转变成数字电路的信号，便于下一步的处理；类似左边图片中看到的效果，获取图像之后，更重要的是要识别图像中的物体、确定物体的位置、或者检测物品的变化，这就要用到模式识别或者机器学习等技术，这个部分也是当今机器视觉研究的重点。 和人类的两只眼睛不同，机器用于获取图像的传感器种类较为丰富，可以是一个摄像头，也可以是两个摄像头，还可以是三个、四个、很多个摄像头，不仅可以获取颜色信息，还可以通过红外相机获取深度或者能量信息，这可比人眼获取的信息丰富多了，当然，这也会对后期的处理带来不同的计算压力。 在工业领域，机器视觉系统已经被广泛用于自动检验、工件加工、装配自动化以及生产过程控制等工作。随着机器人的快速发展和应用，机器视觉也逐渐应用于农业机器人、AMR物流机器人、服务机器人、无人驾驶汽车等各种机器人，活跃在农场、物流、仓储、交通、医院等多种环境中。 机器视觉流程 人类视觉擅长于对复杂、非结构化的场景进行定性解释，但机器视觉凭借速度、精度和可重复性等优势，非常适合对结构化场景进行定量测量。 一般来讲，典型的机器视觉系统可以分为如图所示的三个部分：图像采集、图像分析和控制输出。 图像采集注重对原始光学信号的采样，是整个视觉系统的传感部分，核心是相机和相关的配件。 其中光源用于照明待检测的物体，并突显其特征，便于让相机能够更好的捕捉图像。光源是影响机器视觉系统成像质量的重要因素，好的光源和照明效果对机器视觉判断影响很大。当前，机器视觉的光源已经突破人眼的可见光范围，其光谱范围跨越红外光（IR）、可见光、紫外光（UV）乃至X射线波段，可实现更精细和更广泛的检测范围，以及特殊成像需求。 相机被喻为机器视觉系统的“眼睛”，承担着图像信息采集的重要任务。图像传感器又是相机的核心元器件，主要有CCD和CMOS两种类型，其工作原理是将相机镜头接收到的光学信号转化成数字信号。选择合适的相机是机器视觉系统设计的重要环节，不仅直接决定了采集图像的质量和速度，同时也与整个系统的运行模式相关。 图像处理系统接收到相机传来的数字图像之后，通过各种软件算法进行图像特征提取、特征分析和数据标定，最后进行判断。这是各种视觉算法研究最为集中的部分，从传统的模式识别算法，到当前热门的各种机器学习方法，都是为了更好的让机器理解环境。 对于人来讲，识别某一个物体是苹果似乎理所当然，但是对于机器人来讲，就需要提取各种各样不同种类、颜色、形状的苹果特征，然后训练得到一个苹果的“模型”，再通过这个模型对实时图像做匹配，从而分析面前这个东西到底是不是苹果。 在机器人系统中，视觉识别的结果最终要和机器人的某些行为绑定，也就是第三个部分——控制输出，包含I/O接口、运动控制、可视化显示等。当图像处理系统完成图像分析后，将判断的结果发给机器人控制系统，接下来机器人完成运动控制。比如视觉识别到了抓取目标的位置，通过IO口控制夹爪完成抓取和放置，过程中识别的结果和运动的状态，都可以在上位机中显示，方便我们监控。 就机器视觉而言，在这三个部分中，图像分析占据了绝对的核心，涉及的方法、使用的各种开源软件或者框架非常多，这也是我们后续开发的重点，TogetherROS中提供了大量的算法、工具和功能支持。 旭日X3派配置 了解了机器视觉的基本原理和流程，相信大家对视觉应用已经充满了期待，我们这就准备开始。 后续课程中，我们将继续在旭日X3派的开发板上，使用TogetherROS实现各种各样的视觉例程，不过我们得先找到一个相机，比如usb相机或者MIPI接口配套的相机模块，然后连接到开发板对应的接口上。 电脑和开发板之前通过网线连接，便于我们查看视觉处理的结果，速度更快。 如果有HDMI屏幕的话，也可以准备好，稍后需要使用的时候插上查看结果，如果没有的话，也没有影响，后续我们会使用一套网络传输工具，通过板卡的IP地址，就可以看到图像处理的实时状态啦。 USB相机图像采集 关于相机的驱动，请大家也再确认一下，这是后续视觉处理的基础。 如果是USB相机的话，可以参考这个过程验证下是否可以顺利看到图像。 # 旭日X3派 $ sudo apt install ros-foxy-usb-cam $ cd /opt/tros $ python3 create_soft_link.py --foxy /opt/ros/foxy/ --tros /opt/tros $ source /opt/tros/local_setup.bash $ ros2 launch usb_cam demo_launch.py # 修改params.yaml配置文件中的设备号 # PC $ source /opt/ros/foxy/local_setup.bash $ ros2 run rqt_image_view rqt_image_view MIPI相机图像采集 如果使用的是MIPI相机的话，可以参考这个流程驱动相机并显示图像。 # 旭日X3派 $ source /opt/tros/local_setup.bash $ ros2 run mipi_cam mipi_cam --ros-args -p video_device: = F37 -p image_width: = 960 -p image_height: = 540 # PC $ source /opt/ros/foxy/local_setup.bash $ ros2 run rqt_image_view rqt_image_view 为了提高图像的编码和传输效率，我们建议大家使用MIPI接口的相机，后续应用功能我们也会以该相机为主。","text_tokens":["得","行为","照明","相对","就","处理","特征分析","配置","交通","板卡","mipi","长久","交叉","就要","核心","紫外光","最终","客观事物","机器人","多种","抓取","找到","是否","学科","一系","工件","还有","开发板","是不是","查看","突破","对于","结构化","检测","压力","医院","接收","所示","o","已经","着","简单","参与","为了","理学","基本","占据","了解","转变成","非常","到","cd","系列","插上","至今","深度","镜头","只是","#","会","决定","数字图像","如果","光谱","x3","模式","修改","电路","当然","需要","连接","params","横跨","这个","领域","有","原始","文件","的","系统","各种各样","其中","该","从而","元器件","video","计算","测量","这是","稍后","中","生产","source","仓储","千变万化","方法","还","提供","热门","960","功能","人工","例程","上","四个","image","化成","其","算法","如图所示","以","时至今日","基本原理","介绍","传感器","提高",":","控制系统","重复","客观","一系列","某些","想","。","一个","能够","一般","跨越","计算机科学","接下","运动","特殊","应用","分析","红外","状态","下","检验","派","用","影响","width","当","完成","精度","特征提取","工具","软件","范围","也","机中","信息","人","数字","、","农业","开始","各种","相信","生物学","环节","电脑","事物","时候",".","py","实现","一角","位置","人工智能","三个","适合","流程","感器","面前","确定","一步","传来","像","--","射线","原理","合适","物流","人脑","可比","sudo","配套","ros","将","采集","一般来讲","hdmi","识别","$","喻为","驱动","任务","各个","组织","i","是","编码","直接","计算机","效率","待","两种","大量","同时","launch","先","复杂","再","yaml","可见","或者","部分","结构","配件","课程","需求","开源","成像","结果","_","分为","一样","apt","和","光学","发给","东西","当前","两个","以及","device","似乎","信号","逐渐","foxy","接口","口","捕捉","与","从","今日","模型","图像","local","采样","我们","模拟","网线","训练","更好","soft","各个领域","大脑","传统","数字信号","定量","：","爪","setup","生物","自己","不少","效果","，","算机","配置文件","光源","因素","python3","run","包含","活跃","类型","承担","像头","不过","摄像头","装配","屏幕","没有","不是","科学","擅长于","本原","传输","依然","进行","个","夹","为主","啦","随着","第三个","解释","典型","无人","不仅","主要","亟待解决","；","可","install","最为","获取","=","人类","但是","监控","旭日","关键","模式识别","问题","开发者","难上加难","提取","工作","物理学","解决","硬件","重复性","冰山一角","定性","类似","都","加工","之后","输出","苹果","后续","一套","神经","理所当然","整个","顺利","实时","x射线","地址","rqt","做","物体","特征","f37","光","amr","网络","要","但","使用","无人驾驶","关键技术","当今","验证","自动","匹配","带来","之前","交叉学科","ccd","颜色","的话","可重复性","诸多","（","期待","接下来","不同","请","场景","智能","快速","绑定","demo","可以","充满","延伸","紫外","发展","放置","上位","用于","亟待","环境","设备","擅长","可见光","后期","模块","相关","涉及","继续","人眼","并","转化","得到","速度","然后","实际","更","ir","一下","数据","/","可视","对","重要","种类","乃至","togetherros","服务","重点","确认","ros2","数字电","积累","图像处理","可视化","注重","create","控制","usb","复性","后","uv","等","两只","”","link","大家","很大","冰山","物品","较为","来讲","运行","加以","驾驶","汽车","到底","opt","相机","理解","bash","各样","研究","p","变成","元器","波段","左边","质量","建议","参考","-","能量","概念","cmos","tros","物理","重要环节","器件","基础","而言","了","转化成","ip地址","众多","于","信号处理","540","机器","突显","过程"," ","丰富","摄像","技术","自动化","广泛","在","号","很多","height","或","不仅仅","被","第三","优势","用到","非","设计","看到","形状","多","pc","视觉","绝对","最后","cam","凭借","便于","“","涉猎","关于","学习","长于","框架","view","目标","这","眼睛","）","数字电路","来","准备","变化","农场","通过","好","判断","就是","又","比如","某","args","非常适合","红外光","图片","对应","精细","标定","转变","方便","选择","集中","显示","开发","工业","仅仅","io","传感","下来","支持","让","外部","快","—"],"title":"机器视觉介绍","title_tokens":["视觉","介绍","机器"]},{"location":"hhp/5.1_%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%BB%8B%E7%BB%8D/#_1","text":"","text_tokens":[],"title":"机器视觉介绍","title_tokens":["视觉","介绍","机器"]},{"location":"hhp/5.1_%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%BB%8B%E7%BB%8D/#_2","text":"机器视觉， 就是用计算机来模拟人的视觉功能，但这并不仅仅是人眼的简单延伸，更重要的是像人脑一样，可以从客观事物的图像中提取信息，进行处理并加以理解，最终用于实际检测、控制等场景。 获取图像信息相对简单，但想让机器人理解图像中千变万化的物品，就难上加难了。 为了解决这一系列复杂的问题，机器视觉也是一个涉猎广泛的交叉学科，横跨人工智能、神经生物学、物理学、计算机科学、图像处理、模式识别等诸多领域。时至今日，在各个领域中，都有大量开发者或组织参与其中，也积累了众多技术，不过依然还有很多问题亟待解决，就像我们对自己大脑的研究也只是冰山一角一样，机器视觉的研究也将会是一个长久的工作。 机器视觉相关的关键技术也有不少，比如视觉图像的采集和信号处理，这个过程主要是通过传感器硬件采集外部光信号的过程，光信号最终会转变成数字电路的信号，便于下一步的处理；类似左边图片中看到的效果，获取图像之后，更重要的是要识别图像中的物体、确定物体的位置、或者检测物品的变化，这就要用到模式识别或者机器学习等技术，这个部分也是当今机器视觉研究的重点。 和人类的两只眼睛不同，机器用于获取图像的传感器种类较为丰富，可以是一个摄像头，也可以是两个摄像头，还可以是三个、四个、很多个摄像头，不仅可以获取颜色信息，还可以通过红外相机获取深度或者能量信息，这可比人眼获取的信息丰富多了，当然，这也会对后期的处理带来不同的计算压力。 在工业领域，机器视觉系统已经被广泛用于自动检验、工件加工、装配自动化以及生产过程控制等工作。随着机器人的快速发展和应用，机器视觉也逐渐应用于农业机器人、AMR物流机器人、服务机器人、无人驾驶汽车等各种机器人，活跃在农场、物流、仓储、交通、医院等多种环境中。","text_tokens":["更","相对","就","处理","也","重要","信息","对","人","种类","服务","数字","重点","、","农业","活跃","交通","长久","数字电","积累","不过","像头","图像处理","摄像头","装配","各种","生物学","事物","控制","交叉","科学","就要","依然","进行","最终","客观事物","等","机器人","两只","一角","位置","人工智能","三个","学科","多种","随着","一系","工件","还有","感器","冰山","物品","确定","一步","较为","加以","驾驶","汽车","像","检测","无人","不仅","主要","压力","相机","医院","亟待解决","；","物流","理解","获取","人脑","人类","已经","研究","简单","参与","为了","理学","可比","关键","变成","模式识别","转变成","问题","将","开发者","左边","系列","难上加难","提取","至今","深度","工作","采集","物理学","识别","只是","能量","会","解决","硬件","冰山一角","类似","都","加工","模式","之后","物理","电路","各个","组织","了","当然","众多","是","横跨","这个","信号处理","于","领域","有","机器","计算机","神经","的","过程"," ","丰富","摄像","大量","技术","系统","自动化","广泛","在","很多","复杂","或","个","其中","不仅仅","被","或者","用到","部分","计算","物体","中","看到","生产","多","仓储","视觉","光","千变万化","amr","要","还","但","便于","涉猎","无人驾驶","功能","学习","一样","和","人工","关键技术","当今","这","四个","自动","眼睛","带来","交叉学科","时至今日","数字电路","传感器","颜色","诸多","来","变化","两个","以及","不同","信号","逐渐","农场","场景","客观","通过","智能","一系列","想","。","就是","一个","快速","从","今日","比如","可以","图片","图像","延伸","发展","我们","模拟","转变","计算机科学","用于","亟待","环境","各个领域","大脑","应用","红外","开发","相关","后期","工业","仅仅","下","检验","传感","用","人眼","让","生物","并","自己","不少","外部","效果","，","算机","实际"],"title":"机器视觉概念","title_tokens":["视觉","概念","机器"]},{"location":"hhp/5.1_%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%BB%8B%E7%BB%8D/#_3","text":"人类视觉擅长于对复杂、非结构化的场景进行定性解释，但机器视觉凭借速度、精度和可重复性等优势，非常适合对结构化场景进行定量测量。 一般来讲，典型的机器视觉系统可以分为如图所示的三个部分：图像采集、图像分析和控制输出。 图像采集注重对原始光学信号的采样，是整个视觉系统的传感部分，核心是相机和相关的配件。 其中光源用于照明待检测的物体，并突显其特征，便于让相机能够更好的捕捉图像。光源是影响机器视觉系统成像质量的重要因素，好的光源和照明效果对机器视觉判断影响很大。当前，机器视觉的光源已经突破人眼的可见光范围，其光谱范围跨越红外光（IR）、可见光、紫外光（UV）乃至X射线波段，可实现更精细和更广泛的检测范围，以及特殊成像需求。 相机被喻为机器视觉系统的“眼睛”，承担着图像信息采集的重要任务。图像传感器又是相机的核心元器件，主要有CCD和CMOS两种类型，其工作原理是将相机镜头接收到的光学信号转化成数字信号。选择合适的相机是机器视觉系统设计的重要环节，不仅直接决定了采集图像的质量和速度，同时也与整个系统的运行模式相关。 图像处理系统接收到相机传来的数字图像之后，通过各种软件算法进行图像特征提取、特征分析和数据标定，最后进行判断。这是各种视觉算法研究最为集中的部分，从传统的模式识别算法，到当前热门的各种机器学习方法，都是为了更好的让机器理解环境。 对于人来讲，识别某一个物体是苹果似乎理所当然，但是对于机器人来讲，就需要提取各种各样不同种类、颜色、形状的苹果特征，然后训练得到一个苹果的“模型”，再通过这个模型对实时图像做匹配，从而分析面前这个东西到底是不是苹果。 在机器人系统中，视觉识别的结果最终要和机器人的某些行为绑定，也就是第三个部分——控制输出，包含I/O接口、运动控制、可视化显示等。当图像处理系统完成图像分析后，将判断的结果发给机器人控制系统，接下来机器人完成运动控制。比如视觉识别到了抓取目标的位置，通过IO口控制夹爪完成抓取和放置，过程中识别的结果和运动的状态，都可以在上位机中显示，方便我们监控。 就机器视觉而言，在这三个部分中，图像分析占据了绝对的核心，涉及的方法、使用的各种开源软件或者框架非常多，这也是我们后续开发的重点，TogetherROS中提供了大量的算法、工具和功能支持。","text_tokens":["更","光源","行为","照明","因素","ir","工具","软件","就","包含","数据","/","范围","处理","对","重要","信息","也","人","乃至","特征分析","种类","可视","数字","机中","、","重点","togetherros","类型","承担","图像处理","各种","不是","可视化","注重","环节","控制","擅长于","复性","核心","后","实现","uv","紫外光","进行","最终","等","机器人","”","夹","抓取","三个","位置","适合","感器","面前","很大","是不是","第三个","解释","突破","对于","结构化","来讲","典型","运行","传来","检测","射线","主要","不仅","到底","相机","原理","所示","接收","合适","o","可","理解","最为","人类","已经","着","研究","但是","各样","支持","为了","监控","占据","模式识别","非常","波段","元器","将","到","质量","提取","工作","采集","镜头","一般来讲","识别","重复性","喻为","cmos","决定","数字图像","定性","光谱","都","任务","模式","之后","输出","重要环节","器件","苹果","当然","了","而言","转化成","需要","i","后续","是","这个","有","机器","原始","直接","待","突显","的","两种","理所当然"," ","过程","同时","系统","大量","整个","广泛","各种各样","在","实时","x射线","复杂","其中","再","可见","被","第三","优势","从而","元器件","做","或者","部分","结构","非","物体","测量","配件","特征","设计","需求","这是","形状","中","多","视觉","绝对","最后","方法","要","开源","凭借","成像","但","便于","“","热门","使用","提供","结果","功能","学习","分为","长于","框架","和","开发","目标","光学","发给","化成","匹配","）","其","眼睛","算法","如图所示","这","东西","ccd","传感器","颜色","可重复性","（","接下来","当前","以及","不同","似乎","控制系统","信号","重复","场景","通过","好","判断","某些","接口","。","就是","捕捉","与","又","从","一个","模型","绑定","某","能够","比如","非常适合","口","红外光","可以","图像","紫外","采样","一般","精细","标定","放置","跨越","上位","我们","训练","更好","用于","接下","运动","特殊","环境","方便","选择","擅长","分析","可见光","红外","相关","数字信号","集中","定量","：","传统","显示","爪","状态","io","涉及","传感","下来","人眼","让","影响","并","转化","效果","速度","然后","得到","—","，","当","完成","精度","特征提取"],"title":"机器视觉流程","title_tokens":["流程","视觉","机器"]},{"location":"hhp/5.1_%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%BB%8B%E7%BB%8D/#x3","text":"了解了机器视觉的基本原理和流程，相信大家对视觉应用已经充满了期待，我们这就准备开始。 后续课程中，我们将继续在旭日X3派的开发板上，使用TogetherROS实现各种各样的视觉例程，不过我们得先找到一个相机，比如usb相机或者MIPI接口配套的相机模块，然后连接到开发板对应的接口上。 电脑和开发板之前通过网线连接，便于我们查看视觉处理的结果，速度更快。 如果有HDMI屏幕的话，也可以准备好，稍后需要使用的时候插上查看结果，如果没有的话，也没有影响，后续我们会使用一套网络传输工具，通过板卡的IP地址，就可以看到图像处理的实时状态啦。","text_tokens":["得","更","工具","就","处理","对","也","togetherros","板卡","mipi","不过","图像处理","开始","各种","屏幕","没有","相信","电脑","时候","usb","本原","传输","实现","啦","找到","大家","流程","开发板","查看","相机","原理","已经","各样","基本","旭日","了解","配套","将","到","插上","hdmi","会","如果","x3","了","ip地址","需要","连接","后续","有","机器","一套","的"," ","各种各样","先","在","实时","地址","或者","稍后","中","课程","看到","视觉","网络","便于","使用","结果","和","例程","上","这","之前","基本原理","的话","期待","准备","通过","好","接口","。","一个","比如","可以","对应","充满","图像","我们","网线","应用","开发","模块","状态","派","继续","影响","快","然后","速度","，"],"title":"旭日X3派配置","title_tokens":["旭日","x3","派","配置"]},{"location":"hhp/5.1_%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%BB%8B%E7%BB%8D/#usb","text":"关于相机的驱动，请大家也再确认一下，这是后续视觉处理的基础。 如果是USB相机的话，可以参考这个过程验证下是否可以顺利看到图像。 # 旭日X3派 $ sudo apt install ros-foxy-usb-cam $ cd /opt/tros $ python3 create_soft_link.py --foxy /opt/ros/foxy/ --tros /opt/tros $ source /opt/tros/local_setup.bash $ ros2 launch usb_cam demo_launch.py # 修改params.yaml配置文件中的设备号 # PC $ source /opt/ros/foxy/local_setup.bash $ ros2 run rqt_image_view rqt_image_view","text_tokens":["python3","一下","run","/","处理","也","ros2","确认","配置","py","create",".","usb","是否","link","大家","--","opt","相机","install","bash","旭日","sudo","ros","cd","参考","-","$","#","驱动","如果","x3","tros","修改","基础","params","后续","是","这个","文件","的","过程"," ","顺利","launch","号","再","yaml","rqt","这是","中","看到","source","pc","视觉","cam","关于","_","apt","验证","view","image","的话","请","foxy","。","demo","可以","图像","local","soft","设备","下","派","setup","，","配置文件"],"title":"USB相机图像采集","title_tokens":["usb","相机","图像","采集"]},{"location":"hhp/5.1_%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E4%BB%8B%E7%BB%8D/#mipi","text":"如果使用的是MIPI相机的话，可以参考这个流程驱动相机并显示图像。 # 旭日X3派 $ source /opt/tros/local_setup.bash $ ros2 run mipi_cam mipi_cam --ros-args -p video_device: = F37 -p image_width: = 960 -p image_height: = 540 # PC $ source /opt/ros/foxy/local_setup.bash $ ros2 run rqt_image_view rqt_image_view 为了提高图像的编码和传输效率，我们建议大家使用MIPI接口的相机，后续应用功能我们也会以该相机为主。","text_tokens":["编码","效率","的话","run","=",":","的","bash","提高"," ","/","也","device","为了","旭日","p","ros2","ros","height","foxy","mipi","接口","该","。","args","rqt",".","可以","video","图像","local","参考","建议","source","我们","传输","以","pc","-","f37","$","#","为主","会","驱动","cam","显示","应用","使用","流程","如果","大家","x3","派","setup","960","相机","_","功能","tros","和","并","width","view","，","image","--","后续","是","opt","这个","540"],"title":"MIPI相机图像采集","title_tokens":["采集","相机","图像","mipi"]},{"location":"hhp/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/","text":"CV图像加速处理 OpenCV是一个著名的机器视觉处理库，相信大家都有听过，这个库中有很多图像处理的基础算法，比如灰度变化、图像滤波等，不过这个库为了保证较好的通用性，主要通过软件实现各种算法，TogetherROS对此作了大量优化，我们一起来看看。 TogetherROS视觉加速 TogetherROS中集成了地平线Hobot CV视觉加速库，通过底层芯片中的硬件引擎，软硬件协同，可以提升常用CV算子的性能，降低系统资源的消耗，例如高斯滤波、图像缩放、畸变校正等常用的视觉处理方法。 而且在接口风格上兼容OpenCV，可以做到与OpenCV混合编程，便于视觉应用的开发。 具体测试CV加速库的效率，与OpenCV中软件实现的效率进行对比，我们分别对比图像缩放的帧率，图像旋转的帧率，高斯滤波的帧率，通过Hobot CV视觉加速库运行的帧率可以做到OpenCV的2到3倍，甚至更多倍。 效果这么好，具体该如何使用呢？ 高斯滤波 我们先来看下图像处理中常用的高斯滤波算法，OpenCV和hobotcv，正面PK一下，我们也看看在程序中如何使用hobotcv的图像处理加速算法。 运行示例程序 $ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/hobot_cv/config/ . $ ros2 launch hobot_cv hobot_cv_gaussian_blur.launch.py 代码解析 代码地址：https://c-gitlab.horizon.ai/HHP/box/hobot_cv/-/blob/develop/test/test_gaussian_blur.cpp // Copyright (c) 2021 Horizon Robotics.All Rights Reserved. // // The material in this file is confidential and contains trade secrets // of Horizon Robotics Inc. This is proprietary information owned by // Horizon Robotics Inc. No part of this work may be disclosed, // reproduced, copied, transmitted, or used in any way for any purpose, // without the express written permission of Horizon Robotics Inc. #include <algorithm> #include <chrono> #include <fstream> #include <iomanip> #include <iostream> #include <iterator> #include <map> #include <queue> #include <utility> #include \"hobotcv_gaussian_blur.h\" #include \"opencv2/core/mat.hpp\" #include \"opencv2/imgcodecs.hpp\" #include \"opencv2/imgproc.hpp\" void analyse_result ( cv :: Mat & out_filter , cv :: Mat & cls_filter , std :: string flag_name ) { auto start_time = std :: chrono :: steady_clock :: now (); std :: cout << \"\" << std :: endl ; std :: cout << \"analyse_result start \" << std :: endl ; std :: cout << \"---------\" << flag_name << std :: endl ; std :: cout << \"out_filter type:\" << out_filter . type () << \",cols:\" << out_filter . cols << \",rows:\" << out_filter . rows << \",channel:\" << out_filter . channels () << std :: endl ; std :: cout << \"cls_filter type:\" << cls_filter . type () << \",cols:\" << cls_filter . cols << \",rows:\" << cls_filter . rows << \",channel:\" << cls_filter . channels () << std :: endl ; double minvalue , maxvalue ; cv :: Point mixIdx , maxIdx ; cv :: minMaxLoc ( out_filter , & minvalue , & maxvalue , & mixIdx , & maxIdx ); std :: cout << \"out_filter minvalue:\" << minvalue << \",max:\" << maxvalue << std :: endl ; std :: cout << \"out_filter min,x:\" << mixIdx . x << \",y:\" << mixIdx . y << std :: endl ; std :: cout << \"out_filter max,x:\" << maxIdx . x << \",y:\" << maxIdx . y << std :: endl ; cv :: minMaxLoc ( cls_filter , & minvalue , & maxvalue , & mixIdx , & maxIdx ); std :: cout << \"cls_filter minvalue:\" << minvalue << \",max:\" << maxvalue << std :: endl ; std :: cout << \"cls_filter min,x:\" << mixIdx . x << \",y:\" << mixIdx . y << std :: endl ; std :: cout << \"cls_filter max,x:\" << maxIdx . x << \",y:\" << maxIdx . y << std :: endl ; cv :: Mat mat_diff = cv :: abs ( out_filter - cls_filter ); cv :: Scalar sum_error = cv :: sum ( mat_diff >= 1 ); cv :: Scalar mean_error = cv :: sum ( mat_diff ) / ( mat_diff . rows * mat_diff . cols ); cv :: minMaxLoc ( mat_diff , & minvalue , & maxvalue , & mixIdx , & maxIdx ); std :: cout << \"\" << std :: endl ; std :: cout << \"diff diff diff\" << std :: endl ; std :: cout << \"mat_diff minvalue:\" << minvalue << \",max:\" << maxvalue << std :: endl ; std :: cout << \"mat_diff min,x:\" << mixIdx . x << \",y:\" << mixIdx . y << std :: endl ; std :: cout << \"mat_diff max,x:\" << maxIdx . x << \",y:\" << maxIdx . y << std :: endl ; std :: cout << \"\" << std :: endl ; std :: cout << \"error sum:\" << sum_error [ 0 ] << \",max:\" << maxvalue << \",mean_error:\" << mean_error [ 0 ] << std :: endl ; int time_used_ms_end = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( std :: chrono :: steady_clock :: now () - start_time ) . count (); std :: cout << \"analyse_result,time_used_ms_end:\" << time_used_ms_end << std :: endl ; std :: cout << \"analyse_result end \" << std :: endl ; std :: cout << \"\" << std :: endl ; } int main () { int32_t ret = -1 ; HobotGaussianBlurParam blur_param ; HOBOTCV_INITIALIZE_GAUSSIAN_BLUR_PARAM ( & blur_param ); HobotCVGaussianBlurHandle handle ; ret = HobotCVGaussianBlurCreate ( blur_param , & handle ); if ( ret < 0 ) { printf ( \"HobotCVGaussianBlurCreate failed, error msg:%d \\n \" , ret ); return -1 ; } for ( int i = 0 ; i < 5 ; i ++ ) { std :: string m_tof_file_s = \"images/frame1_\" + std :: to_string ( i ) + \".jpg\" ; std :: cout << \"===================\" << std :: endl ; std :: cout << \"image name :\" << m_tof_file_s << std :: endl ; cv :: Mat src = cv :: imread ( m_tof_file_s , CV_16UC1 ); cv :: Mat dst ; cv :: medianBlur ( src , src , 3 ); auto start_time_infe = std :: chrono :: steady_clock :: now (); ret = HobotCVGaussianBlurProcess ( handle , & src , & dst ); if ( ret < 0 ) { printf ( \"HobotCVGaussianBlurProcess failed, error msg:%d \\n \" , ret ); return -1 ; } int infe_time = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now () - start_time_infe ). count (); std :: cout << \"infe cost time:\" << infe_time << std :: endl ; auto start_time_gauss = std :: chrono :: steady_clock :: now (); cv :: Mat gaussian_tof ; cv :: GaussianBlur ( src , gaussian_tof , cv :: Size ( 3 , 3 ), 0 , 0 , cv :: BORDER_REPLICATE ); int guss_time = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now () - start_time_gauss ). count (); std :: cout << \"guss_time cost time:\" << guss_time << std :: endl ; float save_rate = float (( guss_time * 1.0 - infe_time * 1.0 ) / guss_time ); std :: cout << \"hobotcv save rate:\" << save_rate << std :: endl ; analyse_result ( dst , gaussian_tof , \"GaussianBlur\" ); std :: cout << \"-------------------------\" << std :: endl ; std :: cout << \"\" << std :: endl ; } ret = HobotCVGaussianBlurDestroy ( handle ); if ( ret < 0 ) { printf ( \"HobotCVGaussianBlurDestroy failed, error msg:%d \\n \" , ret ); return -1 ; } return 0 ; } 图像裁剪与缩放 再来看另外一个案例，图像的裁剪与缩放，比如这样一幅图片，我们尝试剪裁左上角的一小块图像出来，或者对裁剪的某一块图像放大来看看。 运行示例程序 # 配置TogetherROS环境 source /opt/tros/setup.bash # 从TogetherROS的安装路径中拷贝出运行示例需要的模型和配置文件。 cp -r /opt/tros/lib/hobot_cv/config/ . # 启动launch文件 ros2 launch hobot_cv hobot_cv_crop_resize.launch.py 代码解析 代码地址：https://c-gitlab.horizon.ai/HHP/box/hobot_cv/-/blob/develop/src/test.cpp // Copyright (c) 2021 Horizon Robotics.All Rights Reserved. // // The material in this file is confidential and contains trade secrets // of Horizon Robotics Inc. This is proprietary information owned by // Horizon Robotics Inc. No part of this work may be disclosed, // reproduced, copied, transmitted, or used in any way for any purpose, // without the express written permission of Horizon Robotics Inc. #include \"include/hobotcv_imgproc.h\" #include \"include/utils.h\" #include \"opencv2/core/mat.hpp\" #include \"opencv2/core/types.hpp\" #include \"opencv2/imgcodecs.hpp\" #include \"opencv2/opencv.hpp\" #include <fstream> #include <string> #include <chrono> #include <iostream> void writeImg ( cv :: Mat & mat , std :: string imgfile ) { cv :: Mat img_bgr ; cv :: cvtColor ( mat , img_bgr , cv :: COLOR_YUV2BGR_NV12 ); cv :: imwrite ( imgfile , img_bgr ); } int main () { std :: string image_file = \"config/test.jpg\" ; cv :: Mat bgr_mat = cv :: imread ( image_file , cv :: IMREAD_COLOR ); auto src_height = bgr_mat . rows ; auto src_width = bgr_mat . cols ; cv :: Mat srcmat_nv12 ; BGRToNv12 ( bgr_mat , srcmat_nv12 ); auto dst_height = src_height / 2 ; auto dst_width = src_width / 2 ; cv :: Mat dstmat_nv12 ( dst_height * 3 / 2 , dst_width , CV_8UC1 ); auto before_resize = std :: chrono :: system_clock :: now (); auto ret = hobot_cv :: hobotcv_resize ( srcmat_nv12 , src_height , src_width , dstmat_nv12 , dst_height , dst_width ); auto after_resize = std :: chrono :: system_clock :: now (); auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( after_resize - before_resize ). count (); if ( 0 == ret ) { std :: cout << \"resize finish, time: \" << interval << \"ms\" << std :: endl ; } writeImg ( dstmat_nv12 , \"./resize.jpg\" ); auto before_crop = std :: chrono :: system_clock :: now (); auto cropmat = hobot_cv :: hobotcv_crop ( srcmat_nv12 , src_height , src_width , 200 , 200 , cv :: Range ( 0 , 200 ), cv :: Range ( 0 , 200 )); auto after_crop = std :: chrono :: system_clock :: now (); interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( after_crop - before_crop ). count (); std :: cout << \"crop finish, time: \" << interval << \"ms\" << std :: endl ; writeImg ( cropmat , \"./crop.jpg\" ); auto before_cropResize = std :: chrono :: system_clock :: now (); auto cropResizemat = hobot_cv :: hobotcv_crop ( srcmat_nv12 , src_height , src_width , src_height , src_width , cv :: Range ( 200 , 400 ), cv :: Range ( 200 , 400 )); auto after_cropResize = std :: chrono :: system_clock :: now (); interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( after_cropResize - before_cropResize ). count (); std :: cout << \"cropResize finish, time: \" << interval << \"ms\" << std :: endl ; writeImg ( cropResizemat , \"./cropResize.jpg\" ); return 0 ; }","text_tokens":["著名","out","queue","处理","配置","保证","分别","failed","https","used","any","对比","dstmat","hobot","be","s","handle",",","yuv2bgr","校正","小块","main",")","clock","float","trade","为了","count","到",";","imread","channel","\"","#","way","include","解析","需要","这个","路径","有","资源","name","文件","的","系统","风格","该","集成","diff","中","frame1","source","方法","裁剪","cast","border","initialize","y","cpp","hobotcvgaussianblurhandle","程序","上","image","看看","算法","尝试","gaussian",":","express","帧","by","of","案例","---------","。","part","一个","disclosed","hobotcvgaussianblurprocess","reproduced","n","缩放","应用","下","width","contains","hpp","一","对此","软件","ai","}","3","hobotcvgaussianblurdestroy","一小块","the","通用","也","proprietary","、","return","sum","endl","各种","相信","py","系统资源",".","save","出","start","iostream","type","实现","cls","cropresizemat","bgrtonv12","src","interval","pk","过","types","具体","这么","images","maxidx","出来","软硬件","$","bgr","底层","point","库中","double","另外","启动","i","void","是","information","效率","大量","cost","提升","ms","launch","先","is","+","再","confidential","较","abs","或者","x","permission","h","多倍","blur","opencv2","resize","_","呢","fstream","opencv","和","芯片","material","min","tof","written","甚至","剪裁","接口","代码","模型","与","从","图像","lib","hobotgaussianblurparam","我们","maxvalue","0","map","chrono","gitlab","：","setup","transmitted","rights","效果",">","，","1","配置文件","box","cvtcolor","2021","5","如何","不过","gaussianblur","t","来看","utility","畸变","param","常用","进行","cropresize","(","img","主要","库","灰度","=","max","to","协同","加速","scalar","滤波","before","secrets","软硬","work","color","crop","may","in","size","硬件","filter","消耗","iomanip","都","d","*","nv12","c","analyse","copied","hhp","地址","imgcodecs","作","jpg","m","copyright","test","例如","率","使用","owned","mixidx","milliseconds","blob","hobotcvgaussianblurcreate","而且","or","%","200","左上角","{","++","&","minvalue","msg","dst","一块","可以","mean","一小","环境","without","性能","time","printf","安装","做到","更","config","gauss","]","一下","/","拷贝","对","algorithm","togetherros","ros2","system","no","图像处理","降低","develop","cv","this","horizon","[","等","inc","通用性","r","大家","string","上角","运行","起来","after","opt","imgfile","16uc1","1.0","左上","channels","bash","<","示例","result","for","writeimg","cout","medianblur","400","minmaxloc","算子","-","地平","rows","这样","utils","imwrite","tros","基础","ret","int","了","rate","now","flag","机器","infe","听","？","reserved"," ","编程","range","srcmat","测试","在","很多","兼容","height","iterator","\\","int32","std","duration","steady","视觉","file","-------------------------","8uc1","便于","error","高斯","放大","hobotcv","一幅","robotics","finish","倍","mat","microseconds","来","变化","end","地平线","all","cp","通过","guss","好","replicate","imgproc","core","优化","比如","2","某","cropmat","正面","auto","旋转","图片","引擎","cols","and","purpose","开发","if","混合"],"title":"CV图像处理加速","title_tokens":["加速","图像处理","处理","cv","图像"]},{"location":"hhp/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#cv","text":"OpenCV是一个著名的机器视觉处理库，相信大家都有听过，这个库中有很多图像处理的基础算法，比如灰度变化、图像滤波等，不过这个库为了保证较好的通用性，主要通过软件实现各种算法，TogetherROS对此作了大量优化，我们一起来看看。","text_tokens":["过","著名","库","有","机器","灰度","一","对此","听","软件","的","通用","处理","变化","大量","为了","togetherros","通过","保证","、","很多","好","滤波","。","不过","一个","较","算法","图像处理","比如","各种","作","优化","相信","图像","我们","实现","视觉","等","通用性","大家","都","库中","opencv","基础","了","起来","，","看看","主要","是","这个"],"title":"CV图像加速处理","title_tokens":["加速","处理","cv","图像"]},{"location":"hhp/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#togetherros","text":"TogetherROS中集成了地平线Hobot CV视觉加速库，通过底层芯片中的硬件引擎，软硬件协同，可以提升常用CV算子的性能，降低系统资源的消耗，例如高斯滤波、图像缩放、畸变校正等常用的视觉处理方法。 而且在接口风格上兼容OpenCV，可以做到与OpenCV混合编程，便于视觉应用的开发。 具体测试CV加速库的效率，与OpenCV中软件实现的效率进行对比，我们分别对比图像缩放的帧率，图像旋转的帧率，高斯滤波的帧率，通过Hobot CV视觉加速库运行的帧率可以做到OpenCV的2到3倍，甚至更多倍。 效果这么好，具体该如何使用呢？","text_tokens":["更","软件","3","处理","togetherros","分别","、","如何","降低","系统资源","对比","cv","畸变","hobot","实现","常用","进行","等","运行","校正","库","协同","加速","具体","滤波","到","软硬","这么","软硬件","算子","地平","底层","硬件","消耗","了","资源","效率","？","的"," ","编程","系统","提升","测试","风格","在","兼容","该","集成","中","视觉","方法","多倍","便于","例如","率","使用","高斯","呢","opencv","上","芯片","而且","倍","做到","甚至","帧","地平线","通过","好","接口","。","与","2","旋转","可以","引擎","图像","我们","缩放","应用","开发","性能","效果","，","混合"],"title":"TogetherROS视觉加速","title_tokens":["加速","视觉","togetherros"]},{"location":"hhp/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#_1","text":"我们先来看下图像处理中常用的高斯滤波算法，OpenCV和hobotcv，正面PK一下，我们也看看在程序中如何使用hobotcv的图像处理加速算法。","text_tokens":["一下","的","处理","也","先","在","加速","滤波","如何","。","图像处理","正面","来看","图像","中","我们","常用","使用","高斯","下","opencv","程序","和","hobotcv","，","看看","算法","pk"],"title":"高斯滤波","title_tokens":["滤波","高斯"]},{"location":"hhp/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#_2","text":"$ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/hobot_cv/config/ . $ ros2 launch hobot_cv hobot_cv_gaussian_blur.launch.py","text_tokens":["config","gaussian","bash"," ","/","launch","ros2","cp","py",".","cv","lib","source","hobot","-","$","blur","r","setup","_","tros","opt"],"title":"运行示例程序","title_tokens":["示例","程序","运行"]},{"location":"hhp/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#_3","text":"代码地址：https://c-gitlab.horizon.ai/HHP/box/hobot_cv/-/blob/develop/test/test_gaussian_blur.cpp // Copyright (c) 2021 Horizon Robotics.All Rights Reserved. // // The material in this file is confidential and contains trade secrets // of Horizon Robotics Inc. This is proprietary information owned by // Horizon Robotics Inc. No part of this work may be disclosed, // reproduced, copied, transmitted, or used in any way for any purpose, // without the express written permission of Horizon Robotics Inc. #include <algorithm> #include <chrono> #include <fstream> #include <iomanip> #include <iostream> #include <iterator> #include <map> #include <queue> #include <utility> #include \"hobotcv_gaussian_blur.h\" #include \"opencv2/core/mat.hpp\" #include \"opencv2/imgcodecs.hpp\" #include \"opencv2/imgproc.hpp\" void analyse_result ( cv :: Mat & out_filter , cv :: Mat & cls_filter , std :: string flag_name ) { auto start_time = std :: chrono :: steady_clock :: now (); std :: cout << \"\" << std :: endl ; std :: cout << \"analyse_result start \" << std :: endl ; std :: cout << \"---------\" << flag_name << std :: endl ; std :: cout << \"out_filter type:\" << out_filter . type () << \",cols:\" << out_filter . cols << \",rows:\" << out_filter . rows << \",channel:\" << out_filter . channels () << std :: endl ; std :: cout << \"cls_filter type:\" << cls_filter . type () << \",cols:\" << cls_filter . cols << \",rows:\" << cls_filter . rows << \",channel:\" << cls_filter . channels () << std :: endl ; double minvalue , maxvalue ; cv :: Point mixIdx , maxIdx ; cv :: minMaxLoc ( out_filter , & minvalue , & maxvalue , & mixIdx , & maxIdx ); std :: cout << \"out_filter minvalue:\" << minvalue << \",max:\" << maxvalue << std :: endl ; std :: cout << \"out_filter min,x:\" << mixIdx . x << \",y:\" << mixIdx . y << std :: endl ; std :: cout << \"out_filter max,x:\" << maxIdx . x << \",y:\" << maxIdx . y << std :: endl ; cv :: minMaxLoc ( cls_filter , & minvalue , & maxvalue , & mixIdx , & maxIdx ); std :: cout << \"cls_filter minvalue:\" << minvalue << \",max:\" << maxvalue << std :: endl ; std :: cout << \"cls_filter min,x:\" << mixIdx . x << \",y:\" << mixIdx . y << std :: endl ; std :: cout << \"cls_filter max,x:\" << maxIdx . x << \",y:\" << maxIdx . y << std :: endl ; cv :: Mat mat_diff = cv :: abs ( out_filter - cls_filter ); cv :: Scalar sum_error = cv :: sum ( mat_diff >= 1 ); cv :: Scalar mean_error = cv :: sum ( mat_diff ) / ( mat_diff . rows * mat_diff . cols ); cv :: minMaxLoc ( mat_diff , & minvalue , & maxvalue , & mixIdx , & maxIdx ); std :: cout << \"\" << std :: endl ; std :: cout << \"diff diff diff\" << std :: endl ; std :: cout << \"mat_diff minvalue:\" << minvalue << \",max:\" << maxvalue << std :: endl ; std :: cout << \"mat_diff min,x:\" << mixIdx . x << \",y:\" << mixIdx . y << std :: endl ; std :: cout << \"mat_diff max,x:\" << maxIdx . x << \",y:\" << maxIdx . y << std :: endl ; std :: cout << \"\" << std :: endl ; std :: cout << \"error sum:\" << sum_error [ 0 ] << \",max:\" << maxvalue << \",mean_error:\" << mean_error [ 0 ] << std :: endl ; int time_used_ms_end = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( std :: chrono :: steady_clock :: now () - start_time ) . count (); std :: cout << \"analyse_result,time_used_ms_end:\" << time_used_ms_end << std :: endl ; std :: cout << \"analyse_result end \" << std :: endl ; std :: cout << \"\" << std :: endl ; } int main () { int32_t ret = -1 ; HobotGaussianBlurParam blur_param ; HOBOTCV_INITIALIZE_GAUSSIAN_BLUR_PARAM ( & blur_param ); HobotCVGaussianBlurHandle handle ; ret = HobotCVGaussianBlurCreate ( blur_param , & handle ); if ( ret < 0 ) { printf ( \"HobotCVGaussianBlurCreate failed, error msg:%d \\n \" , ret ); return -1 ; } for ( int i = 0 ; i < 5 ; i ++ ) { std :: string m_tof_file_s = \"images/frame1_\" + std :: to_string ( i ) + \".jpg\" ; std :: cout << \"===================\" << std :: endl ; std :: cout << \"image name :\" << m_tof_file_s << std :: endl ; cv :: Mat src = cv :: imread ( m_tof_file_s , CV_16UC1 ); cv :: Mat dst ; cv :: medianBlur ( src , src , 3 ); auto start_time_infe = std :: chrono :: steady_clock :: now (); ret = HobotCVGaussianBlurProcess ( handle , & src , & dst ); if ( ret < 0 ) { printf ( \"HobotCVGaussianBlurProcess failed, error msg:%d \\n \" , ret ); return -1 ; } int infe_time = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now () - start_time_infe ). count (); std :: cout << \"infe cost time:\" << infe_time << std :: endl ; auto start_time_gauss = std :: chrono :: steady_clock :: now (); cv :: Mat gaussian_tof ; cv :: GaussianBlur ( src , gaussian_tof , cv :: Size ( 3 , 3 ), 0 , 0 , cv :: BORDER_REPLICATE ); int guss_time = std :: chrono :: duration_cast < std :: chrono :: microseconds > ( std :: chrono :: steady_clock :: now () - start_time_gauss ). count (); std :: cout << \"guss_time cost time:\" << guss_time << std :: endl ; float save_rate = float (( guss_time * 1.0 - infe_time * 1.0 ) / guss_time ); std :: cout << \"hobotcv save rate:\" << save_rate << std :: endl ; analyse_result ( dst , gaussian_tof , \"GaussianBlur\" ); std :: cout << \"-------------------------\" << std :: endl ; std :: cout << \"\" << std :: endl ; } ret = HobotCVGaussianBlurDestroy ( handle ); if ( ret < 0 ) { printf ( \"HobotCVGaussianBlurDestroy failed, error msg:%d \\n \" , ret ); return -1 ; } return 0 ; }","text_tokens":["hpp","out","gauss","]","ai","}","3","hobotcvgaussianblurdestroy","/","queue","the","proprietary","algorithm","return","sum","2021","no","failed","https","5","gaussianblur","endl","used","any","develop","t",".","save","cv","utility","start","iostream","type","this","hobot","param","horizon","[","inc","cls","be","s","handle","src",",","string","(","main","16uc1","1.0","channels","=",")","max","<","clock","to","float","trade","result","count","for","scalar","cout","secrets",";","medianblur","work","imread","images","maxidx","channel","may","minmaxloc","\"","in","-","#","rows","size","point","filter","way","iomanip","include","ret","int","double","d","rate","now","*","void","i","flag","information","name","infe","c"," ","reserved","copied","analyse","cost","ms","hhp","is","+","confidential","地址","imgcodecs","diff","abs","m","jpg","copyright","iterator","x","\\","int32","std","permission","frame1","duration","steady","file","-------------------------","test","h","blur","owned","opencv2","cast","error","border","_","mixidx","fstream","initialize","y","milliseconds","blob","cpp","hobotcvgaussianblurhandle","hobotcvgaussianblurcreate","hobotcv","material","min","image","robotics","or","mat","microseconds","tof","%","gaussian","express",":","written","by","of","end","{","++","all","---------","&","minvalue","guss","msg","dst","replicate","core","part","代码","disclosed","imgproc","hobotcvgaussianblurprocess","reproduced","n","auto","mean","cols","hobotgaussianblurparam","and","maxvalue","purpose","0","without","map","chrono","gitlab","if","：","time","printf","transmitted","rights",">","contains","1","box"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"hhp/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#_4","text":"再来看另外一个案例，图像的裁剪与缩放，比如这样一幅图片，我们尝试剪裁左上角的一小块图像出来，或者对裁剪的某一块图像放大来看看。","text_tokens":["左上","尝试","的","来","一小块","左上角","案例","对","剪裁","再","一块","一个","与","。","比如","某","或者","来看","出来","图片","图像","我们","缩放","一小","这样","裁剪","上角","放大","另外","，","一幅","小块","看看"],"title":"图像裁剪与缩放","title_tokens":["裁剪","图像","缩放","与"]},{"location":"hhp/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#_5","text":"# 配置TogetherROS环境 source /opt/tros/setup.bash # 从TogetherROS的安装路径中拷贝出运行示例需要的模型和配置文件。 cp -r /opt/tros/lib/hobot_cv/config/ . # 启动launch文件 ros2 launch hobot_cv hobot_cv_crop_resize.launch.py","text_tokens":["路径","config","文件","bash","的"," ","/","拷贝","示例","launch","togetherros","配置","cp","ros2","。","模型","从","py",".","出","cv","中","lib","crop","source","hobot","-","#","环境","r","resize","setup","_","安装","tros","运行","和","需要","启动","opt","配置文件"],"title":"运行示例程序","title_tokens":["示例","程序","运行"]},{"location":"hhp/5.2_CV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%8A%A0%E9%80%9F/#_6","text":"代码地址：https://c-gitlab.horizon.ai/HHP/box/hobot_cv/-/blob/develop/src/test.cpp // Copyright (c) 2021 Horizon Robotics.All Rights Reserved. // // The material in this file is confidential and contains trade secrets // of Horizon Robotics Inc. This is proprietary information owned by // Horizon Robotics Inc. No part of this work may be disclosed, // reproduced, copied, transmitted, or used in any way for any purpose, // without the express written permission of Horizon Robotics Inc. #include \"include/hobotcv_imgproc.h\" #include \"include/utils.h\" #include \"opencv2/core/mat.hpp\" #include \"opencv2/core/types.hpp\" #include \"opencv2/imgcodecs.hpp\" #include \"opencv2/opencv.hpp\" #include <fstream> #include <string> #include <chrono> #include <iostream> void writeImg ( cv :: Mat & mat , std :: string imgfile ) { cv :: Mat img_bgr ; cv :: cvtColor ( mat , img_bgr , cv :: COLOR_YUV2BGR_NV12 ); cv :: imwrite ( imgfile , img_bgr ); } int main () { std :: string image_file = \"config/test.jpg\" ; cv :: Mat bgr_mat = cv :: imread ( image_file , cv :: IMREAD_COLOR ); auto src_height = bgr_mat . rows ; auto src_width = bgr_mat . cols ; cv :: Mat srcmat_nv12 ; BGRToNv12 ( bgr_mat , srcmat_nv12 ); auto dst_height = src_height / 2 ; auto dst_width = src_width / 2 ; cv :: Mat dstmat_nv12 ( dst_height * 3 / 2 , dst_width , CV_8UC1 ); auto before_resize = std :: chrono :: system_clock :: now (); auto ret = hobot_cv :: hobotcv_resize ( srcmat_nv12 , src_height , src_width , dstmat_nv12 , dst_height , dst_width ); auto after_resize = std :: chrono :: system_clock :: now (); auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( after_resize - before_resize ). count (); if ( 0 == ret ) { std :: cout << \"resize finish, time: \" << interval << \"ms\" << std :: endl ; } writeImg ( dstmat_nv12 , \"./resize.jpg\" ); auto before_crop = std :: chrono :: system_clock :: now (); auto cropmat = hobot_cv :: hobotcv_crop ( srcmat_nv12 , src_height , src_width , 200 , 200 , cv :: Range ( 0 , 200 ), cv :: Range ( 0 , 200 )); auto after_crop = std :: chrono :: system_clock :: now (); interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( after_crop - before_crop ). count (); std :: cout << \"crop finish, time: \" << interval << \"ms\" << std :: endl ; writeImg ( cropmat , \"./crop.jpg\" ); auto before_cropResize = std :: chrono :: system_clock :: now (); auto cropResizemat = hobot_cv :: hobotcv_crop ( srcmat_nv12 , src_height , src_width , src_height , src_width , cv :: Range ( 200 , 400 ), cv :: Range ( 200 , 400 )); auto after_cropResize = std :: chrono :: system_clock :: now (); interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( after_cropResize - before_cropResize ). count (); std :: cout << \"cropResize finish, time: \" << interval << \"ms\" << std :: endl ; writeImg ( cropResizemat , \"./cropResize.jpg\" ); return 0 ; }","text_tokens":["hpp","config","ai","}","3","cvtcolor","/","the","proprietary","system","return","2021","no","https","endl","used","any","develop",".","cv","dstmat","iostream","this","hobot","horizon","inc","be","cropresizemat","bgrtonv12","src","cropresize",",","string","(","img","interval","yuv2bgr","after","main","imgfile","types","=",")","<","clock","trade","count","for","writeimg","before","cout","secrets",";","work","imread","color","400","crop","may","\"","in","-","#","bgr","rows","utils","imwrite","way","include","ret","int","now","*","void","information","nv12","c"," ","reserved","copied","range","srcmat","ms","hhp","is","height","confidential","地址","imgcodecs","jpg","copyright","std","permission","duration","file","test","h","8uc1","owned","opencv2","resize","cast","_","fstream","opencv","milliseconds","blob","cpp","hobotcv","material","image","robotics","finish","or","mat",":","express","written","200","by","of","{","all","&","dst","imgproc","part","代码","disclosed","core","2","reproduced","cropmat","auto","cols","and","purpose","0","without","chrono","gitlab","if","：","time","transmitted","rights","width",">","contains","box"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"hhp/5.3_%E6%A8%A1%E5%9E%8B%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6/","text":"模型推理框架 智能机器人与机器学习是紧密相连的，机器学习又可以分成数据采集、标注、训练、推理等环节，其中数据的训练需要消耗大量算力，适合在服务器或者云端进行，不过训练好的模型可是要部署到机器人端进行推理运算的，所以模型推理的效率如何，直接决定了机器人视觉处理的效率，这刚好是TogetherROS所擅长的地方。 Hobot DNN模型推理库 TogetherROS集成了Hobot DNN模型推理库，集成了众多开源模型，借助底层芯片中的AI引擎BPU，提供充足的算力保障，开发者实际使用中，就不用花费很多时间在模型的调教和数据的训练上，基于这套系统，很快就可以部署人工智能应用啦。 hobot_dnn是在地平线X3开发板上利用BPU处理器实现AI推理功能，基于地平线EasyDNN和ROS2 Node进行二次开发，为应用开发提供更简单易用的模型集成开发接口，包括模型管理、基于模型描述的输入处理及结果解析，以及模型输出内存分配管理等功能。 关于hobot_dnn的使用逻辑流程如这张图所示，供大家参考，我们后续也会通过具体的案例解释代码的实现过程。 算法与应用库 在Hobot DNN模型推理库的基础上，地平线还提供了一套基于TogetherROS系统的AI算法包，称为BOXs，这样我们就不需要从零构建算法，基于这些标准而高效的算法，可以更关注应用层面的APP开发。 从这张图中我们可以看到，这套AI算法包中包含两大块，一个是基础算法，一个是应用算法。 基础算法中主要是图像分类、语义分割和目标检测这些常用的算法，应用层面就会基于这些算法和某些场景，动态实现更为复杂的人体识别、骨骼点识别、手势识别等具体的功能，这些模块就可以和机器人运功功能直接结合，节省了我们开发AI视觉部分的时间。 模型推理测试 这套模型推理和算法库的效果如何呢？ 我们先来体验一个TogetherROS自带的案例，识别这张图片中的人，以及每个人的骨骼关键点。 # 配置TogetherROS环境 $ source /opt/tros/setup.bash # 从tros的安装路径中拷贝出运行示例需要的配置文件。config中为example使用的模型，回灌使用的本地图片 $ cp -r /opt/tros/lib/dnn_node_example/config/ . # 使用本地jpg格式图片通过同步模式进行回环预测，并存储渲染后的图片 $ ros2 launch dnn_node_example hobot_dnn_node_example_feedback.launch.py","text_tokens":["管理","更","config","中为","ai","就","调教","包含","数据","/","拷贝","处理","也","称为","人","togetherros","服务","ros2","配置","、","如何","不过","时间","py","环节","务器",".","出","花费","刚好","描述","后","零","hobot","实现","常用","进行","等","机器人","啦","层面","人工智能","适合","动态","流程","大家","本地","r","bpu","开发板","解释","分配","每个","这张","张图","标准","运行","检测","主要","boxs","opt","所示","同步","库","渲染","feedback","分成","bash","示例","内存","简单","充足","人体","分割","二次","关键","供","紧密","具体","到","开发者","手势","及","理器","关注","example","而","运功","很快","采集","参考","识别","所以","-","地平","语义","#","底层","决定","会","这样","$","回灌","消耗","x3","不用","node","模式","dnn","自带","tros","输出","两大块","保障","解析","基础","构建","高效","了","需要","众多","后续","是","输入","运算","逻辑","路径","处理器","机器","效率","直接","标注","一套","文件","？","回环","的","如","过程"," ","不","大量","系统","基于","包括","测试","launch","先","在","很多","复杂","其中","集成","jpg","或者","部分","结合","为","中","节省","看到","source","视觉","关键点","要","开源","还","提供","使用","服务器","结果","大块","关于","相连","学习","_","可是","框架","功能","呢","和","人工","上","目标","芯片","这","易用","这些","推理","算法","存储","点","算力","二次开发","来","案例","云端","地平线","以及","包","cp","通过","场景","体验","智能","好","app","分类","接口","某些","。","代码","模型","与","又","部署","easydnn","从","一个","格式","借助","可以","图片","引擎","图像","lib","我们","训练","更为","利用","包中","环境","应用","擅长","开发","模块","端","setup","预测","这套","安装","骨骼","所","并","效果","，","实际","配置文件","地方"],"title":"模型推理框架","title_tokens":["推理","模型","框架"]},{"location":"hhp/5.3_%E6%A8%A1%E5%9E%8B%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6/#_1","text":"智能机器人与机器学习是紧密相连的，机器学习又可以分成数据采集、标注、训练、推理等环节，其中数据的训练需要消耗大量算力，适合在服务器或者云端进行，不过训练好的模型可是要部署到机器人端进行推理运算的，所以模型推理的效率如何，直接决定了机器人视觉处理的效率，这刚好是TogetherROS所擅长的地方。","text_tokens":["机器","效率","直接","标注","的","分成","数据","大量","处理","云端","togetherros","服务","在","、","智能","紧密","好","到","其中","如何","。","不过","模型","与","又","部署","或者","环节","务器","可以","采集","刚好","训练","所以","视觉","进行","等","机器人","要","决定","擅长","适合","服务器","端","消耗","地方","相连","学习","可是","所","了","，","需要","这","推理","是","运算","算力"],"title":"模型推理框架","title_tokens":["推理","模型","框架"]},{"location":"hhp/5.3_%E6%A8%A1%E5%9E%8B%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6/#hobot-dnn","text":"TogetherROS集成了Hobot DNN模型推理库，集成了众多开源模型，借助底层芯片中的AI引擎BPU，提供充足的算力保障，开发者实际使用中，就不用花费很多时间在模型的调教和数据的训练上，基于这套系统，很快就可以部署人工智能应用啦。 hobot_dnn是在地平线X3开发板上利用BPU处理器实现AI推理功能，基于地平线EasyDNN和ROS2 Node进行二次开发，为应用开发提供更简单易用的模型集成开发接口，包括模型管理、基于模型描述的输入处理及结果解析，以及模型输出内存分配管理等功能。 关于hobot_dnn的使用逻辑流程如这张图所示，供大家参考，我们后续也会通过具体的案例解释代码的实现过程。","text_tokens":["管理","更","ai","就","调教","数据","处理","也","togetherros","ros2","、","时间","花费","描述","hobot","实现","进行","等","啦","人工智能","流程","大家","bpu","开发板","解释","分配","张图","所示","库","内存","简单","充足","二次","供","具体","开发者","及","理器","很快","参考","地平","底层","会","x3","不用","node","dnn","输出","保障","解析","了","众多","后续","是","输入","逻辑","处理器","的","如","过程"," ","系统","基于","包括","在","很多","集成","为","中","开源","提供","使用","结果","关于","_","功能","和","人工","上","芯片","这","易用","推理","算力","二次开发","案例","地平线","以及","通过","智能","接口","。","代码","模型","部署","easydnn","借助","可以","引擎","我们","训练","利用","应用","开发","这套","，","实际"],"title":"Hobot DNN模型推理库","title_tokens":["库","dnn","hobot","模型"," ","推理"]},{"location":"hhp/5.3_%E6%A8%A1%E5%9E%8B%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6/#_2","text":"在Hobot DNN模型推理库的基础上，地平线还提供了一套基于TogetherROS系统的AI算法包，称为BOXs，这样我们就不需要从零构建算法，基于这些标准而高效的算法，可以更关注应用层面的APP开发。 从这张图中我们可以看到，这套AI算法包中包含两大块，一个是基础算法，一个是应用算法。 基础算法中主要是图像分类、语义分割和目标检测这些常用的算法，应用层面就会基于这些算法和某些场景，动态实现更为复杂的人体识别、骨骼点识别、手势识别等具体的功能，这些模块就可以和机器人运功功能直接结合，节省了我们开发AI视觉部分的时间。","text_tokens":["更","ai","就","包含","称为","togetherros","、","时间","零","hobot","实现","常用","等","机器人","层面","张图","标准","检测","主要","boxs","库","人体","分割","具体","手势","关注","而","运功","识别","地平","语义","会","这样","dnn","两大块","基础","构建","高效","了","需要","是","机器","直接","一套","的"," ","不","系统","基于","在","复杂","部分","结合","中","节省","看到","视觉","还","提供","大块","功能","和","上","目标","这些","这","推理","算法","点","包","地平线","场景","app","分类","某些","。","模型","一个","从","可以","图像","我们","更为","包中","应用","开发","模块","这套","骨骼","，","动态"],"title":"算法与应用库","title_tokens":["应用","算法","与","库"]},{"location":"hhp/5.3_%E6%A8%A1%E5%9E%8B%E6%8E%A8%E7%90%86%E6%A1%86%E6%9E%B6/#_3","text":"这套模型推理和算法库的效果如何呢？ 我们先来体验一个TogetherROS自带的案例，识别这张图片中的人，以及每个人的骨骼关键点。 # 配置TogetherROS环境 $ source /opt/tros/setup.bash # 从tros的安装路径中拷贝出运行示例需要的配置文件。config中为example使用的模型，回灌使用的本地图片 $ cp -r /opt/tros/lib/dnn_node_example/config/ . # 使用本地jpg格式图片通过同步模式进行回环预测，并存储渲染后的图片 $ ros2 launch dnn_node_example hobot_dnn_node_example_feedback.launch.py","text_tokens":["中为","config","/","拷贝","人","togetherros","配置","ros2","如何","py",".","出","后","hobot","进行","r","本地","每个","这张","运行","opt","同步","库","渲染","feedback","bash","示例","关键","example","识别","-","$","#","回灌","node","模式","自带","tros","dnn","需要","路径","文件","？","回环","的"," ","launch","先","jpg","中","source","关键点","使用","_","呢","和","推理","算法","存储","来","案例","以及","cp","通过","体验","。","模型","一个","从","格式","图片","lib","我们","环境","setup","预测","这套","安装","骨骼","并","效果","，","配置文件"],"title":"模型推理测试","title_tokens":["推理","模型","测试"]},{"location":"hhp/5.4_%E5%9B%BE%E5%83%8F%E7%89%A9%E4%BD%93%E5%88%86%E7%B1%BB/","text":"图像物体分类 接下来我们继续学习基于Hobot CNN模型推理库之上的视觉应用。 机器人要感知周边环境，那就得确定看到的图像中都有什么，比如地上有一只猫，旁边有一个桌子之类的，这个猫和桌子就是具体的物体分类啦。 图像分类原理 如果是人来识别一只猫的话，似乎再简单不过了，无论黑猫、白猫还是花猫，我们一眼就可以看出来。 不过这件事对于机器人来讲可没有那么简单，为了能够让机器准确识别一只猫，无数学者可是研究了几十年啊，虽然还赶不上人类的智慧，但是这件事已经没有那么遥不可及了。 比如说我们要让机器识别图像中有一只猫，我们就得先教会机器什么是猫，对此我们就得把各种各样猫的照片给计算机看，目的就是让机器学习，看的越多，识别的也就越准。 我们那里找这么多猫的图片呢？ 大家可能听说过一个著名的视觉对象数据库——ImageNet，里边有超过1400万张标注过的图像，2万多个类别，我们就可以利用这个庞大的数据库，找到很多猫的照片。 然后就搭建神经网络，把这些数据放进去训练了，调教出一套比较好的识别模型。 接下来把这套模型部署到机器人上，之后每当有一幅图像收到之后，就传到这个模型中，也就是模型推理，推理的结果就是类似这样的数据，概率最大的，也就是机器识别到的物体啦。 关于机器学习，理论众多，大家可以学习专门的课程，我们课上还是重点讲解在TogetherROS中的实现方法。 编程开发方法 我们来看这样一张图片，大家很快就可以发现这是一只斑马。 运行示例程序 我们如何用机器来识别它呢，大家先来运行这个案例，这是基于ImageNet数据集训练的模型，可以识别1000种常见的物体，我们看一下效果如何？ $ cd /app/ai_inference/01_basic_sample/ $ sudo python3 ./test_mobilenetv1.py 代码解析 test_mobilenetv1.py： #!/usr/bin/env python3 from hobot_dnn import pyeasy_dnn as dnn import numpy as np import cv2 def bgr2nv12_opencv ( image ): height , width = image . shape [ 0 ], image . shape [ 1 ] area = height * width yuv420p = cv2 . cvtColor ( image , cv2 . COLOR_BGR2YUV_I420 ) . reshape (( area * 3 // 2 ,)) y = yuv420p [: area ] uv_planar = yuv420p [ area :] . reshape (( 2 , area // 4 )) uv_packed = uv_planar . transpose (( 1 , 0 )) . reshape (( area // 2 ,)) nv12 = np . zeros_like ( yuv420p ) nv12 [: height * width ] = y nv12 [ height * width :] = uv_packed return nv12 def print_properties ( pro ): print ( \"tensor type:\" , pro . tensor_type ) print ( \"data type:\" , pro . dtype ) print ( \"layout:\" , pro . layout ) print ( \"shape:\" , pro . shape ) def get_hw ( pro ): if pro . layout == \"NCHW\" : return pro . shape [ 2 ], pro . shape [ 3 ] else : return pro . shape [ 1 ], pro . shape [ 2 ] if __name__ == '__main__' : # test classification result models = dnn . load ( '../models/mobilenetv1_224x224_nv12.bin' ) # test input and output properties print ( \"=\" * 10 , \"inputs[0] properties\" , \"=\" * 10 ) print_properties ( models [ 0 ] . inputs [ 0 ] . properties ) print ( \"inputs[0] name is:\" , models [ 0 ] . inputs [ 0 ] . name ) print ( \"=\" * 10 , \"outputs[0] properties\" , \"=\" * 10 ) print_properties ( models [ 0 ] . outputs [ 0 ] . properties ) print ( \"outputs[0] name is:\" , models [ 0 ] . outputs [ 0 ] . name ) # 打开图片 img_file = cv2 . imread ( './zebra_cls.jpg' ) # 把图片缩放到模型的输入尺寸 # 获取算法模型的输入tensor 的尺寸 h , w = get_hw ( models [ 0 ] . inputs [ 0 ] . properties ) des_dim = ( w , h ) resized_data = cv2 . resize ( img_file , des_dim , interpolation = cv2 . INTER_AREA ) nv12_data = bgr2nv12_opencv ( resized_data ) # 模型推理 outputs = models [ 0 ] . forward ( nv12_data ) print ( \"=\" * 10 , \"Get output[0] numpy data\" , \"=\" * 10 ) print ( \"output[0] buffer numpy info: \" ) print ( \"shape: \" , outputs [ 0 ] . buffer . shape ) print ( \"dtype: \" , outputs [ 0 ] . buffer . dtype ) # print(\"First 10 results:\", outputs[0].buffer[0][:10]) # 从输出结果中得到值最大的那个序号，比如 zebra 就是第 340 个值，应该大于 0.99 print ( \"=\" * 10 , \"Classification result\" , \"=\" * 10 ) assert np . argmax ( outputs [ 0 ] . buffer ) == 340 # 输出类别序号和预测概率值 print ( \"cls id: %d Confidence: %f \" % ( np . argmax ( outputs [ 0 ] . buffer ), outputs [ 0 ] . buffer [ 0 ][ np . argmax ( outputs [ 0 ] . buffer )])) Mobilenetv2物体分类 用图片进行识别不太过瘾，毕竟是静态的图像，没问题，TogetherROS中还提供了实时物体分类的案例，我们继续来体验一下。 为了实时显示视觉识别的效果，这里我们需要启动TogetherROS中的一个web服务器，它会把视觉识别的实时效果，通过网络传输出来，我们直接在浏览器中就可以看到结果啦。也是便于我们开发调试的一个重要工具。 # 启动webserver服务 $ cd /opt/tros/lib/websocket/webservice/ $ chmod +x ./sbin/nginx && ./sbin/nginx -p . 运行例程： $ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/dnn_node_example/config/ . $ cp -r /opt/tros/lib/dnn_benchmark_example/config/runtime/ ./config/ $ ros2 launch /opt/tros/share/dnn_node_example/launch/hobot_dnn_node_example.launch.py config_file: = config/mobilenetv2workconfig.json image_width: = 480 image_height: = 272 在浏览器中登录192.168.1.10，就可以看到分类效果啦：","text_tokens":["得","著名","f","就","它会","dim","imagenet","des","没","info","cnn","hobot","机器人","超过","找到",",","桌子","print","对于","main","开发方法","interpolation",")","就可以看","已经","简单","1000","为了","classification","forward","赶不上","到","..","cd","imread","cv2","sbin","example","缩","\"","多猫","#","个值","如果","dnn","解析","inputs","需要","这个","有","name","斑马","多个","的","各种各样","planar","白猫","data","放到","计算","几十年","这是","中","source","bgr2nv12","收到","方法","340","还","提供","那","可是","周边","y","程序","例程","上","image","算法","目的","这件",":","案例","进去","buffer","。","一个","能够","inference","webserver","__","打开","nchw","接下","应用","事","这套","mobilenetv1","无论","用","width","庞大","chmod","对此","ai","工具","3","万多","也","runtime","、","return","把","np","各种","给","py",".","出","type","可能","实现","cls","zeros","1.10","毕竟","确定","models","猫","原理","过","看","outputs","sudo","课上","值","具体","224x224","这么","出来","对象","识别","$","启动","id","是","越准","0.99","直接","计算机","浏览器","launch","先","is","+","再","教会","resized","x","搭建","课程","h","def","服务器","resize","结果","_","呢","找","opencv","传到","那个","和","讲解","yuv420p","地上","似乎","bin","app","results","numpy","layout","&&","代码","模型","从","图像","lib","旁边","感知","我们","训练","0","中有","!","万张","：","setup","'","bgr2yuv","序号","比如说","效果","，","benchmark","算机","1","发现","准确","sample","python3","大于","cvtcolor","之上","智慧","如何","不过","没有","来看","nginx","usr","集","as","传输","进行","啦","还是","inter","(","img","那里","不可","w","库","可","获取","=","人类","output","但是","不太","问题","share","color","area","类似","pyeasy","都","node","之后","输出","周边环境","4","d","input","*","专门","输入","标注","一套","nv12","神经","基于","遥不可及","实时","jpg","confidence","物体","十年","10","花猫","网络","test","要","尺寸","放进去","like","websocket","i420","这些","%","的话","学者","env","接下来","放进","神经网络","packed","dtype","json","from","应该","可以","tensor","import","利用","环境","那么","预测","继续","得到","然后","basic","数据库","一张","虽然","config","]","一下","调教","数据","/","重要","togetherros","服务","重点","ros2","reshape","properties","越","务器","uv","[","r","大家","1400","一眼","272","它","过瘾","来讲","运行","mobilenetv2workconfig","这里","opt","之类","bash","示例","各样","研究","web","result","最大","p","pro","hw","种","静态","浏览","很快","-","这样","比较","tros","else","了","众多","一只","啊","机器","first","01","调试","？","里边"," ","编程","在","load","很多","height","第","黑猫","看到","多","视觉","file","shape","便于","照片","类别","听说","关于","学习","几十","一幅","推理","transpose","神经网","来","zebra","cp","通过","体验","好","mobilenetv2","分类","就是","什么","assert","部署","比如","2","人来","图片","480","and","get","显示","无数","开发","webservice","每当","if","概率","argmax","万多个","理论","下来","据库","登录","让","常见","—","192.168"],"title":"图像物体分类","title_tokens":["分类","图像","物体"]},{"location":"hhp/5.4_%E5%9B%BE%E5%83%8F%E7%89%A9%E4%BD%93%E5%88%86%E7%B1%BB/#_1","text":"接下来我们继续学习基于Hobot CNN模型推理库之上的视觉应用。 机器人要感知周边环境，那就得确定看到的图像中都有什么，比如地上有一只猫，旁边有一个桌子之类的，这个猫和桌子就是具体的物体分类啦。","text_tokens":["得","之类","库","有","机器","的","就","接下来"," ","地上","基于","之上","具体","分类","。","就是","模型","什么","一个","比如","图像","物体","中","看到","感知","我们","旁边","cnn","hobot","接下","视觉","环境","机器人","要","应用","啦","那","都","学习","下来","周边","确定","继续","周边环境","桌子","和","，","猫","推理","这个","一只"],"title":"图像物体分类","title_tokens":["分类","图像","物体"]},{"location":"hhp/5.4_%E5%9B%BE%E5%83%8F%E7%89%A9%E4%BD%93%E5%88%86%E7%B1%BB/#_2","text":"如果是人来识别一只猫的话，似乎再简单不过了，无论黑猫、白猫还是花猫，我们一眼就可以看出来。 不过这件事对于机器人来讲可没有那么简单，为了能够让机器准确识别一只猫，无数学者可是研究了几十年啊，虽然还赶不上人类的智慧，但是这件事已经没有那么遥不可及了。 比如说我们要让机器识别图像中有一只猫，我们就得先教会机器什么是猫，对此我们就得把各种各样猫的照片给计算机看，目的就是让机器学习，看的越多，识别的也就越准。 我们那里找这么多猫的图片呢？ 大家可能听说过一个著名的视觉对象数据库——ImageNet，里边有超过1400万张标注过的图像，2万多个类别，我们就可以利用这个庞大的数据库，找到很多猫的照片。 然后就搭建神经网络，把这些数据放进去训练了，调教出一套比较好的识别模型。 接下来把这套模型部署到机器人上，之后每当有一幅图像收到之后，就传到这个模型中，也就是模型推理，推理的结果就是类似这样的数据，概率最大的，也就是机器识别到的物体啦。 关于机器学习，理论众多，大家可以学习专门的课程，我们课上还是重点讲解在TogetherROS中的实现方法。","text_tokens":["得","著名","庞大","对此","就","调教","万多","数据","也","togetherros","重点","、","智慧","把","不过","imagenet","没有","各种","给","越","出","可能","实现","机器人","超过","啦","找到","大家","还是","1400","一眼","对于","来讲","那里","不可","猫","过","可","看","就可以看","人类","已经","各样","研究","但是","简单","为了","最大","课上","赶不上","到","这么","出来","对象","多猫","识别","这样","类似","比较","如果","之后","了","众多","是","越准","这个","专门","一只","啊","有","机器","计算机","标注","一套","？","里边","的","多个","神经"," ","各种各样","先","在","遥不可及","很多","再","白猫","教会","黑猫","搭建","计算","几十年","物体","中","十年","课程","多","花猫","视觉","网络","收到","方法","要","还","放进去","照片","类别","结果","听说","关于","学习","找","可是","几十","呢","传到","上","这些","一幅","推理","目的","讲解","这件","的话","神经网","学者","接下来","放进","似乎","神经网络","好","进去","。","就是","什么","一个","模型","部署","比如","2","能够","人来","可以","图像","图片","我们","训练","接下","中有","利用","那么","无数","万张","每当","事","概率","万多个","这套","理论","下来","据库","无论","让","比如说","—","然后","，","数据库","算机","虽然","准确"],"title":"图像分类原理","title_tokens":["原理","图像","分类"]},{"location":"hhp/5.4_%E5%9B%BE%E5%83%8F%E7%89%A9%E4%BD%93%E5%88%86%E7%B1%BB/#_3","text":"我们来看这样一张图片，大家很快就可以发现这是一只斑马。","text_tokens":["我们","斑马","大家","。","就","这样","发现","这是","，","来看","一张","可以","图片","很快","一只"],"title":"编程开发方法","title_tokens":["方法","编程","开发方法","开发"]},{"location":"hhp/5.4_%E5%9B%BE%E5%83%8F%E7%89%A9%E4%BD%93%E5%88%86%E7%B1%BB/#_4","text":"我们如何用机器来识别它呢，大家先来运行这个案例，这是基于ImageNet数据集训练的模型，可以识别1000种常见的物体，我们看一下效果如何？ $ cd /app/ai_inference/01_basic_sample/ $ sudo python3 ./test_mobilenetv1.py","text_tokens":["sample","机器","python3","01","看","一下","？","的","来","ai","数据"," ","/","案例","基于","1000","先","sudo","app","如何","cd","imagenet","模型","种","inference","py",".","可以","这是","物体","集","我们","识别","训练","$","test","大家","_","呢","它","mobilenetv1","用","运行","常见","效果","，","basic","这个"],"title":"运行示例程序","title_tokens":["示例","程序","运行"]},{"location":"hhp/5.4_%E5%9B%BE%E5%83%8F%E7%89%A9%E4%BD%93%E5%88%86%E7%B1%BB/#_5","text":"test_mobilenetv1.py： #!/usr/bin/env python3 from hobot_dnn import pyeasy_dnn as dnn import numpy as np import cv2 def bgr2nv12_opencv ( image ): height , width = image . shape [ 0 ], image . shape [ 1 ] area = height * width yuv420p = cv2 . cvtColor ( image , cv2 . COLOR_BGR2YUV_I420 ) . reshape (( area * 3 // 2 ,)) y = yuv420p [: area ] uv_planar = yuv420p [ area :] . reshape (( 2 , area // 4 )) uv_packed = uv_planar . transpose (( 1 , 0 )) . reshape (( area // 2 ,)) nv12 = np . zeros_like ( yuv420p ) nv12 [: height * width ] = y nv12 [ height * width :] = uv_packed return nv12 def print_properties ( pro ): print ( \"tensor type:\" , pro . tensor_type ) print ( \"data type:\" , pro . dtype ) print ( \"layout:\" , pro . layout ) print ( \"shape:\" , pro . shape ) def get_hw ( pro ): if pro . layout == \"NCHW\" : return pro . shape [ 2 ], pro . shape [ 3 ] else : return pro . shape [ 1 ], pro . shape [ 2 ] if __name__ == '__main__' : # test classification result models = dnn . load ( '../models/mobilenetv1_224x224_nv12.bin' ) # test input and output properties print ( \"=\" * 10 , \"inputs[0] properties\" , \"=\" * 10 ) print_properties ( models [ 0 ] . inputs [ 0 ] . properties ) print ( \"inputs[0] name is:\" , models [ 0 ] . inputs [ 0 ] . name ) print ( \"=\" * 10 , \"outputs[0] properties\" , \"=\" * 10 ) print_properties ( models [ 0 ] . outputs [ 0 ] . properties ) print ( \"outputs[0] name is:\" , models [ 0 ] . outputs [ 0 ] . name ) # 打开图片 img_file = cv2 . imread ( './zebra_cls.jpg' ) # 把图片缩放到模型的输入尺寸 # 获取算法模型的输入tensor 的尺寸 h , w = get_hw ( models [ 0 ] . inputs [ 0 ] . properties ) des_dim = ( w , h ) resized_data = cv2 . resize ( img_file , des_dim , interpolation = cv2 . INTER_AREA ) nv12_data = bgr2nv12_opencv ( resized_data ) # 模型推理 outputs = models [ 0 ] . forward ( nv12_data ) print ( \"=\" * 10 , \"Get output[0] numpy data\" , \"=\" * 10 ) print ( \"output[0] buffer numpy info: \" ) print ( \"shape: \" , outputs [ 0 ] . buffer . shape ) print ( \"dtype: \" , outputs [ 0 ] . buffer . dtype ) # print(\"First 10 results:\", outputs[0].buffer[0][:10]) # 从输出结果中得到值最大的那个序号，比如 zebra 就是第 340 个值，应该大于 0.99 print ( \"=\" * 10 , \"Classification result\" , \"=\" * 10 ) assert np . argmax ( outputs [ 0 ] . buffer ) == 340 # 输出类别序号和预测概率值 print ( \"cls id: %d Confidence: %f \" % ( np . argmax ( outputs [ 0 ] . buffer ), outputs [ 0 ] . buffer [ 0 ][ np . argmax ( outputs [ 0 ] . buffer )]))","text_tokens":["python3","f","]","大于","3","cvtcolor","/","return","把","dim","reshape","np","des","properties","py",".","usr","as","type","info","hobot","uv","[","cls","zeros","inter",",","(","print","img","models","w","main","interpolation","获取","=",")","outputs","output","classification","forward","result","最大","值","..","imread","pro","hw","cv2","color","224x224","缩","area","\"","#","pyeasy","个值","dnn","输出","4","else","inputs","d","input","*","id","输入","name","0.99","first","nv12","的"," ","is","load","height","planar","data","放到","jpg","resized","第","confidence","中","10","file","bgr2nv12","test","h","shape","尺寸","340","def","类别","resize","结果","_","like","opencv","y","那个","和","i420","image","transpose","算法","推理","%","yuv420p",":","env","zebra","bin","buffer","results","numpy","layout","就是","模型","packed","从","assert","dtype","2","比如","from","__","应该","打开","图片","tensor","nchw","and","0","import","get","!","if","：","概率","预测","argmax","'","mobilenetv1","bgr2yuv","width","得到","序号","，","1"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"hhp/5.4_%E5%9B%BE%E5%83%8F%E7%89%A9%E4%BD%93%E5%88%86%E7%B1%BB/#mobilenetv2","text":"用图片进行识别不太过瘾，毕竟是静态的图像，没问题，TogetherROS中还提供了实时物体分类的案例，我们继续来体验一下。 为了实时显示视觉识别的效果，这里我们需要启动TogetherROS中的一个web服务器，它会把视觉识别的实时效果，通过网络传输出来，我们直接在浏览器中就可以看到结果啦。也是便于我们开发调试的一个重要工具。 # 启动webserver服务 $ cd /opt/tros/lib/websocket/webservice/ $ chmod +x ./sbin/nginx && ./sbin/nginx -p . 运行例程： $ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/dnn_node_example/config/ . $ cp -r /opt/tros/lib/dnn_benchmark_example/config/runtime/ ./config/ $ ros2 launch /opt/tros/share/dnn_node_example/launch/hobot_dnn_node_example.launch.py config_file: = config/mobilenetv2workconfig.json image_width: = 480 image_height: = 272 在浏览器中登录192.168.1.10，就可以看到分类效果啦：","text_tokens":["config","chmod","一下","工具","就","/","也","重要","togetherros","服务","ros2","runtime","它会","把","py","务器","nginx",".","没","传输","hobot","进行","啦","1.10","r","毕竟","272","过瘾","运行","mobilenetv2workconfig","这里","opt","=","bash","不太","为了","web","p","问题","cd","share","sbin","example","静态","出来","浏览","识别","-","$","#","node","dnn","tros","了","需要","启动","是","直接","浏览器","调试","的"," ","launch","在","实时","+","height","x","物体","中","看到","source","视觉","file","网络","还","提供","便于","服务器","结果","_","websocket","例程","image",":","来","案例","cp","通过","体验","分类","。","&&","一个","json","webserver","可以","图片","图像","lib","480","我们","显示","开发","webservice","：","setup","用","继续","登录","width","效果","，","benchmark","192.168"],"title":"Mobilenetv2物体分类","title_tokens":["分类","mobilenetv2","物体"]},{"location":"hhp/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/","text":"动态目标检测 图像物体分类重在分析图像中存在的物体是什么，便于机器理解看到的环境信息，另外一种场景，机器不仅要识别某一物体，还要知道这个物体所在的位置，当物体在运动时，更要快速连续的跟踪，这就是目标检测，重在分析识别到物体在图像中的位置。 目标检测原理 假设我们要识别图像中这只狗的位置，以最为常用的YOLO算法为例，它会运用单个卷积神经网络(CNN) ，将图像分成网格，并预测每个网格的对象概率和边界框。 比如，对于这个图像，Yolo的CNN网络将输入的图片分割成7x7的网格，然后每个网格负责去检测那些中心点落在该格子内的目标，比如，小狗这个目标的中心点在左下角的网格中，那该网格就负责预测狗这个对象。 每个网格中将有多个边界框，在训练时，我们希望每个对象只有一个边界框，比如最终只有一个边界框把这只狗包起来。因此，我们根据哪个边界框与之前标注的重叠度最高，预测对象的位置和概率。 最终包围对象的边界框，就是识别的结果，使用四个描述符进行说明： 边界框的中心位置 边界框的高度 边界框的宽度 识别到对象所属的类 这样就完成了对目标的实时检测，拿到目标的信息之后，就可以进行后续的机器人行为控制了。 我们对目标检测系统运行速度的要求一般都比较高，可以实时处理视频流，比如车辆行驶的动态监测、自然环境中的目标识别，有着非常广泛的应用价值。 回到TogetherROS和旭日X3派的开发板，我们来看下这套软硬件结合的目标检测系统，效率如何。 MIPI相机目标检测 接下来，我们要利用MIPI相机，动态识别图像中各种各样的物体以及他们所在的位置，推理过程使用的是基于COCO数据集训练的80个类别，也就是可以识别80种常用的物体位置。 运行例程 $ cd /app/ai_inference/03_mipi_camera_sample/ $ python3 ./mipi_camera.py 代码解析 mipi_camera.py： #!/usr/bin/env python3 import numpy as np import cv2 import colorsys # Camera API libs from hobot_vio import libsrcampy as srcampy from hobot_dnn import pyeasy_dnn as dnn # detection model class names def get_classes (): return np . array ([ \"person\" , \"bicycle\" , \"car\" , \"motorcycle\" , \"airplane\" , \"bus\" , \"train\" , \"truck\" , \"boat\" , \"traffic light\" , \"fire hydrant\" , \"stop sign\" , \"parking meter\" , \"bench\" , \"bird\" , \"cat\" , \"dog\" , \"horse\" , \"sheep\" , \"cow\" , \"elephant\" , \"bear\" , \"zebra\" , \"giraffe\" , \"backpack\" , \"umbrella\" , \"handbag\" , \"tie\" , \"suitcase\" , \"frisbee\" , \"skis\" , \"snowboard\" , \"sports ball\" , \"kite\" , \"baseball bat\" , \"baseball glove\" , \"skateboard\" , \"surfboard\" , \"tennis racket\" , \"bottle\" , \"wine glass\" , \"cup\" , \"fork\" , \"knife\" , \"spoon\" , \"bowl\" , \"banana\" , \"apple\" , \"sandwich\" , \"orange\" , \"broccoli\" , \"carrot\" , \"hot dog\" , \"pizza\" , \"donut\" , \"cake\" , \"chair\" , \"couch\" , \"potted plant\" , \"bed\" , \"dining table\" , \"toilet\" , \"tv\" , \"laptop\" , \"mouse\" , \"remote\" , \"keyboard\" , \"cell phone\" , \"microwave\" , \"oven\" , \"toaster\" , \"sink\" , \"refrigerator\" , \"book\" , \"clock\" , \"vase\" , \"scissors\" , \"teddy bear\" , \"hair drier\" , \"toothbrush\" ]) def bgr2nv12_opencv ( image ): height , width = image . shape [ 0 ], image . shape [ 1 ] area = height * width yuv420p = cv2 . cvtColor ( image , cv2 . COLOR_RGB2YUV_I420 ) . reshape (( area * 3 // 2 ,)) y = yuv420p [: area ] uv_planar = yuv420p [ area :] . reshape (( 2 , area // 4 )) uv_packed = uv_planar . transpose (( 1 , 0 )) . reshape (( area // 2 ,)) nv12 = np . zeros_like ( yuv420p ) nv12 [: height * width ] = y nv12 [ height * width :] = uv_packed return nv12 def get_hw ( pro ): if pro . layout == \"NCHW\" : return pro . shape [ 2 ], pro . shape [ 3 ] else : return pro . shape [ 1 ], pro . shape [ 2 ] def postprocess ( model_output , model_hw_shape , origin_image = None , origin_img_shape = None , score_threshold = 0.5 , nms_threshold = 0.6 , dump_image = False ): input_height = model_hw_shape [ 0 ] input_width = model_hw_shape [ 1 ] if origin_image is not None : origin_image_shape = origin_image . shape [ 0 : 2 ] else : origin_image_shape = origin_img_shape prediction_bbox = decode ( outputs = model_output , score_threshold = score_threshold , origin_shape = origin_image_shape , input_size = 512 ) prediction_bbox = nms ( prediction_bbox , iou_threshold = nms_threshold ) prediction_bbox = np . array ( prediction_bbox ) topk = min ( prediction_bbox . shape [ 0 ], 1000 ) if topk != 0 : idx = np . argpartition ( prediction_bbox [ ... , 4 ], - topk )[ - topk :] prediction_bbox = prediction_bbox [ idx ] if dump_image and origin_image is not None : draw_bboxs ( origin_image , prediction_bbox ) return prediction_bbox def draw_bboxs ( image , bboxes , gt_classes_index = None , classes = get_classes ()): \"\"\"draw the bboxes in the original image \"\"\" num_classes = len ( classes ) image_h , image_w , channel = image . shape hsv_tuples = [( 1.0 * x / num_classes , 1. , 1. ) for x in range ( num_classes )] colors = list ( map ( lambda x : colorsys . hsv_to_rgb ( * x ), hsv_tuples )) colors = list ( map ( lambda x : ( int ( x [ 0 ] * 255 ), int ( x [ 1 ] * 255 ), int ( x [ 2 ] * 255 )), colors )) fontScale = 0.5 bbox_thick = int ( 0.6 * ( image_h + image_w ) / 600 ) for i , bbox in enumerate ( bboxes ): coor = np . array ( bbox [: 4 ], dtype = np . int32 ) if gt_classes_index == None : class_index = int ( bbox [ 5 ]) score = bbox [ 4 ] else : class_index = gt_classes_index [ i ] score = 1 bbox_color = colors [ class_index ] c1 , c2 = ( coor [ 0 ], coor [ 1 ]), ( coor [ 2 ], coor [ 3 ]) cv2 . rectangle ( image , c1 , c2 , bbox_color , bbox_thick ) classes_name = classes [ class_index ] bbox_mess = ' %s : %.2f ' % ( classes_name , score ) t_size = cv2 . getTextSize ( bbox_mess , 0 , fontScale , thickness = bbox_thick // 2 )[ 0 ] cv2 . rectangle ( image , c1 , ( c1 [ 0 ] + t_size [ 0 ], c1 [ 1 ] - t_size [ 1 ] - 3 ), bbox_color , - 1 ) cv2 . putText ( image , bbox_mess , ( c1 [ 0 ], c1 [ 1 ] - 2 ), cv2 . FONT_HERSHEY_SIMPLEX , fontScale , ( 0 , 0 , 0 ), bbox_thick // 2 , lineType = cv2 . LINE_AA ) print ( \" {} is in the picture with confidence: {:.4f} , bbox: {} \" . format ( classes_name , score , coor )) # cv2.imwrite(\"demo.jpg\", image) return image def decode ( outputs , score_threshold , origin_shape , input_size = 512 ): def _distance2bbox ( points , distance ): x1 = points [ ... , 0 ] - distance [ ... , 0 ] y1 = points [ ... , 1 ] - distance [ ... , 1 ] x2 = points [ ... , 0 ] + distance [ ... , 2 ] y2 = points [ ... , 1 ] + distance [ ... , 3 ] return np . stack ([ x1 , y1 , x2 , y2 ], - 1 ) def _scores ( cls , ce ): cls = 1 / ( 1 + np . exp ( - cls )) ce = 1 / ( 1 + np . exp ( - ce )) return np . sqrt ( ce * cls ) def _bbox ( bbox , stride , origin_shape , input_size ): h , w = bbox . shape [ 1 : 3 ] yv , xv = np . meshgrid ( np . arange ( h ), np . arange ( w )) xy = ( np . stack (( yv , xv ), 2 ) + 0.5 ) * stride bbox = _distance2bbox ( xy , bbox ) # opencv read, shape[1] is w, shape[0] is h scale_w = origin_shape [ 1 ] / input_size scale_h = origin_shape [ 0 ] / input_size scale = max ( origin_shape [ 0 ], origin_shape [ 1 ]) / input_size # origin img is pad resized #bbox = bbox * scale # origin img is resized bbox = bbox * [ scale_w , scale_h , scale_w , scale_h ] return bbox bboxes = list () strides = [ 8 , 16 , 32 , 64 , 128 ] for i in range ( len ( strides )): cls = outputs [ i ] . buffer bbox = outputs [ i + 5 ] . buffer ce = outputs [ i + 10 ] . buffer scores = _scores ( cls , ce ) classes = np . argmax ( scores , axis =- 1 ) classes = np . reshape ( classes , [ - 1 , 1 ]) max_score = np . max ( scores , axis =- 1 ) max_score = np . reshape ( max_score , [ - 1 , 1 ]) bbox = _bbox ( bbox , strides [ i ], origin_shape , input_size ) bbox = np . reshape ( bbox , [ - 1 , 4 ]) pred_bbox = np . concatenate ([ bbox , max_score , classes ], axis = 1 ) index = pred_bbox [ ... , 4 ] > score_threshold pred_bbox = pred_bbox [ index ] bboxes . append ( pred_bbox ) return np . concatenate ( bboxes ) def nms ( bboxes , iou_threshold , sigma = 0.3 , method = 'nms' ): def bboxes_iou ( boxes1 , boxes2 ): boxes1 = np . array ( boxes1 ) boxes2 = np . array ( boxes2 ) boxes1_area = ( boxes1 [ ... , 2 ] - boxes1 [ ... , 0 ]) * \\ ( boxes1 [ ... , 3 ] - boxes1 [ ... , 1 ]) boxes2_area = ( boxes2 [ ... , 2 ] - boxes2 [ ... , 0 ]) * \\ ( boxes2 [ ... , 3 ] - boxes2 [ ... , 1 ]) left_up = np . maximum ( boxes1 [ ... , : 2 ], boxes2 [ ... , : 2 ]) right_down = np . minimum ( boxes1 [ ... , 2 :], boxes2 [ ... , 2 :]) inter_section = np . maximum ( right_down - left_up , 0.0 ) inter_area = inter_section [ ... , 0 ] * inter_section [ ... , 1 ] union_area = boxes1_area + boxes2_area - inter_area ious = np . maximum ( 1.0 * inter_area / union_area , np . finfo ( np . float32 ) . eps ) return ious classes_in_img = list ( set ( bboxes [:, 5 ])) best_bboxes = [] for cls in classes_in_img : cls_mask = ( bboxes [:, 5 ] == cls ) cls_bboxes = bboxes [ cls_mask ] while len ( cls_bboxes ) > 0 : max_ind = np . argmax ( cls_bboxes [:, 4 ]) best_bbox = cls_bboxes [ max_ind ] best_bboxes . append ( best_bbox ) cls_bboxes = np . concatenate ( [ cls_bboxes [: max_ind ], cls_bboxes [ max_ind + 1 :]]) iou = bboxes_iou ( best_bbox [ np . newaxis , : 4 ], cls_bboxes [:, : 4 ]) weight = np . ones (( len ( iou ),), dtype = np . float32 ) assert method in [ 'nms' , 'soft-nms' ] if method == 'nms' : iou_mask = iou > iou_threshold weight [ iou_mask ] = 0.0 if method == 'soft-nms' : weight = np . exp ( - ( 1.0 * iou ** 2 / sigma )) cls_bboxes [:, 4 ] = cls_bboxes [:, 4 ] * weight score_mask = cls_bboxes [:, 4 ] > 0. cls_bboxes = cls_bboxes [ score_mask ] return best_bboxes def print_properties ( pro ): print ( \"tensor type:\" , pro . tensor_type ) print ( \"data type:\" , pro . dtype ) print ( \"layout:\" , pro . layout ) print ( \"shape:\" , pro . shape ) if __name__ == '__main__' : models = dnn . load ( '../models/fcos_512x512_nv12.bin' ) # 打印输入 tensor 的属性 print_properties ( models [ 0 ] . inputs [ 0 ] . properties ) # 打印输出 tensor 的属性 print ( len ( models [ 0 ] . outputs )) for output in models [ 0 ] . outputs : print_properties ( output . properties ) # 获取 Camera 句柄 cam = srcampy . Camera () # 打开 f37 摄像头，并且把输出突出缩小成算法模型的输入尺寸 h , w = get_hw ( models [ 0 ] . inputs [ 0 ] . properties ) # 打开 F37, 初始化视频 pipeline 0 ，设置帧率30fps，缩放图像为 512 x 512 cam . open_cam ( 0 , 1 , 30 , w , h ) # Get HDMI display object disp = srcampy . Display () # For the meaning of parameters, please refer to the relevant documents of HDMI display disp . display ( 0 , 1920 , 1080 ) input_shape = ( h , w ) while True : # 从相机获取分辨率为 512x512 的nv12格式的图像数据， 参数 2 代表从硬件模块IPU中获取 img = cam . get_img ( 2 , 512 , 512 ) # 把图像数据转成 numpy 数据类型 img = np . frombuffer ( img , dtype = np . uint8 ) # 模型推理 outputs = models [ 0 ] . forward ( img ) # 对算法结果进行过滤，去掉执行度低的检测框，计算检测框的交并比去除冗余框，把检测框的坐标还原到原图位置上 prediction_bbox = postprocess ( outputs , input_shape , origin_img_shape = ( 1080 , 1920 )) # 从新获取一张图像，大小缩放成与显示器的分辨率一样的 1920 x 1080, 并且转换成 bgr格式，方便进行绘图操作 origin_image = cam . get_img ( 2 , 1920 , 1080 ) origin_nv12 = np . frombuffer ( origin_image , dtype = np . uint8 ) . reshape ( 1620 , 1920 ) origin_bgr = cv2 . cvtColor ( origin_nv12 , cv2 . COLOR_YUV420SP2BGR ) # 把算法运行后得到的物体检测框绘制到图像上 box_bgr = draw_bboxs ( origin_bgr , prediction_bbox ) # X3 的HDMI输出模块的输入图像格式需要是NV12的，所以需要先把bgr格式转成NV12 box_nv12 = bgr2nv12_opencv ( box_bgr ) # 把 NV12 格式的图像输出给显示器 disp . set_img ( box_nv12 . tobytes ()) cam . close_cam () USB相机目标检测 如果大家手上没有MIPI接口的相机，使用USB相机也可以实现同样的功能。 运行例程 $ cd /app/ai_inference/02_usb_camera_sample/ $ python3 ./usb_camera_fcos.py 动态目标检测 大家如果没有HDMI显示器的话，也没有问题，刚才的例程，也可以这样来运行，我们通过统一网络环境中的浏览器就可以动态看到结果啦。 # 启动webserver服务 $ cd /opt/tros/lib/websocket/webservice/ $ chmod +x ./sbin/nginx && ./sbin/nginx -p . # 运行例程 $ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/dnn_node_example/config/ . $ cp -r /opt/tros/lib/dnn_benchmark_example/config/runtime/ ./config/ $ ros2 launch /opt/tros/share/dnn_node_example/launch/hobot_dnn_node_example.launch.py config_file: = config/fcosworkconfig.json image_width: = 480 image_height: = 272","text_tokens":["行为","高度","就","处理","价值","glove","puttext","linetype","它会","卷积","mipi","c2","fcosworkconfig","连续","句柄","ones","rectangle","描述","并且","cnn","hobot","只","1080","cow","最终","比","机器人","s","airplane","colorsys","开发板",",","交","每个","print","对于","小成","argpartition","600","maximum","meaning","检测","gettextsize","main","idx","section",")","clock","假设","1000","forward","非常","colors","到","转","..","cd","cv2","sbin","example","原图","时","channel","中心点","kite","scale","\"","eps","#","自然环境","method","如果","coco","x3","boat","转成","dnn","所在","bicycle","解析","gt","inputs","需要","初始","还要","这个","那该","hot","有","name","内","要求","rgb2yuv","class","多个","的","fontscale","系统","各种各样","hershey","phone","该","planar","data","hydrant","tuples","计算","中","surfboard","更要","source","bgr2nv12","libsrcampy","stop","功能","落","y","知道","例程","上","四个","image","算法","以","fork","拿到",":","帧","of","属性","包","bowl","minimum","buffer","backpack","。","监测","一个","格式","inference","webserver","__","打开","nchw","一般","pipeline","8","缩放","接下","运动","srcampy","sign","relevant","应用","分析","派","下","这套","traffic","width","当","完成","scores","open","chmod","负责","ai","plant","}","3","toilet","the","也","drier","信息","object","runtime","、","return","把","np","ious","各种","给","py","代表",".","type","实现","cls","zeros","位置","left","bed","append","03","手上","models","glass","原理","打印","绘图","0.3","他们","decode","去掉","单个","重叠","outputs","coor","refer","meter","分割","30","中将","数据类型","teddy","将","类","狗","spoon","中心","yv","refrigerator","对象","软硬件","format","hdmi","mess","识别","$","实时处理","microwave","bgr","model","分辨率","突出","rgb","chair","网格","低","另外","255","启动","i","是","效率","浏览器","book","yolo","操作","0.0","launch","先","is","tennis","+","oven","pad","resized","x","picture","为","ball","回到","mask","suitcase","orange","h","bear","def","分辨","结果","_","opencv","一样","和","一种","min","yuv420sp2bgr","说明","parking","yuv420p","以及","bboxs","bin","app","接口","numpy","layout","&&","代码","模型","重在","与","从","转换","图像","pizza","y1","boxes2","lib","我们","训练","soft","0","apple","!","map","umbrella","distance","：","setup","set","有着","'","y2","sandwich","strides",">","，","benchmark","打印输出","参数","1","cell","box","sample","python3","thick","为例","cvtcolor","vio","mouse","postprocess","bench","enumerate","with","snowboard","iou","bboxes","thickness","newaxis","视频","如何","5","像头","类型","图像格式","num","hsv","摄像头","没有","giraffe","original","t","来看","nginx","512x512","usr","集","as","包围","常用","进行","个","line","2f","啦","libs","down","documents","inter","bus","boxes1","(","img","stack","false","128","origin","w","不仅","len","toothbrush","刚才","最为","获取","=","max","output","to","旭日","宽度","while","hair","问题","30fps","软硬","share","detection","color","希望","辨率","disp","冗余","handbag","左下","换成","%.","area","in","skis","size","up","硬件","pyeasy","stride","都","truck","node","0.6","之后","输出","4","7x7","banana","input","*","后续","输入","设置","标注","sink","nv12","神经","成","frombuffer","基于","02","只有","还原","显示器","实时","行驶","sheep","jpg","xv","confidence","pred","结合","物体","topk","哪个","10","f37","camera","网络","bbox","执行","要","尺寸","cake","使用","率","like","websocket","x1","train","parameters","i420","那些","vase","read","之前","%","的话","bat","env","接下来","去除","{","arange","神经网络","0.5","场景","bird","racket","keyboard","快速","packed","dtype","json","demo","from","可以","please","meshgrid","tensor","1620","import","利用","环境","边界","模块","best","预测","toaster","并","缩小成","大小","然后","速度","得到","车辆","去","一张","动态","names","config","sports","过滤","broccoli","]","存在","跟踪","数据","/","dump","对","togetherros","服务","ros2","baseball","reshape","knife","左下角","properties","none","控制","usb","union","classes","后","下角","bottle","缩小","points","uv","[","simplex","table","aa","描述符","r","大家","根据","right","272","16","cat","运行","起来","threshold","opt","格子","相机","1.0","not","理解","最高","分成","true","bash","各样","scissors","高","p","tie","for","dining","carrot","ce","display","wine","hw","pro","close","种","512","浏览","某一","person","nms","couch","输出模块","lambda","-","所以","skateboard","运用","这样","视频流","score","imwrite","比较","框","...","uint8","finfo","tros","else","了","light","80","int","64","axis","机器","初始化","sqrt","过程","统一"," ","range","摄像","绘制","广泛","c1","在","load","height","float32","小狗","font","index","\\","elephant","int32","donut","看到","car","file","concatenate","shape","cam","新","便于","类别","list","转换成","horse","laptop","目标","x2","这","dog","推理","transpose","sigma","xy","神经网","来","weight","fcos","tobytes","zebra","motorcycle","prediction","通过","4f","32","tv","exp","cp","分类","draw","frisbee","就是","什么","assert","因此","ind","比如","2","坐标","同样","图片","480","and","ipu","distance2bbox","api","get","方便","remote","fire","所属","显示","自然","开发","webservice","if","概率","argmax","potted","下来","array","cup","1920","度"],"title":"动态目标检测","title_tokens":["检测","动态","目标"]},{"location":"hhp/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#_1","text":"图像物体分类重在分析图像中存在的物体是什么，便于机器理解看到的环境信息，另外一种场景，机器不仅要识别某一物体，还要知道这个物体所在的位置，当物体在运动时，更要快速连续的跟踪，这就是目标检测，重在分析识别到物体在图像中的位置。","text_tokens":["机器","理解","存在","的","跟踪","信息","场景","在","分类","到","。","就是","什么","重在","快速","连续","时","某一","图像","物体","中","更要","看到","识别","运动","环境","要","位置","分析","便于","知道","所在","一种","当","另外","目标","，","这","还要","检测","不仅","是","这个"],"title":"动态目标检测","title_tokens":["检测","动态","目标"]},{"location":"hhp/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#_2","text":"假设我们要识别图像中这只狗的位置，以最为常用的YOLO算法为例，它会运用单个卷积神经网络(CNN) ，将图像分成网格，并预测每个网格的对象概率和边界框。 比如，对于这个图像，Yolo的CNN网络将输入的图片分割成7x7的网格，然后每个网格负责去检测那些中心点落在该格子内的目标，比如，小狗这个目标的中心点在左下角的网格中，那该网格就负责预测狗这个对象。 每个网格中将有多个边界框，在训练时，我们希望每个对象只有一个边界框，比如最终只有一个边界框把这只狗包起来。因此，我们根据哪个边界框与之前标注的重叠度最高，预测对象的位置和概率。 最终包围对象的边界框，就是识别的结果，使用四个描述符进行说明： 边界框的中心位置 边界框的高度 边界框的宽度 识别到对象所属的类 这样就完成了对目标的实时检测，拿到目标的信息之后，就可以进行后续的机器人行为控制了。 我们对目标检测系统运行速度的要求一般都比较高，可以实时处理视频流，比如车辆行驶的动态监测、自然环境中的目标识别，有着非常广泛的应用价值。 回到TogetherROS和旭日X3派的开发板，我们来看下这套软硬件结合的目标检测系统，效率如何。","text_tokens":["行为","为例","负责","高度","就","处理","对","信息","价值","togetherros","、","它会","把","卷积","视频","如何","左下角","来看","控制","描述","下角","cnn","包围","只","常用","进行","最终","机器人","位置","描述符","根据","开发板","每个","(","对于","运行","起来","检测","格子","最为",")","最高","单个","分成","重叠","假设","高","旭日","分割","宽度","非常","中将","将","到","类","狗","软硬","希望","中心","时","对象","中心点","左下","软硬件","识别","实时处理","运用","这样","硬件","视频流","比较","自然环境","框","x3","都","之后","网格","7x7","了","后续","输入","那该","这个","有","内","机器","要求","效率","标注","神经","多个","的","yolo"," ","成","系统","广泛","只有","在","实时","行驶","小狗","该","结合","中","回到","哪个","网络","要","使用","结果","落","和","那些","目标","这","四个","算法","之前","以","说明","神经网","拿到","包","神经网络","。","就是","一个","与","因此","监测","比如","可以","图片","图像","一般","我们","训练","环境","边界","所属","应用","自然","开发","：","概率","预测","派","下","这套","有着","并","然后","速度","完成","，","度","车辆","去","动态"],"title":"目标检测原理","title_tokens":["目标","原理","检测"]},{"location":"hhp/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#mipi","text":"接下来，我们要利用MIPI相机，动态识别图像中各种各样的物体以及他们所在的位置，推理过程使用的是基于COCO数据集训练的80个类别，也就是可以识别80种常用的物体位置。","text_tokens":["他们","的","过程","接下来","数据","各样","基于","也","以及","各种各样","mipi","。","就是","种","各种","可以","图像","物体","中","集","我们","识别","接下","训练","常用","利用","个","要","位置","使用","类别","coco","下来","所在","80","，","推理","是","动态","相机"],"title":"MIPI相机目标检测","title_tokens":["目标","相机","检测","mipi"]},{"location":"hhp/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#_3","text":"$ cd /app/ai_inference/03_mipi_camera_sample/ $ python3 ./mipi_camera.py","text_tokens":["_","sample","app","python3","mipi","03","cd","ai","$","camera"," ","/","inference","py","."],"title":"运行例程","title_tokens":["运行","例程"]},{"location":"hhp/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#_4","text":"mipi_camera.py： #!/usr/bin/env python3 import numpy as np import cv2 import colorsys # Camera API libs from hobot_vio import libsrcampy as srcampy from hobot_dnn import pyeasy_dnn as dnn # detection model class names def get_classes (): return np . array ([ \"person\" , \"bicycle\" , \"car\" , \"motorcycle\" , \"airplane\" , \"bus\" , \"train\" , \"truck\" , \"boat\" , \"traffic light\" , \"fire hydrant\" , \"stop sign\" , \"parking meter\" , \"bench\" , \"bird\" , \"cat\" , \"dog\" , \"horse\" , \"sheep\" , \"cow\" , \"elephant\" , \"bear\" , \"zebra\" , \"giraffe\" , \"backpack\" , \"umbrella\" , \"handbag\" , \"tie\" , \"suitcase\" , \"frisbee\" , \"skis\" , \"snowboard\" , \"sports ball\" , \"kite\" , \"baseball bat\" , \"baseball glove\" , \"skateboard\" , \"surfboard\" , \"tennis racket\" , \"bottle\" , \"wine glass\" , \"cup\" , \"fork\" , \"knife\" , \"spoon\" , \"bowl\" , \"banana\" , \"apple\" , \"sandwich\" , \"orange\" , \"broccoli\" , \"carrot\" , \"hot dog\" , \"pizza\" , \"donut\" , \"cake\" , \"chair\" , \"couch\" , \"potted plant\" , \"bed\" , \"dining table\" , \"toilet\" , \"tv\" , \"laptop\" , \"mouse\" , \"remote\" , \"keyboard\" , \"cell phone\" , \"microwave\" , \"oven\" , \"toaster\" , \"sink\" , \"refrigerator\" , \"book\" , \"clock\" , \"vase\" , \"scissors\" , \"teddy bear\" , \"hair drier\" , \"toothbrush\" ]) def bgr2nv12_opencv ( image ): height , width = image . shape [ 0 ], image . shape [ 1 ] area = height * width yuv420p = cv2 . cvtColor ( image , cv2 . COLOR_RGB2YUV_I420 ) . reshape (( area * 3 // 2 ,)) y = yuv420p [: area ] uv_planar = yuv420p [ area :] . reshape (( 2 , area // 4 )) uv_packed = uv_planar . transpose (( 1 , 0 )) . reshape (( area // 2 ,)) nv12 = np . zeros_like ( yuv420p ) nv12 [: height * width ] = y nv12 [ height * width :] = uv_packed return nv12 def get_hw ( pro ): if pro . layout == \"NCHW\" : return pro . shape [ 2 ], pro . shape [ 3 ] else : return pro . shape [ 1 ], pro . shape [ 2 ] def postprocess ( model_output , model_hw_shape , origin_image = None , origin_img_shape = None , score_threshold = 0.5 , nms_threshold = 0.6 , dump_image = False ): input_height = model_hw_shape [ 0 ] input_width = model_hw_shape [ 1 ] if origin_image is not None : origin_image_shape = origin_image . shape [ 0 : 2 ] else : origin_image_shape = origin_img_shape prediction_bbox = decode ( outputs = model_output , score_threshold = score_threshold , origin_shape = origin_image_shape , input_size = 512 ) prediction_bbox = nms ( prediction_bbox , iou_threshold = nms_threshold ) prediction_bbox = np . array ( prediction_bbox ) topk = min ( prediction_bbox . shape [ 0 ], 1000 ) if topk != 0 : idx = np . argpartition ( prediction_bbox [ ... , 4 ], - topk )[ - topk :] prediction_bbox = prediction_bbox [ idx ] if dump_image and origin_image is not None : draw_bboxs ( origin_image , prediction_bbox ) return prediction_bbox def draw_bboxs ( image , bboxes , gt_classes_index = None , classes = get_classes ()): \"\"\"draw the bboxes in the original image \"\"\" num_classes = len ( classes ) image_h , image_w , channel = image . shape hsv_tuples = [( 1.0 * x / num_classes , 1. , 1. ) for x in range ( num_classes )] colors = list ( map ( lambda x : colorsys . hsv_to_rgb ( * x ), hsv_tuples )) colors = list ( map ( lambda x : ( int ( x [ 0 ] * 255 ), int ( x [ 1 ] * 255 ), int ( x [ 2 ] * 255 )), colors )) fontScale = 0.5 bbox_thick = int ( 0.6 * ( image_h + image_w ) / 600 ) for i , bbox in enumerate ( bboxes ): coor = np . array ( bbox [: 4 ], dtype = np . int32 ) if gt_classes_index == None : class_index = int ( bbox [ 5 ]) score = bbox [ 4 ] else : class_index = gt_classes_index [ i ] score = 1 bbox_color = colors [ class_index ] c1 , c2 = ( coor [ 0 ], coor [ 1 ]), ( coor [ 2 ], coor [ 3 ]) cv2 . rectangle ( image , c1 , c2 , bbox_color , bbox_thick ) classes_name = classes [ class_index ] bbox_mess = ' %s : %.2f ' % ( classes_name , score ) t_size = cv2 . getTextSize ( bbox_mess , 0 , fontScale , thickness = bbox_thick // 2 )[ 0 ] cv2 . rectangle ( image , c1 , ( c1 [ 0 ] + t_size [ 0 ], c1 [ 1 ] - t_size [ 1 ] - 3 ), bbox_color , - 1 ) cv2 . putText ( image , bbox_mess , ( c1 [ 0 ], c1 [ 1 ] - 2 ), cv2 . FONT_HERSHEY_SIMPLEX , fontScale , ( 0 , 0 , 0 ), bbox_thick // 2 , lineType = cv2 . LINE_AA ) print ( \" {} is in the picture with confidence: {:.4f} , bbox: {} \" . format ( classes_name , score , coor )) # cv2.imwrite(\"demo.jpg\", image) return image def decode ( outputs , score_threshold , origin_shape , input_size = 512 ): def _distance2bbox ( points , distance ): x1 = points [ ... , 0 ] - distance [ ... , 0 ] y1 = points [ ... , 1 ] - distance [ ... , 1 ] x2 = points [ ... , 0 ] + distance [ ... , 2 ] y2 = points [ ... , 1 ] + distance [ ... , 3 ] return np . stack ([ x1 , y1 , x2 , y2 ], - 1 ) def _scores ( cls , ce ): cls = 1 / ( 1 + np . exp ( - cls )) ce = 1 / ( 1 + np . exp ( - ce )) return np . sqrt ( ce * cls ) def _bbox ( bbox , stride , origin_shape , input_size ): h , w = bbox . shape [ 1 : 3 ] yv , xv = np . meshgrid ( np . arange ( h ), np . arange ( w )) xy = ( np . stack (( yv , xv ), 2 ) + 0.5 ) * stride bbox = _distance2bbox ( xy , bbox ) # opencv read, shape[1] is w, shape[0] is h scale_w = origin_shape [ 1 ] / input_size scale_h = origin_shape [ 0 ] / input_size scale = max ( origin_shape [ 0 ], origin_shape [ 1 ]) / input_size # origin img is pad resized #bbox = bbox * scale # origin img is resized bbox = bbox * [ scale_w , scale_h , scale_w , scale_h ] return bbox bboxes = list () strides = [ 8 , 16 , 32 , 64 , 128 ] for i in range ( len ( strides )): cls = outputs [ i ] . buffer bbox = outputs [ i + 5 ] . buffer ce = outputs [ i + 10 ] . buffer scores = _scores ( cls , ce ) classes = np . argmax ( scores , axis =- 1 ) classes = np . reshape ( classes , [ - 1 , 1 ]) max_score = np . max ( scores , axis =- 1 ) max_score = np . reshape ( max_score , [ - 1 , 1 ]) bbox = _bbox ( bbox , strides [ i ], origin_shape , input_size ) bbox = np . reshape ( bbox , [ - 1 , 4 ]) pred_bbox = np . concatenate ([ bbox , max_score , classes ], axis = 1 ) index = pred_bbox [ ... , 4 ] > score_threshold pred_bbox = pred_bbox [ index ] bboxes . append ( pred_bbox ) return np . concatenate ( bboxes ) def nms ( bboxes , iou_threshold , sigma = 0.3 , method = 'nms' ): def bboxes_iou ( boxes1 , boxes2 ): boxes1 = np . array ( boxes1 ) boxes2 = np . array ( boxes2 ) boxes1_area = ( boxes1 [ ... , 2 ] - boxes1 [ ... , 0 ]) * \\ ( boxes1 [ ... , 3 ] - boxes1 [ ... , 1 ]) boxes2_area = ( boxes2 [ ... , 2 ] - boxes2 [ ... , 0 ]) * \\ ( boxes2 [ ... , 3 ] - boxes2 [ ... , 1 ]) left_up = np . maximum ( boxes1 [ ... , : 2 ], boxes2 [ ... , : 2 ]) right_down = np . minimum ( boxes1 [ ... , 2 :], boxes2 [ ... , 2 :]) inter_section = np . maximum ( right_down - left_up , 0.0 ) inter_area = inter_section [ ... , 0 ] * inter_section [ ... , 1 ] union_area = boxes1_area + boxes2_area - inter_area ious = np . maximum ( 1.0 * inter_area / union_area , np . finfo ( np . float32 ) . eps ) return ious classes_in_img = list ( set ( bboxes [:, 5 ])) best_bboxes = [] for cls in classes_in_img : cls_mask = ( bboxes [:, 5 ] == cls ) cls_bboxes = bboxes [ cls_mask ] while len ( cls_bboxes ) > 0 : max_ind = np . argmax ( cls_bboxes [:, 4 ]) best_bbox = cls_bboxes [ max_ind ] best_bboxes . append ( best_bbox ) cls_bboxes = np . concatenate ( [ cls_bboxes [: max_ind ], cls_bboxes [ max_ind + 1 :]]) iou = bboxes_iou ( best_bbox [ np . newaxis , : 4 ], cls_bboxes [:, : 4 ]) weight = np . ones (( len ( iou ),), dtype = np . float32 ) assert method in [ 'nms' , 'soft-nms' ] if method == 'nms' : iou_mask = iou > iou_threshold weight [ iou_mask ] = 0.0 if method == 'soft-nms' : weight = np . exp ( - ( 1.0 * iou ** 2 / sigma )) cls_bboxes [:, 4 ] = cls_bboxes [:, 4 ] * weight score_mask = cls_bboxes [:, 4 ] > 0. cls_bboxes = cls_bboxes [ score_mask ] return best_bboxes def print_properties ( pro ): print ( \"tensor type:\" , pro . tensor_type ) print ( \"data type:\" , pro . dtype ) print ( \"layout:\" , pro . layout ) print ( \"shape:\" , pro . shape ) if __name__ == '__main__' : models = dnn . load ( '../models/fcos_512x512_nv12.bin' ) # 打印输入 tensor 的属性 print_properties ( models [ 0 ] . inputs [ 0 ] . properties ) # 打印输出 tensor 的属性 print ( len ( models [ 0 ] . outputs )) for output in models [ 0 ] . outputs : print_properties ( output . properties ) # 获取 Camera 句柄 cam = srcampy . Camera () # 打开 f37 摄像头，并且把输出突出缩小成算法模型的输入尺寸 h , w = get_hw ( models [ 0 ] . inputs [ 0 ] . properties ) # 打开 F37, 初始化视频 pipeline 0 ，设置帧率30fps，缩放图像为 512 x 512 cam . open_cam ( 0 , 1 , 30 , w , h ) # Get HDMI display object disp = srcampy . Display () # For the meaning of parameters, please refer to the relevant documents of HDMI display disp . display ( 0 , 1920 , 1080 ) input_shape = ( h , w ) while True : # 从相机获取分辨率为 512x512 的nv12格式的图像数据， 参数 2 代表从硬件模块IPU中获取 img = cam . get_img ( 2 , 512 , 512 ) # 把图像数据转成 numpy 数据类型 img = np . frombuffer ( img , dtype = np . uint8 ) # 模型推理 outputs = models [ 0 ] . forward ( img ) # 对算法结果进行过滤，去掉执行度低的检测框，计算检测框的交并比去除冗余框，把检测框的坐标还原到原图位置上 prediction_bbox = postprocess ( outputs , input_shape , origin_img_shape = ( 1080 , 1920 )) # 从新获取一张图像，大小缩放成与显示器的分辨率一样的 1920 x 1080, 并且转换成 bgr格式，方便进行绘图操作 origin_image = cam . get_img ( 2 , 1920 , 1080 ) origin_nv12 = np . frombuffer ( origin_image , dtype = np . uint8 ) . reshape ( 1620 , 1920 ) origin_bgr = cv2 . cvtColor ( origin_nv12 , cv2 . COLOR_YUV420SP2BGR ) # 把算法运行后得到的物体检测框绘制到图像上 box_bgr = draw_bboxs ( origin_bgr , prediction_bbox ) # X3 的HDMI输出模块的输入图像格式需要是NV12的，所以需要先把bgr格式转成NV12 box_nv12 = bgr2nv12_opencv ( box_bgr ) # 把 NV12 格式的图像输出给显示器 disp . set_img ( box_nv12 . tobytes ()) cam . close_cam ()","text_tokens":["glove","puttext","linetype","mipi","c2","句柄","ones","rectangle","并且","hobot","1080","cow","比","s","airplane","colorsys",",","交","print","小成","argpartition","600","maximum","meaning","gettextsize","检测","main","idx","section",")","clock","forward","1000","colors","到","转","..","cv2","原图","channel","kite","scale","\"","eps","#","method","x3","boat","转成","dnn","bicycle","gt","inputs","需要","初始","hot","name","rgb2yuv","class","的","fontscale","hershey","phone","planar","data","hydrant","tuples","计算","surfboard","中","bgr2nv12","libsrcampy","stop","y","上","image","算法","fork",":","帧","of","属性","bowl","minimum","buffer","backpack","格式","__","打开","nchw","pipeline","8","缩放","srcampy","sign","relevant","traffic","width","scores","open","}","plant","3","toilet","the","drier","object","return","把","np","ious","给","py","代表",".","type","cls","zeros","位置","left","bed","append","models","glass","打印","绘图","0.3","decode","去掉","outputs","coor","refer","meter","30","数据类型","teddy","spoon","yv","refrigerator","format","hdmi","mess","bgr","microwave","model","分辨率","突出","rgb","chair","低","255","i","是","book","操作","0.0","先","is","tennis","+","oven","pad","resized","x","picture","为","ball","mask","suitcase","orange","h","bear","def","分辨","结果","_","opencv","一样","min","yuv420sp2bgr","parking","yuv420p","bboxs","bin","numpy","layout","模型","与","从","转换","图像","pizza","y1","boxes2","soft","0","apple","!","map","umbrella","distance","：","set","'","y2","sandwich","strides",">","，","打印输出","参数","1","cell","box","python3","thick","cvtcolor","vio","mouse","postprocess","bench","enumerate","with","snowboard","iou","bboxes","thickness","newaxis","5","视频","类型","像头","图像格式","num","hsv","摄像头","giraffe","original","t","512x512","usr","as","进行","line","2f","libs","down","documents","inter","bus","boxes1","(","img","stack","false","128","origin","w","len","toothbrush","获取","=","max","output","to","while","hair","30fps","detection","color","辨率","disp","冗余","handbag","换成","%.","area","in","skis","size","up","硬件","pyeasy","stride","truck","0.6","输出","4","banana","input","*","输入","设置","sink","nv12","成","frombuffer","还原","显示器","sheep","jpg","xv","confidence","pred","物体","topk","10","f37","camera","bbox","执行","尺寸","cake","率","like","x1","train","parameters","i420","vase","read","%","bat","env","去除","{","arange","0.5","bird","racket","keyboard","packed","dtype","demo","from","please","meshgrid","tensor","1620","import","模块","best","toaster","并","缩小成","大小","得到","一张","names","sports","过滤","broccoli","]","/","数据","dump","对","baseball","reshape","knife","properties","none","union","classes","后","bottle","缩小","points","uv","[","simplex","table","aa","right","16","cat","运行","threshold","相机","1.0","not","true","scissors","tie","for","dining","carrot","ce","display","wine","hw","pro","close","512","person","nms","couch","输出模块","lambda","-","所以","skateboard","score","imwrite","框","...","uint8","finfo","else","light","int","64","axis","初始化","sqrt"," ","range","摄像","绘制","c1","load","height","float32","font","index","\\","elephant","int32","donut","car","concatenate","shape","cam","新","list","转换成","horse","laptop","x2","dog","transpose","sigma","推理","xy","weight","fcos","tobytes","zebra","motorcycle","prediction","4f","32","tv","exp","draw","frisbee","assert","坐标","ind","2","and","ipu","distance2bbox","api","get","方便","remote","fire","显示","if","argmax","potted","array","cup","1920","度"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"hhp/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#usb","text":"如果大家手上没有MIPI接口的相机，使用USB相机也可以实现同样的功能。","text_tokens":["功能","同样","mipi","接口","实现","。","的","手上","没有","，","也","使用","大家","如果","可以","usb","相机"],"title":"USB相机目标检测","title_tokens":["检测","usb","相机","目标"]},{"location":"hhp/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#_5","text":"$ cd /app/ai_inference/02_usb_camera_sample/ $ python3 ./usb_camera_fcos.py","text_tokens":["_","sample","app","python3","cd","ai","$","camera"," ","/","fcos","inference","py","usb",".","02"],"title":"运行例程","title_tokens":["运行","例程"]},{"location":"hhp/5.5_%E5%8A%A8%E6%80%81%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/#_6","text":"大家如果没有HDMI显示器的话，也没有问题，刚才的例程，也可以这样来运行，我们通过统一网络环境中的浏览器就可以动态看到结果啦。 # 启动webserver服务 $ cd /opt/tros/lib/websocket/webservice/ $ chmod +x ./sbin/nginx && ./sbin/nginx -p . # 运行例程 $ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/dnn_node_example/config/ . $ cp -r /opt/tros/lib/dnn_benchmark_example/config/runtime/ ./config/ $ ros2 launch /opt/tros/share/dnn_node_example/launch/hobot_dnn_node_example.launch.py config_file: = config/fcosworkconfig.json image_width: = 480 image_height: = 272","text_tokens":["config","chmod","就","/","也","ros2","服务","runtime","fcosworkconfig","没有","py","nginx",".","hobot","啦","r","大家","272","运行","opt","刚才","=","bash","p","问题","cd","share","sbin","example","浏览","hdmi","-","$","#","这样","如果","node","dnn","tros","启动","浏览器","的","统一"," ","launch","显示器","+","height","x","中","看到","source","file","网络","结果","_","websocket","例程","image","的话",":","来","cp","通过","。","&&","json","webserver","可以","lib","480","我们","环境","显示","webservice","setup","width","，","benchmark","动态"],"title":"动态目标检测","title_tokens":["检测","动态","目标"]},{"location":"hhp/5.6_%E4%BA%BA%E4%BD%93%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%B7%9F%E8%B8%AA/","text":"人体检测与跟踪 不知道大家有没有玩过类似XBOX的体感游戏机，上边会有一个相机，动态识别我们的动作，比如跳舞、打球，是不是还挺神奇的，这就是人体检测与跟踪的应用。 TogetherROS中也集成了一套类似的算法，可以识别人体、人头、人脸、人手等一系列关键点，我们来体验一下。 编程开发方法 先来看一个人体识别的基础应用，我们驱动相机后，实时采样视觉信息，然后再通过检测算法，识别每一幅图片中人体位置，并把识别的结果保存成一张图片，便于我们查看。 运行例程 # 下载例程代码（与之前课程下载的代码一致） $ cd /userdata/dev_ws/src $ git clone https://gitee.com/guyuehome/togetherros_tutorials.git $ cd /userdata/dev_ws/ $ colcon build # 终端1，运行相机 $ source /opt/tros/setup.bash $ ros2 run mipi_cam mipi_cam --ros-args -p out_format: = nv12 -p image_width: = 960 -p image_height: = 544 -p video_device: = F37 # 终端2，运行例程 $ source /opt/tros/setup.bash $ source ./install/local_setup.bash $ mkdir -p config && cp -r /opt/tros/lib/dnn_node_example/config/multitask_body_kps_960x544.hbm config/ $ ros2 run cpp_dnn_demo cpp_dnn_demo --ros-args -p image: = config/test.jpg 代码解析 #include \"opencv2/core/mat.hpp\" #include \"opencv2/imgcodecs.hpp\" #include \"opencv2/imgproc.hpp\" #include \"dnn_node/dnn_node.h\" #include \"dnn_node/util/image_proc.h\" #include \"sensor_msgs/msg/image.hpp\" using namespace hobot :: dnn_node ; class BodyDetNode : public DnnNode { public : BodyDetNode ( const std :: string & node_name = \"body_det\" , const rclcpp :: NodeOptions & options = rclcpp :: NodeOptions ()) : DnnNode ( node_name , options ) { // 获取模型输入图片的尺寸，包括图片的宽model_input_width_和高model_input_height ，用于模型前处理 if ( Init () != 0 || GetModelInputSize ( 0 , model_input_width_ , model_input_height_ ) < 0 ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"example\" ), \"Node init fail!\" ); } //创建图片消息的subscriber，订阅的topic为”/image_raw”，消息类型为sensor_msgs::msg::Image。订阅到的图片用于算法模型推理 ros_img_subscription_ = this -> create_subscription < sensor_msgs :: msg :: Image > ( \"/image_raw\" , 10 , std :: bind ( & BodyDetNode :: FeedImg , this , std :: placeholders :: _1 )); } ~ BodyDetNode () override {} void FeedImg ( const sensor_msgs :: msg :: Image :: ConstSharedPtr msg ); protected : int SetNodePara () override { if ( ! dnn_node_para_ptr_ ) return -1 ; //指定模型推理使用的模型文件名和模型名 dnn_node_para_ptr_ -> model_file = \"config/multitask_body_kps_960x544.hbm\" ; dnn_node_para_ptr_ -> model_name = \"multitask_body_kps_960x544\" ; //指定模型输出的人体框的解析方法，其中人体框输出索引为box_output_index_ //使用的解析方法为hobot_dnn预定义的检测框解析方法FaceHandDetectionOutputParser。 std :: shared_ptr < OutputParser > box_out_parser = std :: make_shared < FaceHandDetectionOutputParser > (); dnn_node_para_ptr_ -> output_parsers_ . emplace_back ( std :: make_pair ( box_output_index_ , box_out_parser ) ); return 0 ; } int PostProcess ( const std :: shared_ptr < DnnNodeOutput > & node_output ) override ; private : int model_input_width_ = -1 ; int model_input_height_ = -1 ; const int32_t box_output_index_ = 1 ; sensor_msgs :: msg :: Image :: ConstSharedPtr img_msg_ ; rclcpp :: Subscription < sensor_msgs :: msg :: Image >:: ConstSharedPtr ros_img_subscription_ = nullptr ; }; //输出模型结果，并将结果渲染到图片后保存在本地 int BodyDetNode::PostProcess ( const std :: shared_ptr < DnnNodeOutput > & node_output ) { if ( node_output -> outputs . empty () || static_cast < int32_t > ( node_output -> outputs . size ()) < box_output_index_ ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"example\" ), \"Invalid outputs\" ); return -1 ; } auto * filter2d_result = dynamic_cast < Filter2DResult *> ( node_output -> outputs [ box_output_index_ ]. get ()); if ( ! filter2d_result ) return -1 ; std :: stringstream ss ; ss << \"img encoding: \" << img_msg_ -> encoding << \", stamp: \" << img_msg_ -> header . stamp . sec << \",\" << img_msg_ -> header . stamp . nanosec << \" \\n out box size: \" << filter2d_result -> boxes . size () << \" \\n \" ; cv :: Mat nv12 ( img_msg_ -> height * 3 / 2 , img_msg_ -> width , CV_8UC1 , const_cast < char *> ( reinterpret_cast < const char *> ( img_msg_ -> data . data ()))); cv :: Mat bgr ; cv :: cvtColor ( nv12 , bgr , CV_YUV2BGR_NV12 ); for ( auto & rect : filter2d_result -> boxes ) { ss << \"rect: \" << rect . left << \" \" << rect . top << \" \" << rect . right << \" \" << rect . bottom << \" \\n \" ; // 图片渲染 cv :: rectangle ( bgr , cv :: Point ( rect . left , rect . top ), cv :: Point ( rect . right , rect . bottom ), cv :: Scalar ( 255 , 0 , 0 ), 3 ); } std :: string result_image = \"render_\" + std :: to_string ( img_msg_ -> header . stamp . sec ) + \".\" + std :: to_string ( img_msg_ -> header . stamp . nanosec ) + \".jpg\" ; ss << \"Render img to file: \" << result_image ; RCLCPP_INFO ( rclcpp :: get_logger ( \"example\" ), \"%s\" , ss . str (). c_str ()); cv :: imwrite ( result_image , bgr ); return 0 ; } //将nv12格式的图片转成模型输入的数据类型DNNInput后，输入给推理任务 void BodyDetNode::FeedImg ( const sensor_msgs :: msg :: Image :: ConstSharedPtr img_msg ) { if ( ! img_msg ) return ; if ( \"nv12\" != img_msg -> encoding ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"example\" ), \"Only support nv12 img encoding!\" ); return ; } img_msg_ = img_msg ; // 创建模型输入数据 auto inputs = std :: vector < std :: shared_ptr < DNNInput >> { ImageProc :: GetNV12PyramidFromNV12Img ( reinterpret_cast < const char *> ( img_msg -> data . data ()), img_msg -> height , img_msg -> width , model_input_height_ , model_input_width_ )}; // 运行推理，DnnNode基类中定义并实现的启动推理接口。 Run ( inputs ); } int main ( int argc , char ** argv ) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < BodyDetNode > ()); rclcpp :: shutdown (); return 0 ; } 人体检测与跟踪 结果保存成图片，虽然便于保留数据，但是不利于动态看到效果，我们不如再来实时动态效果显示。 在这个案例中，我们在之前人体识别的基础上，进一步实现了人体部位的识别和骨骼、眼神等关键点的识别，比如头、脸、身体、手掌、眼睛。 识别的结果同样是通过浏览器来进行查看。 # 启动webserver服务 $ cd /opt/tros/lib/websocket/webservice/ $ chmod +x ./sbin/nginx && ./sbin/nginx -p . # 运行例程 $ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/mono2d_body_detection/config/ . $ ros2 launch /opt/tros/share/mono2d_body_detection/launch/hobot_mono2d_body_detection.launch.py","text_tokens":["out","git","ss","处理","dnnnodeoutput","mipi","https","argc","rectangle","options","info","|","hobot","s","一系","rect","是不是","查看",",","yuv2bgr","检测","getmodelinputsize","using","bottom","main","开发方法",")","名","到",";","转","cd","shared","系列","sbin","example","手掌","\"","#","会","only","dnn","include","解析","inputs","constsharedptr","encoding","这个","544","det","有","name","人头","class","文件","的","保存","top","其中","data","集成","定义","video","中","source","方法","还","cast","960","emplace","知道","cpp","例程","上","部位","image","boxes","算法",":","protected","bind","案例","一系列","索引","。","一个","格式","头","n","webserver","userdata","nodeoptions","一致","指定","应用","预定","width","hpp","chmod","}","3","也","信息","para","、","return","stringstream","把","给","py",".","实现","位置","src","left","clone","body","const","一步","终端","facehanddetectionoutputparser","--","动作","placeholders","outputs","数据类型","ros","将","xbox","format","识别","上边","$","bgr","驱动","model","体感","point","back","任务","invalid","255","启动","void","是","build","浏览器","launch","先","+","利于","再","身体","x","为","课程","h","dnninput","opencv2","stamp","mkdir","结果","前","动态效果","_","nullptr","private","和","人手","ptr","shutdown","device","argv","static","dev","接口","&&","代码","模型","与","人脸","local","采样","lib","我们","0","!","960x544","setup","眼神","效果",">","，","make","1","init","box","reinterpret","guyuehome","run","不利于","cvtcolor","postprocess","raw","filter2d","类型","没有","不是","t","来看","nginx","subscriber","进行","本地","support","(","img","bodydetnode","public","渲染","install","获取","=","神奇","feedimg","output","to","但是","关键","scalar","ws","share","消息","detection","size","类似","node","nanosec","输出","input","logger","*","输入","挺","一套","nv12","c","不","成","包括","gitee","实时","宽","imgcodecs","jpg","msgs","10","sec","义","f37","util","test","尺寸","outputparser","使用","header","websocket","之前","dnnnode","%","创建","（","{","玩过","&","msg","保留","demo","pair","可以","~","用于","vector","filter2dresult","骨骼","并","然后","跳舞","有没有","一张","动态","虽然","config","]","一下","colcon","跟踪","/","数据","togetherros","ros2","服务","mono2d","create","cv","render","后","this","[","等","”","parser","r","大家","脸","right","string","运行","empty","hbm","不利","opt","相机","tutorials","bash","<","游戏","高","result","p","人体","for","com","override","parsers","浏览","每","-","imwrite","getnv12pyramidfromnv12img","框","文件名","setnodepara","tros","multitask","基础","下载","int","了","kps"," ","编程","在","height","进一步","namespace","打球","index","\\","int32","std","看到","file","视觉","8uc1","关键点","cam","便于","subscription","char","error","imageproc","topic","这","一幅","订阅","）","推理","眼睛","mat","游戏机","来","基类","cp","通过","体验","dynamic","imgproc","core","就是","不如","spin","比如","2","args","proc","auto","同样","图片","fail","sensor","rclcpp","get","显示","开发","webservice","if","str"],"title":"人体检测与跟踪","title_tokens":["跟踪","人体","检测","与"]},{"location":"hhp/5.6_%E4%BA%BA%E4%BD%93%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%B7%9F%E8%B8%AA/#_1","text":"不知道大家有没有玩过类似XBOX的体感游戏机，上边会有一个相机，动态识别我们的动作，比如跳舞、打球，是不是还挺神奇的，这就是人体检测与跟踪的应用。 TogetherROS中也集成了一套类似的算法，可以识别人体、人头、人脸、人手等一系列关键点，我们来体验一下。","text_tokens":["有","游戏机","挺","人头","一套","一下","神奇","的","跟踪","来","不"," ","游戏","也","人体","玩过","togetherros","关键","体验","、","一系列","。","打球","一个","就是","与","集成","比如","没有","人脸","系列","不是","可以","xbox","中","我们","识别","上边","等","会","关键点","体感","还","应用","类似","大家","一系","是不是","知道","了","人手","，","这","跳舞","有没有","检测","算法","动态","相机","动作"],"title":"人体检测与跟踪","title_tokens":["跟踪","人体","检测","与"]},{"location":"hhp/5.6_%E4%BA%BA%E4%BD%93%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%B7%9F%E8%B8%AA/#_2","text":"先来看一个人体识别的基础应用，我们驱动相机后，实时采样视觉信息，然后再通过检测算法，识别每一幅图片中人体位置，并把识别的结果保存成一张图片，便于我们查看。","text_tokens":["的","成","保存","信息","先","人体","通过","实时","把","再","。","一个","来看","图片","每","采样","后","中","我们","识别","视觉","驱动","应用","位置","一张","便于","结果","查看","基础","并","然后","，","检测","一幅","算法","相机"],"title":"编程开发方法","title_tokens":["方法","编程","开发方法","开发"]},{"location":"hhp/5.6_%E4%BA%BA%E4%BD%93%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%B7%9F%E8%B8%AA/#_3","text":"# 下载例程代码（与之前课程下载的代码一致） $ cd /userdata/dev_ws/src $ git clone https://gitee.com/guyuehome/togetherros_tutorials.git $ cd /userdata/dev_ws/ $ colcon build # 终端1，运行相机 $ source /opt/tros/setup.bash $ ros2 run mipi_cam mipi_cam --ros-args -p out_format: = nv12 -p image_width: = 960 -p image_height: = 544 -p video_device: = F37 # 终端2，运行例程 $ source /opt/tros/setup.bash $ source ./install/local_setup.bash $ mkdir -p config && cp -r /opt/tros/lib/dnn_node_example/config/multitask_body_kps_960x544.hbm config/ $ ros2 run cpp_dnn_demo cpp_dnn_demo --ros-args -p image: = config/test.jpg","text_tokens":["config","guyuehome","out","git","run","colcon","/","togetherros","ros2","mipi","https",".","r","src","clone","body","运行","终端","hbm","--","opt","相机","tutorials","install","=","bash","p","com","ros","cd","ws","example","format","-","$","#","node","dnn","tros","multitask","下载","kps","544","build","nv12","的"," ","gitee","height","jpg","video","课程","source","f37","test","cam","mkdir","960","_","cpp","例程","image","）","之前","（",":","device","cp","dev","&&","代码","与","2","demo","args","local","lib","userdata","一致","960x544","setup","width","，","1"],"title":"运行例程","title_tokens":["运行","例程"]},{"location":"hhp/5.6_%E4%BA%BA%E4%BD%93%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%B7%9F%E8%B8%AA/#_4","text":"#include \"opencv2/core/mat.hpp\" #include \"opencv2/imgcodecs.hpp\" #include \"opencv2/imgproc.hpp\" #include \"dnn_node/dnn_node.h\" #include \"dnn_node/util/image_proc.h\" #include \"sensor_msgs/msg/image.hpp\" using namespace hobot :: dnn_node ; class BodyDetNode : public DnnNode { public : BodyDetNode ( const std :: string & node_name = \"body_det\" , const rclcpp :: NodeOptions & options = rclcpp :: NodeOptions ()) : DnnNode ( node_name , options ) { // 获取模型输入图片的尺寸，包括图片的宽model_input_width_和高model_input_height ，用于模型前处理 if ( Init () != 0 || GetModelInputSize ( 0 , model_input_width_ , model_input_height_ ) < 0 ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"example\" ), \"Node init fail!\" ); } //创建图片消息的subscriber，订阅的topic为”/image_raw”，消息类型为sensor_msgs::msg::Image。订阅到的图片用于算法模型推理 ros_img_subscription_ = this -> create_subscription < sensor_msgs :: msg :: Image > ( \"/image_raw\" , 10 , std :: bind ( & BodyDetNode :: FeedImg , this , std :: placeholders :: _1 )); } ~ BodyDetNode () override {} void FeedImg ( const sensor_msgs :: msg :: Image :: ConstSharedPtr msg ); protected : int SetNodePara () override { if ( ! dnn_node_para_ptr_ ) return -1 ; //指定模型推理使用的模型文件名和模型名 dnn_node_para_ptr_ -> model_file = \"config/multitask_body_kps_960x544.hbm\" ; dnn_node_para_ptr_ -> model_name = \"multitask_body_kps_960x544\" ; //指定模型输出的人体框的解析方法，其中人体框输出索引为box_output_index_ //使用的解析方法为hobot_dnn预定义的检测框解析方法FaceHandDetectionOutputParser。 std :: shared_ptr < OutputParser > box_out_parser = std :: make_shared < FaceHandDetectionOutputParser > (); dnn_node_para_ptr_ -> output_parsers_ . emplace_back ( std :: make_pair ( box_output_index_ , box_out_parser ) ); return 0 ; } int PostProcess ( const std :: shared_ptr < DnnNodeOutput > & node_output ) override ; private : int model_input_width_ = -1 ; int model_input_height_ = -1 ; const int32_t box_output_index_ = 1 ; sensor_msgs :: msg :: Image :: ConstSharedPtr img_msg_ ; rclcpp :: Subscription < sensor_msgs :: msg :: Image >:: ConstSharedPtr ros_img_subscription_ = nullptr ; }; //输出模型结果，并将结果渲染到图片后保存在本地 int BodyDetNode::PostProcess ( const std :: shared_ptr < DnnNodeOutput > & node_output ) { if ( node_output -> outputs . empty () || static_cast < int32_t > ( node_output -> outputs . size ()) < box_output_index_ ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"example\" ), \"Invalid outputs\" ); return -1 ; } auto * filter2d_result = dynamic_cast < Filter2DResult *> ( node_output -> outputs [ box_output_index_ ]. get ()); if ( ! filter2d_result ) return -1 ; std :: stringstream ss ; ss << \"img encoding: \" << img_msg_ -> encoding << \", stamp: \" << img_msg_ -> header . stamp . sec << \",\" << img_msg_ -> header . stamp . nanosec << \" \\n out box size: \" << filter2d_result -> boxes . size () << \" \\n \" ; cv :: Mat nv12 ( img_msg_ -> height * 3 / 2 , img_msg_ -> width , CV_8UC1 , const_cast < char *> ( reinterpret_cast < const char *> ( img_msg_ -> data . data ()))); cv :: Mat bgr ; cv :: cvtColor ( nv12 , bgr , CV_YUV2BGR_NV12 ); for ( auto & rect : filter2d_result -> boxes ) { ss << \"rect: \" << rect . left << \" \" << rect . top << \" \" << rect . right << \" \" << rect . bottom << \" \\n \" ; // 图片渲染 cv :: rectangle ( bgr , cv :: Point ( rect . left , rect . top ), cv :: Point ( rect . right , rect . bottom ), cv :: Scalar ( 255 , 0 , 0 ), 3 ); } std :: string result_image = \"render_\" + std :: to_string ( img_msg_ -> header . stamp . sec ) + \".\" + std :: to_string ( img_msg_ -> header . stamp . nanosec ) + \".jpg\" ; ss << \"Render img to file: \" << result_image ; RCLCPP_INFO ( rclcpp :: get_logger ( \"example\" ), \"%s\" , ss . str (). c_str ()); cv :: imwrite ( result_image , bgr ); return 0 ; } //将nv12格式的图片转成模型输入的数据类型DNNInput后，输入给推理任务 void BodyDetNode::FeedImg ( const sensor_msgs :: msg :: Image :: ConstSharedPtr img_msg ) { if ( ! img_msg ) return ; if ( \"nv12\" != img_msg -> encoding ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"example\" ), \"Only support nv12 img encoding!\" ); return ; } img_msg_ = img_msg ; // 创建模型输入数据 auto inputs = std :: vector < std :: shared_ptr < DNNInput >> { ImageProc :: GetNV12PyramidFromNV12Img ( reinterpret_cast < const char *> ( img_msg -> data . data ()), img_msg -> height , img_msg -> width , model_input_height_ , model_input_width_ )}; // 运行推理，DnnNode基类中定义并实现的启动推理接口。 Run ( inputs ); } int main ( int argc , char ** argv ) { rclcpp :: init ( argc , argv ); rclcpp :: spin ( std :: make_shared < BodyDetNode > ()); rclcpp :: shutdown (); return 0 ; }","text_tokens":["hpp","config","reinterpret","out","]","run","}","ss","3","cvtcolor","/","postprocess","数据","处理","raw","dnnnodeoutput","para","filter2d","return","stringstream","类型","t","给","create",".","argc","cv","rectangle","render","后","options","info","|","hobot","this","实现","subscriber","[","”","parser","s","本地","left","rect","right","string",",","body","const","(","img","support","运行","empty","yuv2bgr","bodydetnode","hbm","facehanddetectionoutputparser","检测","getmodelinputsize","using","bottom","main","public","placeholders","渲染","获取","=",")","feedimg","outputs","<","output","to","高","result","人体","for","数据类型","ros","名","scalar","将","到",";","转","shared","消息","example","override","parsers","\"","-","#","size","bgr","model","point","only","imwrite","getnv12pyramidfromnv12img","框","文件名","back","任务","node","setnodepara","dnn","nanosec","include","multitask","输出","解析","int","inputs","constsharedptr","invalid","encoding","255","input","logger","*","void","启动","输入","kps","det","name","class","nv12","文件","的","c"," ","成","包括","保存","top","宽","在","+","height","namespace","其中","data","imgcodecs","index","jpg","定义","\\","为","int32","std","中","msgs","10","sec","义","file","util","h","方法","8uc1","尺寸","dnninput","outputparser","opencv2","subscription","使用","cast","error","stamp","结果","前","char","_","header","nullptr","emplace","private","topic","imageproc","和","ptr","image","订阅","推理","算法","boxes","mat","dnnnode","%","创建",":","shutdown","protected","基类","bind","{","argv","static","&","msg","索引","dynamic","接口","core","imgproc","。","模型","格式","spin","2","n","pair","proc","auto","图片","~","fail","nodeoptions","sensor","rclcpp","用于","0","指定","get","!","960x544","if","预定","vector","filter2dresult","str","width","并",">","，","make","1","init","box"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"hhp/5.6_%E4%BA%BA%E4%BD%93%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%B7%9F%E8%B8%AA/#_5","text":"结果保存成图片，虽然便于保留数据，但是不利于动态看到效果，我们不如再来实时动态效果显示。 在这个案例中，我们在之前人体识别的基础上，进一步实现了人体部位的识别和骨骼、眼神等关键点的识别，比如头、脸、身体、手掌、眼睛。 识别的结果同样是通过浏览器来进行查看。 # 启动webserver服务 $ cd /opt/tros/lib/websocket/webservice/ $ chmod +x ./sbin/nginx && ./sbin/nginx -p . # 运行例程 $ source /opt/tros/setup.bash $ cp -r /opt/tros/lib/mono2d_body_detection/config/ . $ ros2 launch /opt/tros/share/mono2d_body_detection/launch/hobot_mono2d_body_detection.launch.py","text_tokens":["config","chmod","不利于","数据","/","ros2","服务","、","mono2d","py","nginx",".","hobot","实现","进行","等","r","脸","查看","body","一步","运行","不利","opt","bash","但是","p","人体","关键","cd","share","sbin","detection","浏览","手掌","识别","-","$","#","tros","基础","了","启动","是","这个","浏览器","的","成"," ","保存","launch","在","实时","+","利于","进一步","再","身体","x","中","看到","source","关键点","便于","结果","动态效果","_","websocket","和","例程","上","部位","眼睛","之前","来","案例","cp","通过","保留","。","不如","头","&&","比如","webserver","同样","图片","lib","我们","显示","webservice","setup","眼神","骨骼","效果","，","动态","虽然"],"title":"人体检测与跟踪","title_tokens":["跟踪","人体","检测","与"]},{"location":"hhp/5.7_%E5%8D%95%E7%9B%AE3D%E5%AE%A4%E5%86%85%E6%A3%80%E6%B5%8B/","text":"单目3D室内检测 接下来，我们继续学习物体 3D 检测算法。 机器人有时候不仅仅要识别出人，还要识别出房间里有什么东西，这就是室内物体 3D 检测啦。 在TogetherROS上，就集成了这样一套算法，接下来让我们一起来体验以下吧。 先来看一张图片，很明显大家可以看到图中有两个垃圾桶。 运行示例程序 # 配置ROS2环境 $ source /opt/tros/setup.bash # 从tros的安装路径中拷贝出运行示例需要的配置文件。 $ cp -r /opt/tros/lib/mono3d_indoor_detection/config/ . # 启动launch文件 $ ros2 launch /opt/tros/share/mono3d_indoor_detection/launch/mono3d_indoor_detection.launch.py [ INFO ] [ 1654858490 .168592166 ] [ mono3d_detection ] : target type: trash_can [ INFO ] [ 1654858490 .168644750 ] [ mono3d_detection ] : target type: width, value: 236 .816406 [ INFO ] [ 1654858490 .168704333 ] [ mono3d_detection ] : target type: height, value: 305 .664062 [ INFO ] [ 1654858490 .168759584 ] [ mono3d_detection ] : target type: length, value: 224 .182129 [ INFO ] [ 1654858490 .168812334 ] [ mono3d_detection ] : target type: rotation, value: -1571.989179 [ INFO ] [ 1654858490 .168862543 ] [ mono3d_detection ] : target type: x, value: -191.977829 [ INFO ] [ 1654858490 .168916168 ] [ mono3d_detection ] : target type: y, value: -143.963307 [ INFO ] [ 1654858490 .168966502 ] [ mono3d_detection ] : target type: z, value: 714 .024127 [ INFO ] [ 1654858490 .169016794 ] [ mono3d_detection ] : target type: depth, value: 714 .024127 [ INFO ] [ 1654858490 .169067461 ] [ mono3d_detection ] : target type: score, value: 0 .973215 [ INFO ] [ 1654858490 .169168795 ] [ mono3d_detection ] : target type: trash_can [ INFO ] [ 1654858490 .169212837 ] [ mono3d_detection ] : target type: width, value: 253 .051758 [ INFO ] [ 1654858490 .169265004 ] [ mono3d_detection ] : target type: height, value: 282 .348633 [ INFO ] [ 1654858490 .169317046 ] [ mono3d_detection ] : target type: length, value: 257 .934570 [ INFO ] [ 1654858490 .169368921 ] [ mono3d_detection ] : target type: rotation, value: -1542.727947 [ INFO ] [ 1654858490 .169418671 ] [ mono3d_detection ] : target type: x, value: 552 .459776 [ INFO ] [ 1654858490 .169470588 ] [ mono3d_detection ] : target type: y, value: -164.073169 [ INFO ] [ 1654858490 .169517505 ] [ mono3d_detection ] : target type: z, value: 1088 .358164 [ INFO ] [ 1654858490 .169566839 ] [ mono3d_detection ] : target type: depth, value: 1088 .358164 [ INFO ] [ 1654858490 .169616464 ] [ mono3d_detection ] : target type: score, value: 0 .875521 很明显，已经识别到了两个垃圾桶。 代码解析 // Copyright (c) 2022，Horizon Robotics. // // Licensed under the Apache License, Version 2.0 (the \"License\"); // you may not use this file except in compliance with the License. // You may obtain a copy of the License at // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an \"AS IS\" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. #include \"include/centernet_3d_detection_node.h\" #include <unistd.h> #include <fstream> #include <memory> #include <string> #include <vector> #include \"dnn_node/dnn_node.h\" #include \"include/image_utils.h\" #include \"rclcpp/rclcpp.hpp\" #include <sys/stat.h> #ifdef CV_BRIDGE_PKG_ENABLED #include <cv_bridge/cv_bridge.h> #endif using hobot :: easy_dnn :: OutputDescription ; using hobot :: easy_dnn :: OutputParser ; CenterNet3DDetectionNode :: CenterNet3DDetectionNode ( const std :: string & node_name , const NodeOptions & options ) : DnnNode ( node_name , options ), output_frameCount_ ( 0 ) { this -> declare_parameter < int > ( \"is_sync_mode\" , is_sync_mode_ ); this -> declare_parameter < std :: string > ( \"config_file_path\" , config_file_path_ ); this -> declare_parameter < int > ( \"shared_mem\" , shared_mem_ ); this -> declare_parameter < std :: string > ( \"ai_msg_pub_topic_name\" , msg_pub_topic_name_ ); this -> declare_parameter < std :: string > ( \"image_sub_topic_name\" , ros_img_topic_name_ ); this -> declare_parameter < std :: string > ( \"feed_image\" , feed_image_ ); this -> get_parameter < int > ( \"is_sync_mode\" , is_sync_mode_ ); this -> get_parameter < std :: string > ( \"config_file_path\" , config_file_path_ ); this -> get_parameter < int > ( \"shared_mem\" , shared_mem_ ); this -> get_parameter < std :: string > ( \"ai_msg_pub_topic_name\" , msg_pub_topic_name_ ); this -> get_parameter < std :: string > ( \"image_sub_topic_name\" , ros_img_topic_name_ ); this -> get_parameter < std :: string > ( \"feed_image\" , feed_image_ ); model_file_name_ = config_file_path_ + \"/centernet.hbm\" ; mkdir ( \"./result/\" , 666 ); std :: stringstream ss ; ss << \"Parameter:\" << \" \\n config_file_path_:\" << config_file_path_ << \" \\n shared_men:\" << shared_mem_ << \" \\n is_sync_mode_: \" << is_sync_mode_ << \" \\n model_file_name_: \" << model_file_name_ << \" \\n feed_image:\" << feed_image_ ; RCLCPP_WARN ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"%s\" , ss . str (). c_str ()); if ( Start () == 0 ) { RCLCPP_WARN ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"start success!!!\" ); } else { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"start fail!!!\" ); } } CenterNet3DDetectionNode ::~ CenterNet3DDetectionNode () {} int CenterNet3DDetectionNode :: Start () { int ret = Init (); if ( ret != 0 ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Init failed!\" ); return ret ; } ret = GetModelInputSize ( 0 , model_input_width_ , model_input_height_ ); if ( ret < 0 ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Get model input size fail!\" ); return ret ; } RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"The model input width is %d and height is %d\" , model_input_width_ , model_input_height_ ); msg_publisher_ = this -> create_publisher < ai_msgs :: msg :: PerceptionTargets > ( msg_pub_topic_name_ , 10 ); RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"msg_pub_topic_name: %s\" , msg_pub_topic_name_ . data ()); if ( ! feed_image_ . empty ()) { std :: cout << \"mono3d read image:\" << feed_image_ << \" to detect\" << std :: endl ; PredictByImage ( feed_image_ ); return 0 ; } // RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Detect images that use subscriptions\" ); if ( shared_mem_ ) { #ifdef SHARED_MEM_ENABLED RCLCPP_WARN ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Create hbmem_subscription with topic_name: %s\" , sharedmem_img_topic_name_ . c_str ()); sharedmem_img_subscription_ = this -> create_subscription_hbmem < hbm_img_msgs :: msg :: HbmMsg1080P > ( sharedmem_img_topic_name_ , 10 , std :: bind ( & CenterNet3DDetectionNode :: SharedMemImgProcess , this , std :: placeholders :: _1 )); #else RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Unsupport shared mem\" ); #endif } else { RCLCPP_WARN ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Create subscription with topic_name: %s\" , ros_img_topic_name_ . c_str ()); ros_img_subscription_ = this -> create_subscription < sensor_msgs :: msg :: Image > ( ros_img_topic_name_ , 10 , std :: bind ( & CenterNet3DDetectionNode :: RosImgProcess , this , std :: placeholders :: _1 )); } return 0 ; } int CenterNet3DDetectionNode :: SetNodePara () { RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Set node para.\" ); if ( ! dnn_node_para_ptr_ ) { return -1 ; } dnn_node_para_ptr_ -> model_file = model_file_name_ ; dnn_node_para_ptr_ -> model_name = model_name_ ; dnn_node_para_ptr_ -> model_task_type = model_task_type_ ; dnn_node_para_ptr_ -> task_num = 1 ; return 0 ; } int CenterNet3DDetectionNode :: SetOutputParser () { // set output parser auto model_manage = GetModel (); if ( ! model_manage || ! dnn_node_para_ptr_ ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Invalid model\" ); return -1 ; } if ( model_manage -> GetOutputCount () < model_output_count_ ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Error! Model %s output count is %d, unmatch with count %d\" , dnn_node_para_ptr_ -> model_name . c_str (), model_manage -> GetOutputCount (), model_output_count_ ); return -1 ; } for ( int i = 0 ; i < output_index_ ; ++ i ) { std :: shared_ptr < OutputParser > assist_parser = std :: make_shared < CenterNet3DAssistParser > (); model_manage -> SetOutputParser ( i , assist_parser ); } // set 3D paser auto output_desc = std :: make_shared < OutputDescription > ( model_manage , output_index_ , \"3D_branch\" ); for ( int i = 0 ; i < output_index_ ; ++ i ) { output_desc -> GetDependencies (). push_back ( i ); } output_desc -> SetType ( \"3D\" ); model_manage -> SetOutputDescription ( output_desc ); std :: shared_ptr < OutputParser > out_parser = std :: make_shared < CenterNet3DOutputParser > ( config_file_path_ ); model_manage -> SetOutputParser ( output_index_ , out_parser ); return 0 ; } #define CV_DRAW_LINE(p0, p1) \\ cv::line(image, cv::Point(points[p0][0], points[p0][1]), \\ cv::Point(points[p1][0], points[p1][1]), \\ CV_RGB(0, 255, 0), 2); #define CV_PUT_TEXT(text, px, py, offset) \\ { double fontScale = 3.0l; int thickness = 3u, baseline; \\ cv::Size text_size = cv::getTextSize(text, \\ cv::HersheyFonts::FONT_HERSHEY_PLAIN, fontScale, thickness, &baseline); \\ cv::Point point(px , py); \\ point.y += offset;\\ cv::Rect rect(point.x, point.y, \\ text_size.width, text_size.height); \\ point.y += text_size.height;\\ offset += text_size.height;\\ cv::putText(image, text, point, \\ cv::HersheyFonts::FONT_HERSHEY_PLAIN, \\ fontScale, CV_RGB(0, 255, 128), thickness); } void Render3DBox ( const BBox3D & box , cv :: Mat & image ) { auto & points = box . corners2d_upscale ; CV_DRAW_LINE ( 0 , 1 ) CV_DRAW_LINE ( 0 , 3 ) CV_DRAW_LINE ( 0 , 4 ) CV_DRAW_LINE ( 1 , 2 ) CV_DRAW_LINE ( 1 , 5 ) CV_DRAW_LINE ( 2 , 3 ) CV_DRAW_LINE ( 2 , 6 ) CV_DRAW_LINE ( 3 , 7 ) CV_DRAW_LINE ( 4 , 5 ) CV_DRAW_LINE ( 4 , 7 ) CV_DRAW_LINE ( 5 , 6 ) CV_DRAW_LINE ( 6 , 7 ) std :: string box_type = std :: to_string ( box . class_label ); std :: string score = std :: to_string ( box . score ); int offset = 0 ; if ( - M_PI_2 <= box . r || box . r <= M_PI_2 ) { CV_PUT_TEXT ( box_type , points [ 7 ][ 0 ], points [ 7 ][ 1 ], offset ); CV_PUT_TEXT ( score , points [ 7 ][ 0 ], points [ 7 ][ 1 ], offset ); } else { CV_PUT_TEXT ( box_type , points [ 6 ][ 0 ], points [ 6 ][ 1 ], offset ); CV_PUT_TEXT ( score , points [ 6 ][ 0 ], points [ 6 ][ 1 ], offset ); } } int CenterNet3DDetectionNode :: PostProcess ( const std :: shared_ptr < DnnNodeOutput > & node_output ) { if ( ! msg_publisher_ ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"example\" ), \"Invalid msg_publisher_\" ); return -1 ; } struct timespec time_start = { 0 , 0 }; clock_gettime ( CLOCK_REALTIME , & time_start ); ai_msgs :: msg :: Perf perf ; perf . set__type ( \"PostProcess\" ); perf . stamp_start . sec = time_start . tv_sec ; perf . stamp_start . nanosec = time_start . tv_nsec ; auto centernet_3d_output = std :: dynamic_pointer_cast < CenterNet3DOutput > ( node_output ); if ( centernet_3d_output ) { std :: stringstream ss ; ss << \"3D output dection info\" ; if ( centernet_3d_output -> image_msg_header_ ) { ss << \", frame_id: \" << centernet_3d_output -> image_msg_header_ -> frame_id << \", stamp: \" << centernet_3d_output -> image_msg_header_ -> stamp . sec << \".\" << centernet_3d_output -> image_msg_header_ -> stamp . nanosec ; } RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"%s\" , ss . str (). c_str ()); } const auto & outputs = node_output -> outputs ; RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"outputs size: %d\" , outputs . size ()); if ( outputs . empty () || static_cast < int32_t > ( outputs . size ()) < model_output_count_ ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Invalid outputs\" ); return -1 ; } int smart_fps = 0 ; { auto tp_now = std :: chrono :: system_clock :: now (); output_frameCount_ ++ ; auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( tp_now - output_tp_ ) . count (); if ( interval >= 1000 ) { smart_fps = output_frameCount_ ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Smart fps = %d\" , smart_fps ); output_frameCount_ = 0 ; output_tp_ = std :: chrono :: system_clock :: now (); } } ai_msgs :: msg :: PerceptionTargets :: UniquePtr pub_data ( new ai_msgs :: msg :: PerceptionTargets ()); if ( centernet_3d_output -> image_msg_header_ ) { pub_data -> header . set__stamp ( centernet_3d_output -> image_msg_header_ -> stamp ); pub_data -> header . set__frame_id ( centernet_3d_output -> image_msg_header_ -> frame_id ); } pub_data -> set__fps ( smart_fps ); auto * det_result = dynamic_cast < CenterNet3DDetResult *> ( outputs [ output_index_ ]. get ()); if ( ! det_result ) { RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"invalid cast\" ); } else { RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"out box size: %d\" , det_result -> boxes . size ()); std :: map < std :: string , ai_msgs :: msg :: Target > target_list ; std :: vector < ai_msgs :: msg :: Target > targets ; targets . reserve ( det_result -> boxes . size ()); for ( auto & box : det_result -> boxes ) { ai_msgs :: msg :: Target target ; switch ( box . class_label ) { case BBox3D :: CHARGING_BASE : target . type = \"charging_base\" ; break ; case BBox3D :: SLIPPER : target . type = \"slipper\" ; break ; case BBox3D :: TRASH_CAN : target . type = \"trash_can\" ; break ; } RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s\" , target . type . c_str ()); ai_msgs :: msg :: Attribute attribute ; ai_msgs :: msg :: Point point ; attribute . type = \"width\" ; attribute . value = box . w * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"height\" ; attribute . value = box . h * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"length\" ; attribute . value = box . l * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"rotation\" ; attribute . value = box . r * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"x\" ; attribute . value = box . x * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"y\" ; attribute . value = box . y * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"z\" ; attribute . value = box . z * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"depth\" ; attribute . value = box . d * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"score\" ; attribute . value = box . score * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), box . score ); target . attributes . push_back ( attribute ); // 8 corners /* 4----------5 6----------7 /| /| /| /| / | / | / | / | / | / | / | / | 7---|------6 |5---|------4 | | | | || | | | | | | || | | | | 0------|---1| 2------|---3 | / | / | / | / | / ^ | / | / v | / |/ |/ |/ |/ 3----------2 1----------0 */ for ( const auto & corners : box . corners2d_upscale ) { geometry_msgs :: msg :: Point32 g_point ; g_point . x = corners [ 0 ]; g_point . y = corners [ 1 ]; point . point . push_back ( g_point ); } point . type = \"corners\" ; target . points . push_back ( point ); targets . push_back ( target ); } pub_data -> targets = std :: move ( targets ); if ( ! centernet_3d_output -> image_name_ . empty ()) { auto img_bgr = cv :: imread ( centernet_3d_output -> image_name_ ); for ( auto & box : det_result -> boxes ) { Render3DBox ( box , img_bgr ); } std :: string :: size_type iPos = centernet_3d_output -> image_name_ . find_last_of ( '/' ) + 1 ; std :: string filename = centernet_3d_output -> image_name_ . substr ( iPos , centernet_3d_output -> image_name_ . length () - iPos ); cv :: imwrite ( \"./result/\" + filename , img_bgr ); } } clock_gettime ( CLOCK_REALTIME , & time_start ); perf . stamp_end . sec = time_start . tv_sec ; perf . stamp_end . nanosec = time_start . tv_nsec ; pub_data -> perfs . emplace_back ( perf ); msg_publisher_ -> publish ( std :: move ( pub_data )); return 0 ; } int CenterNet3DDetectionNode :: Predict ( std :: vector < std :: shared_ptr < DNNInput >> & inputs , const std :: shared_ptr < std :: vector < hbDNNRoi >> rois , std :: shared_ptr < DnnNodeOutput > dnn_output ) { return Run ( inputs , dnn_output , rois , is_sync_mode_ == 1 ); } void CenterNet3DDetectionNode :: RosImgProcess ( const sensor_msgs :: msg :: Image :: ConstSharedPtr img_msg ) { if ( ! img_msg || ! rclcpp :: ok ()) { return ; } std :: stringstream ss ; ss << \"Recved img encoding: \" << img_msg -> encoding << \", h: \" << img_msg -> height << \", w: \" << img_msg -> width << \", step: \" << img_msg -> step << \", frame_id: \" << img_msg -> header . frame_id << \", stamp: \" << img_msg -> header . stamp . sec << \".\" << img_msg -> header . stamp . nanosec << \", data size: \" << img_msg -> data . size (); RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"%s\" , ss . str (). c_str ()); auto tp_start = std :: chrono :: system_clock :: now (); // 1. 将图片处理成模型输入数据类型DNNInput // 使用图片生成pym，NV12PyramidInput为DNNInput的子类 std :: shared_ptr < hobot :: easy_dnn :: NV12PyramidInput > pyramid = nullptr ; if ( \"rgb8\" == img_msg -> encoding ) { #ifdef CV_BRIDGE_PKG_ENABLED auto cv_img = cv_bridge :: cvtColorForDisplay ( cv_bridge :: toCvShare ( img_msg ), \"bgr8\" ); { auto tp_now = std :: chrono :: system_clock :: now (); auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( tp_now - tp_start ) . count (); RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"after cvtColorForDisplay cost ms: %d\" , interval ); } pyramid = ImageUtils :: GetNV12Pyramid ( cv_img -> image , model_input_height_ , model_input_width_ ); #else RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Unsupport cv bridge\" ); #endif } else if ( \"nv12\" == img_msg -> encoding ) { pyramid = ImageUtils :: GetNV12PyramidFromNV12Img ( reinterpret_cast < const char *> ( img_msg -> data . data ()), img_msg -> height , img_msg -> width , model_input_height_ , model_input_width_ ); } if ( ! pyramid ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Get Nv12 pym fail\" ); return ; } { auto tp_now = std :: chrono :: system_clock :: now (); auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( tp_now - tp_start ) . count (); RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"after GetNV12Pyramid cost ms: %d\" , interval ); } RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Dnn node begin to predict\" ); // 2. 使用pyramid创建DNNInput对象inputs // inputs将会作为模型的输入通过RunInferTask接口传入 auto inputs = std :: vector < std :: shared_ptr < DNNInput >> { pyramid }; auto dnn_output = std :: make_shared < CenterNet3DOutput > (); dnn_output -> src_img_width_ = img_msg -> width ; dnn_output -> src_img_height_ = img_msg -> height ; dnn_output -> image_msg_header_ = std :: make_shared < std_msgs :: msg :: Header > (); dnn_output -> image_msg_header_ -> set__frame_id ( img_msg -> header . frame_id ); dnn_output -> image_msg_header_ -> set__stamp ( img_msg -> header . stamp ); dnn_output -> image_name_ = \"\" ; // 3. 开始预测 uint32_t ret = Predict ( inputs , nullptr , dnn_output ); { auto tp_now = std :: chrono :: system_clock :: now (); auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( tp_now - tp_start ) . count (); RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"after Predict cost ms: %d\" , interval ); } if ( ret != 0 ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"predict img failed!\" ); } return ; } int CenterNet3DDetectionNode :: PredictByImage ( const std :: string & image ) { // 1. 将图片处理成模型输入数据类型DNNInput // 使用图片生成pym，NV12PyramidInput为DNNInput的子类 std :: shared_ptr < hobot :: easy_dnn :: NV12PyramidInput > pyramid = nullptr ; // bgr img，支持将图片resize到模型输入size pyramid = ImageUtils :: GetNV12Pyramid ( image , ImageType :: BGR , model_input_height_ , model_input_width_ ); if ( ! pyramid ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Get Nv12 pym fail with image: %s\" , image . c_str ()); return -1 ; } // 2. 使用pyramid创建DNNInput对象inputs // inputs将会作为模型的输入通过RunInferTask接口传入 auto inputs = std :: vector < std :: shared_ptr < DNNInput >> { pyramid }; auto dnn_output = std :: make_shared < CenterNet3DOutput > (); dnn_output -> src_img_width_ = 1920 ; dnn_output -> src_img_height_ = 1024 ; dnn_output -> image_msg_header_ = std :: make_shared < std_msgs :: msg :: Header > (); dnn_output -> image_msg_header_ -> set__frame_id ( \"test_frame\" ); dnn_output -> image_msg_header_ -> set__stamp ( rclcpp :: Time ()); dnn_output -> image_name_ = image ; // dnn_output->image_msg_header->set__frame_id(std::to_string(img_msg->index)); // dnn_output->image_msg_header->set__stamp(img_msg->time_stamp); // 3. 开始预测 uint32_t ret = Predict ( inputs , nullptr , dnn_output ); if ( ret != 0 ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"predict img failed!\" ); } return ret ; } #ifdef SHARED_MEM_ENABLED void CenterNet3DDetectionNode :: SharedMemImgProcess ( const hbm_img_msgs :: msg :: HbmMsg1080P :: ConstSharedPtr img_msg ) { if ( ! img_msg || ! rclcpp :: ok ()) { return ; } RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"go into shared mem\" ); // dump recved img msg // std::ofstream ofs(\"img_\" + std::to_string(img_msg->index) + \".\" + // std::string(reinterpret_cast<const char*>(img_msg->encoding.data()))); // ofs.write(reinterpret_cast<const char*>(img_msg->data.data()), // img_msg->data_size); auto tp_start = std :: chrono :: system_clock :: now (); // 1. 将图片处理成模型输入数据类型DNNInput // 使用图片生成pym，NV12PyramidInput为DNNInput的子类 std :: shared_ptr < hobot :: easy_dnn :: NV12PyramidInput > pyramid = nullptr ; if ( \"nv12\" == std :: string ( reinterpret_cast < const char *> ( img_msg -> encoding . data ()))) { pyramid = ImageUtils :: GetNV12PyramidFromNV12Img ( reinterpret_cast < const char *> ( img_msg -> data . data ()), img_msg -> height , img_msg -> width , model_input_height_ , model_input_width_ ); } else { RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"share mem unsupported img encoding: %s\" , img_msg -> encoding ); } if ( ! pyramid ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Get Nv12 pym fail!\" ); return ; } { auto tp_now = std :: chrono :: system_clock :: now (); auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( tp_now - tp_start ) . count (); RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"after GetNV12Pyramid cost ms: %d\" , interval ); } // 2. 使用pyramid创建DNNInput对象inputs // inputs将会作为模型的输入通过RunInferTask接口传入 auto inputs = std :: vector < std :: shared_ptr < DNNInput >> { pyramid }; auto dnn_output = std :: make_shared < CenterNet3DOutput > (); dnn_output -> src_img_width_ = img_msg -> width ; dnn_output -> src_img_height_ = img_msg -> height ; dnn_output -> image_msg_header_ = std :: make_shared < std_msgs :: msg :: Header > (); dnn_output -> image_msg_header_ -> set__frame_id ( std :: to_string ( img_msg -> index )); dnn_output -> image_msg_header_ -> set__stamp ( img_msg -> time_stamp ); // 3. 开始预测 int ret = Predict ( inputs , nullptr , dnn_output ); { auto tp_now = std :: chrono :: system_clock :: now (); auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( tp_now - tp_start ) . count (); RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"after Predict cost ms: %d\" , interval ); } // 4. 处理预测结果，如渲染到图片或者发布预测结果 if ( ret != 0 ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Run predict failed!\" ); } return ; } #endif","text_tokens":["f","out","ss","就","a","ofstream","处理","dnnnodeoutput","配置","puttext","apache","p0","failed","pointer","any","detect","desc","options","path","info","|","hobot","trash","机器人","s","under","051758","copy","rect",",","714","有时候","257","检测","gettextsize","getmodelinputsize","using","getmodel","bgr8",")","生成","clock","已经","973215","find","1000","1654858490","169368921","count","pkg","hbmem","到",";","shared","imread","example","ok","geometry","\"","#","switch","^","dnn","include","go","解析","inputs","plain","constsharedptr","encoding","需要","还要","move","det","路径","有","unistd","name","class","以下","文件","的","fontscale","169470588","realtime","rotation","hershey","168862543","use","data","集成","corners2d","中","将会","source","出人","you","子类","filename","cast","emplace","y","168759584","程序","上","centernet3ddetresult","664062","image","boxes","算法","hersheyfonts",":","express","by","of","bind","pub","imageutils","发布","224","timespec","。","value","6","n","ifdef","__","centernet","nodeoptions","8","接下","nsec","publisher","enabled","164.073169","182129","v","setoutputdescription","width","settype","step","rosimgprocess","slipper","hpp","一","ai","}","3","the","para","return","governing","feed","stringstream","upscale","centernet3doutput","endl","开始","py","时候",".","出","start","168592166","type","吧","an","endif","src","licensed","169566839","specific","break","version","const","predictbyimage","interval","struct","305","placeholders","success","282","substr","outputs","数据类型","ros","sharedmemimgprocess","将","images","对象","816406","recved","fps","getnv12pyramid","识别","$","bgr","168916168","model","point","kind","either","back","rgb","offset","new","at","2.0","invalid","double","255","启动","i","void","id","write","applicable","basis","cost","ms","launch","先","is","+","sync","或者","x","pym","unsupported","gettime","为","that","dection","depth","h","px","3.0","dnninput","targets","stamp","resize","mkdir","结果","into","_","191.977829","fstream","nullptr","outputdescription","ptr","东西","024127","sub","mono3d","两个","static","1571.989179","接口","men","代码","debug","934570","从","模型","agreed","lib","169067461","我们","0","!","map","chrono","render3dbox","setup","set","attribute","'","pyramid","---","last","point32","branch",">","，","make","作为","1","language","配置文件","init","box","reinterpret","有时","run","358164","postprocess","with","limitations","thickness","can","put","3u","5","1088","类型","on","num","t","来看","manage","software","as","writing","indoor","sharedmem","line","啦","assist","房间","(","img","169265004","128","reserve","w","不仅","渲染","=","output","to","base","text","subscriptions","168966502","uint32","share","detection","centernet3doutputparser","attributes","framecount","may","in","size","perceptiontargets","169517505","node","bridge","nanosec","垃圾","143.963307","4","1024","d","logger","input","*","输入","easy","236","define","centernet3dassistparser","perf","一套","nv12","c","成","里","distributed","license","length","paser","parameter","m","copyright","物体","msgs","begin","sys","10","sec","室内","org","test","要","outputparser","使用","frame","传入","uniqueptr","header","milliseconds","很","predict","required","charging","read","3d","169317046","or","552","dnnnode","875521","%","push","创建","169016794","接下来","baseline","{","++","&","msg","7","memory","可以","~","459776","环境","without","tocvshare","time","预测","vector","setoutputparser","安装","------","垃圾桶","继续","nv12pyramidinput","ofs","一张","warn","mode","config","168812334","]","/","拷贝","数据","dump","unsupport","togetherros","ros2","2022","g","system","target","1542.727947","create","cv","this","points","horizon","[","parser","runinfertask","obtain","r","大家","rgb8","permissions","string","getdependencies","p1","运行","empty","hbm","起来","after","z","opt","not","stat","case","hbdnnroi","smart","rois","bash","<","示例","mem","ipos","253","result","for","tp","cout","168704333","declare","-","imagetype","这样","utils","score","imwrite","getnv12pyramidfromnv12img","perfs","setnodepara","tros","ret","int","了","else","now","bbox3d","机器","169212837","如"," ","明显","----------","在","height","font","666","task","不仅仅","index","\\","169418671","int32","std","看到","图中","duration","file","label","169616464","conditions","subscription","list","http","348633","error","char","学习","topic","单目","licenses","这","robotics","law","mat","www","getoutputcount","end","cp","通过","体验","tv","dynamic","warranties","draw","168644750","就是","什么","pi","2","unmatch","unless","auto","图片","see","cvtcolorfordisplay","fail","and","rclcpp","hbmmsg1080p","sensor","l","compliance","get","except","if","仅仅","corners","169168795","下来","str","implied","centernet3ddetectionnode","支持","让","1920","publish"],"title":"单目3D室内检测","title_tokens":["检测","3d","单目","室内"]},{"location":"hhp/5.7_%E5%8D%95%E7%9B%AE3D%E5%AE%A4%E5%86%85%E6%A3%80%E6%B5%8B/#3d","text":"接下来，我们继续学习物体 3D 检测算法。 机器人有时候不仅仅要识别出人，还要识别出房间里有什么东西，这就是室内物体 3D 检测啦。 在TogetherROS上，就集成了这样一套算法，接下来让我们一起来体验以下吧。 先来看一张图片，很明显大家可以看到图中有两个垃圾桶。","text_tokens":["东西","有","机器","有时","一套","一","以下","就","接下来"," ","里","两个","明显","先","togetherros","在","体验","。","就是","什么","集成","不仅仅","时候","来看","出","图片","可以","物体","看到","图中","我们","吧","识别","接下","出人","室内","机器人","要","这样","啦","一张","大家","仅仅","房间","学习","下来","垃圾桶","继续","垃圾","让","很","上","有时候","了","起来","，","检测","还要","这","不仅","算法","3d"],"title":"单目3D室内检测","title_tokens":["检测","3d","单目","室内"]},{"location":"hhp/5.7_%E5%8D%95%E7%9B%AE3D%E5%AE%A4%E5%86%85%E6%A3%80%E6%B5%8B/#_1","text":"# 配置ROS2环境 $ source /opt/tros/setup.bash # 从tros的安装路径中拷贝出运行示例需要的配置文件。 $ cp -r /opt/tros/lib/mono3d_indoor_detection/config/ . # 启动launch文件 $ ros2 launch /opt/tros/share/mono3d_indoor_detection/launch/mono3d_indoor_detection.launch.py [ INFO ] [ 1654858490 .168592166 ] [ mono3d_detection ] : target type: trash_can [ INFO ] [ 1654858490 .168644750 ] [ mono3d_detection ] : target type: width, value: 236 .816406 [ INFO ] [ 1654858490 .168704333 ] [ mono3d_detection ] : target type: height, value: 305 .664062 [ INFO ] [ 1654858490 .168759584 ] [ mono3d_detection ] : target type: length, value: 224 .182129 [ INFO ] [ 1654858490 .168812334 ] [ mono3d_detection ] : target type: rotation, value: -1571.989179 [ INFO ] [ 1654858490 .168862543 ] [ mono3d_detection ] : target type: x, value: -191.977829 [ INFO ] [ 1654858490 .168916168 ] [ mono3d_detection ] : target type: y, value: -143.963307 [ INFO ] [ 1654858490 .168966502 ] [ mono3d_detection ] : target type: z, value: 714 .024127 [ INFO ] [ 1654858490 .169016794 ] [ mono3d_detection ] : target type: depth, value: 714 .024127 [ INFO ] [ 1654858490 .169067461 ] [ mono3d_detection ] : target type: score, value: 0 .973215 [ INFO ] [ 1654858490 .169168795 ] [ mono3d_detection ] : target type: trash_can [ INFO ] [ 1654858490 .169212837 ] [ mono3d_detection ] : target type: width, value: 253 .051758 [ INFO ] [ 1654858490 .169265004 ] [ mono3d_detection ] : target type: height, value: 282 .348633 [ INFO ] [ 1654858490 .169317046 ] [ mono3d_detection ] : target type: length, value: 257 .934570 [ INFO ] [ 1654858490 .169368921 ] [ mono3d_detection ] : target type: rotation, value: -1542.727947 [ INFO ] [ 1654858490 .169418671 ] [ mono3d_detection ] : target type: x, value: 552 .459776 [ INFO ] [ 1654858490 .169470588 ] [ mono3d_detection ] : target type: y, value: -164.073169 [ INFO ] [ 1654858490 .169517505 ] [ mono3d_detection ] : target type: z, value: 1088 .358164 [ INFO ] [ 1654858490 .169566839 ] [ mono3d_detection ] : target type: depth, value: 1088 .358164 [ INFO ] [ 1654858490 .169616464 ] [ mono3d_detection ] : target type: score, value: 0 .875521 很明显，已经识别到了两个垃圾桶。","text_tokens":["config","168812334","]","358164","/","拷贝","ros2","配置","can","target","1088","1542.727947","py",".","出","168592166","info","type","indoor","[","trash","r","051758","169566839",",","运行","169265004","305","714","257","z","opt","282","bash","示例","已经","973215","253","1654858490","169368921","168966502","168704333","到","share","detection","816406","识别","-","$","#","168916168","score","169517505","tros","143.963307","垃圾","了","需要","启动","236","路径","文件","169212837","的"," ","169470588","length","明显","launch","rotation","height","168862543","x","169418671","中","source","depth","169616464","348633","_","191.977829","y","168759584","很","664062","169317046","552","875521","024127","169016794",":","mono3d","两个","cp","224","1571.989179","168644750","。","934570","从","value","lib","169067461","459776","0","环境","164.073169","setup","169168795","182129","安装","垃圾桶","width","，","配置文件"],"title":"运行示例程序","title_tokens":["示例","程序","运行"]},{"location":"hhp/5.7_%E5%8D%95%E7%9B%AE3D%E5%AE%A4%E5%86%85%E6%A3%80%E6%B5%8B/#_2","text":"// Copyright (c) 2022，Horizon Robotics. // // Licensed under the Apache License, Version 2.0 (the \"License\"); // you may not use this file except in compliance with the License. // You may obtain a copy of the License at // // http://www.apache.org/licenses/LICENSE-2.0 // // Unless required by applicable law or agreed to in writing, software // distributed under the License is distributed on an \"AS IS\" BASIS, // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. // See the License for the specific language governing permissions and // limitations under the License. #include \"include/centernet_3d_detection_node.h\" #include <unistd.h> #include <fstream> #include <memory> #include <string> #include <vector> #include \"dnn_node/dnn_node.h\" #include \"include/image_utils.h\" #include \"rclcpp/rclcpp.hpp\" #include <sys/stat.h> #ifdef CV_BRIDGE_PKG_ENABLED #include <cv_bridge/cv_bridge.h> #endif using hobot :: easy_dnn :: OutputDescription ; using hobot :: easy_dnn :: OutputParser ; CenterNet3DDetectionNode :: CenterNet3DDetectionNode ( const std :: string & node_name , const NodeOptions & options ) : DnnNode ( node_name , options ), output_frameCount_ ( 0 ) { this -> declare_parameter < int > ( \"is_sync_mode\" , is_sync_mode_ ); this -> declare_parameter < std :: string > ( \"config_file_path\" , config_file_path_ ); this -> declare_parameter < int > ( \"shared_mem\" , shared_mem_ ); this -> declare_parameter < std :: string > ( \"ai_msg_pub_topic_name\" , msg_pub_topic_name_ ); this -> declare_parameter < std :: string > ( \"image_sub_topic_name\" , ros_img_topic_name_ ); this -> declare_parameter < std :: string > ( \"feed_image\" , feed_image_ ); this -> get_parameter < int > ( \"is_sync_mode\" , is_sync_mode_ ); this -> get_parameter < std :: string > ( \"config_file_path\" , config_file_path_ ); this -> get_parameter < int > ( \"shared_mem\" , shared_mem_ ); this -> get_parameter < std :: string > ( \"ai_msg_pub_topic_name\" , msg_pub_topic_name_ ); this -> get_parameter < std :: string > ( \"image_sub_topic_name\" , ros_img_topic_name_ ); this -> get_parameter < std :: string > ( \"feed_image\" , feed_image_ ); model_file_name_ = config_file_path_ + \"/centernet.hbm\" ; mkdir ( \"./result/\" , 666 ); std :: stringstream ss ; ss << \"Parameter:\" << \" \\n config_file_path_:\" << config_file_path_ << \" \\n shared_men:\" << shared_mem_ << \" \\n is_sync_mode_: \" << is_sync_mode_ << \" \\n model_file_name_: \" << model_file_name_ << \" \\n feed_image:\" << feed_image_ ; RCLCPP_WARN ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"%s\" , ss . str (). c_str ()); if ( Start () == 0 ) { RCLCPP_WARN ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"start success!!!\" ); } else { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"start fail!!!\" ); } } CenterNet3DDetectionNode ::~ CenterNet3DDetectionNode () {} int CenterNet3DDetectionNode :: Start () { int ret = Init (); if ( ret != 0 ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Init failed!\" ); return ret ; } ret = GetModelInputSize ( 0 , model_input_width_ , model_input_height_ ); if ( ret < 0 ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Get model input size fail!\" ); return ret ; } RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"The model input width is %d and height is %d\" , model_input_width_ , model_input_height_ ); msg_publisher_ = this -> create_publisher < ai_msgs :: msg :: PerceptionTargets > ( msg_pub_topic_name_ , 10 ); RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"msg_pub_topic_name: %s\" , msg_pub_topic_name_ . data ()); if ( ! feed_image_ . empty ()) { std :: cout << \"mono3d read image:\" << feed_image_ << \" to detect\" << std :: endl ; PredictByImage ( feed_image_ ); return 0 ; } // RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Detect images that use subscriptions\" ); if ( shared_mem_ ) { #ifdef SHARED_MEM_ENABLED RCLCPP_WARN ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Create hbmem_subscription with topic_name: %s\" , sharedmem_img_topic_name_ . c_str ()); sharedmem_img_subscription_ = this -> create_subscription_hbmem < hbm_img_msgs :: msg :: HbmMsg1080P > ( sharedmem_img_topic_name_ , 10 , std :: bind ( & CenterNet3DDetectionNode :: SharedMemImgProcess , this , std :: placeholders :: _1 )); #else RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Unsupport shared mem\" ); #endif } else { RCLCPP_WARN ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Create subscription with topic_name: %s\" , ros_img_topic_name_ . c_str ()); ros_img_subscription_ = this -> create_subscription < sensor_msgs :: msg :: Image > ( ros_img_topic_name_ , 10 , std :: bind ( & CenterNet3DDetectionNode :: RosImgProcess , this , std :: placeholders :: _1 )); } return 0 ; } int CenterNet3DDetectionNode :: SetNodePara () { RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Set node para.\" ); if ( ! dnn_node_para_ptr_ ) { return -1 ; } dnn_node_para_ptr_ -> model_file = model_file_name_ ; dnn_node_para_ptr_ -> model_name = model_name_ ; dnn_node_para_ptr_ -> model_task_type = model_task_type_ ; dnn_node_para_ptr_ -> task_num = 1 ; return 0 ; } int CenterNet3DDetectionNode :: SetOutputParser () { // set output parser auto model_manage = GetModel (); if ( ! model_manage || ! dnn_node_para_ptr_ ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Invalid model\" ); return -1 ; } if ( model_manage -> GetOutputCount () < model_output_count_ ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Error! Model %s output count is %d, unmatch with count %d\" , dnn_node_para_ptr_ -> model_name . c_str (), model_manage -> GetOutputCount (), model_output_count_ ); return -1 ; } for ( int i = 0 ; i < output_index_ ; ++ i ) { std :: shared_ptr < OutputParser > assist_parser = std :: make_shared < CenterNet3DAssistParser > (); model_manage -> SetOutputParser ( i , assist_parser ); } // set 3D paser auto output_desc = std :: make_shared < OutputDescription > ( model_manage , output_index_ , \"3D_branch\" ); for ( int i = 0 ; i < output_index_ ; ++ i ) { output_desc -> GetDependencies (). push_back ( i ); } output_desc -> SetType ( \"3D\" ); model_manage -> SetOutputDescription ( output_desc ); std :: shared_ptr < OutputParser > out_parser = std :: make_shared < CenterNet3DOutputParser > ( config_file_path_ ); model_manage -> SetOutputParser ( output_index_ , out_parser ); return 0 ; } #define CV_DRAW_LINE(p0, p1) \\ cv::line(image, cv::Point(points[p0][0], points[p0][1]), \\ cv::Point(points[p1][0], points[p1][1]), \\ CV_RGB(0, 255, 0), 2); #define CV_PUT_TEXT(text, px, py, offset) \\ { double fontScale = 3.0l; int thickness = 3u, baseline; \\ cv::Size text_size = cv::getTextSize(text, \\ cv::HersheyFonts::FONT_HERSHEY_PLAIN, fontScale, thickness, &baseline); \\ cv::Point point(px , py); \\ point.y += offset;\\ cv::Rect rect(point.x, point.y, \\ text_size.width, text_size.height); \\ point.y += text_size.height;\\ offset += text_size.height;\\ cv::putText(image, text, point, \\ cv::HersheyFonts::FONT_HERSHEY_PLAIN, \\ fontScale, CV_RGB(0, 255, 128), thickness); } void Render3DBox ( const BBox3D & box , cv :: Mat & image ) { auto & points = box . corners2d_upscale ; CV_DRAW_LINE ( 0 , 1 ) CV_DRAW_LINE ( 0 , 3 ) CV_DRAW_LINE ( 0 , 4 ) CV_DRAW_LINE ( 1 , 2 ) CV_DRAW_LINE ( 1 , 5 ) CV_DRAW_LINE ( 2 , 3 ) CV_DRAW_LINE ( 2 , 6 ) CV_DRAW_LINE ( 3 , 7 ) CV_DRAW_LINE ( 4 , 5 ) CV_DRAW_LINE ( 4 , 7 ) CV_DRAW_LINE ( 5 , 6 ) CV_DRAW_LINE ( 6 , 7 ) std :: string box_type = std :: to_string ( box . class_label ); std :: string score = std :: to_string ( box . score ); int offset = 0 ; if ( - M_PI_2 <= box . r || box . r <= M_PI_2 ) { CV_PUT_TEXT ( box_type , points [ 7 ][ 0 ], points [ 7 ][ 1 ], offset ); CV_PUT_TEXT ( score , points [ 7 ][ 0 ], points [ 7 ][ 1 ], offset ); } else { CV_PUT_TEXT ( box_type , points [ 6 ][ 0 ], points [ 6 ][ 1 ], offset ); CV_PUT_TEXT ( score , points [ 6 ][ 0 ], points [ 6 ][ 1 ], offset ); } } int CenterNet3DDetectionNode :: PostProcess ( const std :: shared_ptr < DnnNodeOutput > & node_output ) { if ( ! msg_publisher_ ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"example\" ), \"Invalid msg_publisher_\" ); return -1 ; } struct timespec time_start = { 0 , 0 }; clock_gettime ( CLOCK_REALTIME , & time_start ); ai_msgs :: msg :: Perf perf ; perf . set__type ( \"PostProcess\" ); perf . stamp_start . sec = time_start . tv_sec ; perf . stamp_start . nanosec = time_start . tv_nsec ; auto centernet_3d_output = std :: dynamic_pointer_cast < CenterNet3DOutput > ( node_output ); if ( centernet_3d_output ) { std :: stringstream ss ; ss << \"3D output dection info\" ; if ( centernet_3d_output -> image_msg_header_ ) { ss << \", frame_id: \" << centernet_3d_output -> image_msg_header_ -> frame_id << \", stamp: \" << centernet_3d_output -> image_msg_header_ -> stamp . sec << \".\" << centernet_3d_output -> image_msg_header_ -> stamp . nanosec ; } RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"%s\" , ss . str (). c_str ()); } const auto & outputs = node_output -> outputs ; RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"outputs size: %d\" , outputs . size ()); if ( outputs . empty () || static_cast < int32_t > ( outputs . size ()) < model_output_count_ ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Invalid outputs\" ); return -1 ; } int smart_fps = 0 ; { auto tp_now = std :: chrono :: system_clock :: now (); output_frameCount_ ++ ; auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( tp_now - output_tp_ ) . count (); if ( interval >= 1000 ) { smart_fps = output_frameCount_ ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Smart fps = %d\" , smart_fps ); output_frameCount_ = 0 ; output_tp_ = std :: chrono :: system_clock :: now (); } } ai_msgs :: msg :: PerceptionTargets :: UniquePtr pub_data ( new ai_msgs :: msg :: PerceptionTargets ()); if ( centernet_3d_output -> image_msg_header_ ) { pub_data -> header . set__stamp ( centernet_3d_output -> image_msg_header_ -> stamp ); pub_data -> header . set__frame_id ( centernet_3d_output -> image_msg_header_ -> frame_id ); } pub_data -> set__fps ( smart_fps ); auto * det_result = dynamic_cast < CenterNet3DDetResult *> ( outputs [ output_index_ ]. get ()); if ( ! det_result ) { RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"invalid cast\" ); } else { RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"out box size: %d\" , det_result -> boxes . size ()); std :: map < std :: string , ai_msgs :: msg :: Target > target_list ; std :: vector < ai_msgs :: msg :: Target > targets ; targets . reserve ( det_result -> boxes . size ()); for ( auto & box : det_result -> boxes ) { ai_msgs :: msg :: Target target ; switch ( box . class_label ) { case BBox3D :: CHARGING_BASE : target . type = \"charging_base\" ; break ; case BBox3D :: SLIPPER : target . type = \"slipper\" ; break ; case BBox3D :: TRASH_CAN : target . type = \"trash_can\" ; break ; } RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s\" , target . type . c_str ()); ai_msgs :: msg :: Attribute attribute ; ai_msgs :: msg :: Point point ; attribute . type = \"width\" ; attribute . value = box . w * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"height\" ; attribute . value = box . h * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"length\" ; attribute . value = box . l * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"rotation\" ; attribute . value = box . r * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"x\" ; attribute . value = box . x * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"y\" ; attribute . value = box . y * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"z\" ; attribute . value = box . z * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"depth\" ; attribute . value = box . d * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), attribute . value ); target . attributes . push_back ( attribute ); attribute . type = \"score\" ; attribute . value = box . score * 1000. ; RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_detection\" ), \"target type: %s, value: %f\" , attribute . type . c_str (), box . score ); target . attributes . push_back ( attribute ); // 8 corners /* 4----------5 6----------7 /| /| /| /| / | / | / | / | / | / | / | / | 7---|------6 |5---|------4 | | | | || | | | | | | || | | | | 0------|---1| 2------|---3 | / | / | / | / | / ^ | / | / v | / |/ |/ |/ |/ 3----------2 1----------0 */ for ( const auto & corners : box . corners2d_upscale ) { geometry_msgs :: msg :: Point32 g_point ; g_point . x = corners [ 0 ]; g_point . y = corners [ 1 ]; point . point . push_back ( g_point ); } point . type = \"corners\" ; target . points . push_back ( point ); targets . push_back ( target ); } pub_data -> targets = std :: move ( targets ); if ( ! centernet_3d_output -> image_name_ . empty ()) { auto img_bgr = cv :: imread ( centernet_3d_output -> image_name_ ); for ( auto & box : det_result -> boxes ) { Render3DBox ( box , img_bgr ); } std :: string :: size_type iPos = centernet_3d_output -> image_name_ . find_last_of ( '/' ) + 1 ; std :: string filename = centernet_3d_output -> image_name_ . substr ( iPos , centernet_3d_output -> image_name_ . length () - iPos ); cv :: imwrite ( \"./result/\" + filename , img_bgr ); } } clock_gettime ( CLOCK_REALTIME , & time_start ); perf . stamp_end . sec = time_start . tv_sec ; perf . stamp_end . nanosec = time_start . tv_nsec ; pub_data -> perfs . emplace_back ( perf ); msg_publisher_ -> publish ( std :: move ( pub_data )); return 0 ; } int CenterNet3DDetectionNode :: Predict ( std :: vector < std :: shared_ptr < DNNInput >> & inputs , const std :: shared_ptr < std :: vector < hbDNNRoi >> rois , std :: shared_ptr < DnnNodeOutput > dnn_output ) { return Run ( inputs , dnn_output , rois , is_sync_mode_ == 1 ); } void CenterNet3DDetectionNode :: RosImgProcess ( const sensor_msgs :: msg :: Image :: ConstSharedPtr img_msg ) { if ( ! img_msg || ! rclcpp :: ok ()) { return ; } std :: stringstream ss ; ss << \"Recved img encoding: \" << img_msg -> encoding << \", h: \" << img_msg -> height << \", w: \" << img_msg -> width << \", step: \" << img_msg -> step << \", frame_id: \" << img_msg -> header . frame_id << \", stamp: \" << img_msg -> header . stamp . sec << \".\" << img_msg -> header . stamp . nanosec << \", data size: \" << img_msg -> data . size (); RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"%s\" , ss . str (). c_str ()); auto tp_start = std :: chrono :: system_clock :: now (); // 1. 将图片处理成模型输入数据类型DNNInput // 使用图片生成pym，NV12PyramidInput为DNNInput的子类 std :: shared_ptr < hobot :: easy_dnn :: NV12PyramidInput > pyramid = nullptr ; if ( \"rgb8\" == img_msg -> encoding ) { #ifdef CV_BRIDGE_PKG_ENABLED auto cv_img = cv_bridge :: cvtColorForDisplay ( cv_bridge :: toCvShare ( img_msg ), \"bgr8\" ); { auto tp_now = std :: chrono :: system_clock :: now (); auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( tp_now - tp_start ) . count (); RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"after cvtColorForDisplay cost ms: %d\" , interval ); } pyramid = ImageUtils :: GetNV12Pyramid ( cv_img -> image , model_input_height_ , model_input_width_ ); #else RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Unsupport cv bridge\" ); #endif } else if ( \"nv12\" == img_msg -> encoding ) { pyramid = ImageUtils :: GetNV12PyramidFromNV12Img ( reinterpret_cast < const char *> ( img_msg -> data . data ()), img_msg -> height , img_msg -> width , model_input_height_ , model_input_width_ ); } if ( ! pyramid ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Get Nv12 pym fail\" ); return ; } { auto tp_now = std :: chrono :: system_clock :: now (); auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( tp_now - tp_start ) . count (); RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"after GetNV12Pyramid cost ms: %d\" , interval ); } RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Dnn node begin to predict\" ); // 2. 使用pyramid创建DNNInput对象inputs // inputs将会作为模型的输入通过RunInferTask接口传入 auto inputs = std :: vector < std :: shared_ptr < DNNInput >> { pyramid }; auto dnn_output = std :: make_shared < CenterNet3DOutput > (); dnn_output -> src_img_width_ = img_msg -> width ; dnn_output -> src_img_height_ = img_msg -> height ; dnn_output -> image_msg_header_ = std :: make_shared < std_msgs :: msg :: Header > (); dnn_output -> image_msg_header_ -> set__frame_id ( img_msg -> header . frame_id ); dnn_output -> image_msg_header_ -> set__stamp ( img_msg -> header . stamp ); dnn_output -> image_name_ = \"\" ; // 3. 开始预测 uint32_t ret = Predict ( inputs , nullptr , dnn_output ); { auto tp_now = std :: chrono :: system_clock :: now (); auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( tp_now - tp_start ) . count (); RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"after Predict cost ms: %d\" , interval ); } if ( ret != 0 ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"predict img failed!\" ); } return ; } int CenterNet3DDetectionNode :: PredictByImage ( const std :: string & image ) { // 1. 将图片处理成模型输入数据类型DNNInput // 使用图片生成pym，NV12PyramidInput为DNNInput的子类 std :: shared_ptr < hobot :: easy_dnn :: NV12PyramidInput > pyramid = nullptr ; // bgr img，支持将图片resize到模型输入size pyramid = ImageUtils :: GetNV12Pyramid ( image , ImageType :: BGR , model_input_height_ , model_input_width_ ); if ( ! pyramid ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Get Nv12 pym fail with image: %s\" , image . c_str ()); return -1 ; } // 2. 使用pyramid创建DNNInput对象inputs // inputs将会作为模型的输入通过RunInferTask接口传入 auto inputs = std :: vector < std :: shared_ptr < DNNInput >> { pyramid }; auto dnn_output = std :: make_shared < CenterNet3DOutput > (); dnn_output -> src_img_width_ = 1920 ; dnn_output -> src_img_height_ = 1024 ; dnn_output -> image_msg_header_ = std :: make_shared < std_msgs :: msg :: Header > (); dnn_output -> image_msg_header_ -> set__frame_id ( \"test_frame\" ); dnn_output -> image_msg_header_ -> set__stamp ( rclcpp :: Time ()); dnn_output -> image_name_ = image ; // dnn_output->image_msg_header->set__frame_id(std::to_string(img_msg->index)); // dnn_output->image_msg_header->set__stamp(img_msg->time_stamp); // 3. 开始预测 uint32_t ret = Predict ( inputs , nullptr , dnn_output ); if ( ret != 0 ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"predict img failed!\" ); } return ret ; } #ifdef SHARED_MEM_ENABLED void CenterNet3DDetectionNode :: SharedMemImgProcess ( const hbm_img_msgs :: msg :: HbmMsg1080P :: ConstSharedPtr img_msg ) { if ( ! img_msg || ! rclcpp :: ok ()) { return ; } RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"go into shared mem\" ); // dump recved img msg // std::ofstream ofs(\"img_\" + std::to_string(img_msg->index) + \".\" + // std::string(reinterpret_cast<const char*>(img_msg->encoding.data()))); // ofs.write(reinterpret_cast<const char*>(img_msg->data.data()), // img_msg->data_size); auto tp_start = std :: chrono :: system_clock :: now (); // 1. 将图片处理成模型输入数据类型DNNInput // 使用图片生成pym，NV12PyramidInput为DNNInput的子类 std :: shared_ptr < hobot :: easy_dnn :: NV12PyramidInput > pyramid = nullptr ; if ( \"nv12\" == std :: string ( reinterpret_cast < const char *> ( img_msg -> encoding . data ()))) { pyramid = ImageUtils :: GetNV12PyramidFromNV12Img ( reinterpret_cast < const char *> ( img_msg -> data . data ()), img_msg -> height , img_msg -> width , model_input_height_ , model_input_width_ ); } else { RCLCPP_INFO ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"share mem unsupported img encoding: %s\" , img_msg -> encoding ); } if ( ! pyramid ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Get Nv12 pym fail!\" ); return ; } { auto tp_now = std :: chrono :: system_clock :: now (); auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( tp_now - tp_start ) . count (); RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"after GetNV12Pyramid cost ms: %d\" , interval ); } // 2. 使用pyramid创建DNNInput对象inputs // inputs将会作为模型的输入通过RunInferTask接口传入 auto inputs = std :: vector < std :: shared_ptr < DNNInput >> { pyramid }; auto dnn_output = std :: make_shared < CenterNet3DOutput > (); dnn_output -> src_img_width_ = img_msg -> width ; dnn_output -> src_img_height_ = img_msg -> height ; dnn_output -> image_msg_header_ = std :: make_shared < std_msgs :: msg :: Header > (); dnn_output -> image_msg_header_ -> set__frame_id ( std :: to_string ( img_msg -> index )); dnn_output -> image_msg_header_ -> set__stamp ( img_msg -> time_stamp ); // 3. 开始预测 int ret = Predict ( inputs , nullptr , dnn_output ); { auto tp_now = std :: chrono :: system_clock :: now (); auto interval = std :: chrono :: duration_cast < std :: chrono :: milliseconds > ( tp_now - tp_start ) . count (); RCLCPP_DEBUG ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"after Predict cost ms: %d\" , interval ); } // 4. 处理预测结果，如渲染到图片或者发布预测结果 if ( ret != 0 ) { RCLCPP_ERROR ( rclcpp :: get_logger ( \"mono3d_indoor_detection\" ), \"Run predict failed!\" ); } return ; } #endif","text_tokens":["f","out","ss","a","ofstream","处理","dnnnodeoutput","puttext","apache","p0","failed","pointer","any","detect","desc","options","path","info","|","hobot","trash","s","under","copy","rect",",","gettextsize","getmodelinputsize","using","getmodel","bgr8",")","生成","clock","find","1000","count","pkg","hbmem","到",";","shared","imread","example","ok","geometry","\"","#","switch","^","dnn","include","go","inputs","plain","constsharedptr","encoding","move","det","unistd","name","class","的","fontscale","realtime","hershey","rotation","use","data","corners2d","将会","you","子类","filename","cast","emplace","y","centernet3ddetresult","image","boxes","hersheyfonts",":","express","by","of","bind","pub","imageutils","发布","timespec","value","6","n","ifdef","__","centernet","nodeoptions","8","nsec","publisher","enabled","v","setoutputdescription","width","settype","step","rosimgprocess","slipper","hpp","ai","}","3","the","para","return","governing","feed","stringstream","upscale","centernet3doutput","endl","开始","py",".","start","type","an","endif","src","licensed","specific","break","version","const","predictbyimage","interval","struct","placeholders","success","substr","outputs","数据类型","ros","sharedmemimgprocess","将","images","对象","recved","fps","getnv12pyramid","bgr","model","point","kind","either","back","rgb","offset","new","at","2.0","invalid","double","255","i","void","id","write","applicable","basis","cost","ms","is","+","sync","或者","x","pym","unsupported","gettime","为","that","dection","h","depth","px","3.0","dnninput","targets","stamp","resize","mkdir","结果","into","_","fstream","nullptr","outputdescription","ptr","sub","mono3d","static","接口","men","debug","模型","agreed","0","!","map","chrono","render3dbox","set","attribute","'","pyramid","---","last","point32","branch",">","，","make","作为","1","init","language","box","reinterpret","run","postprocess","with","limitations","thickness","can","put","3u","5","类型","on","num","t","manage","software","as","writing","indoor","sharedmem","line","assist","(","img","128","reserve","w","渲染","=","output","to","base","text","subscriptions","uint32","share","detection","centernet3doutputparser","attributes","framecount","may","in","size","perceptiontargets","node","bridge","nanosec","1024","4","d","logger","input","*","输入","easy","define","centernet3dassistparser","perf","nv12","c","成","distributed","license","length","paser","parameter","m","copyright","msgs","begin","sys","10","sec","test","org","outputparser","使用","frame","传入","uniqueptr","header","milliseconds","predict","required","charging","read","3d","or","dnnnode","%","push","创建","baseline","{","++","&","msg","7","memory","~","without","tocvshare","time","预测","vector","setoutputparser","------","nv12pyramidinput","ofs","warn","mode","config","]","/","数据","dump","unsupport","2022","g","system","target","create","cv","this","points","horizon","[","parser","runinfertask","obtain","r","rgb8","permissions","string","getdependencies","p1","empty","hbm","after","z","not","stat","case","hbdnnroi","smart","rois","<","mem","ipos","result","for","tp","cout","declare","-","imagetype","utils","score","imwrite","getnv12pyramidfromnv12img","perfs","setnodepara","ret","int","else","now","bbox3d","如"," ","----------","height","font","666","task","index","\\","int32","std","duration","file","label","conditions","subscription","list","http","char","error","topic","licenses","law","robotics","mat","www","getoutputcount","end","通过","tv","dynamic","warranties","draw","pi","2","unmatch","unless","auto","see","图片","cvtcolorfordisplay","fail","and","rclcpp","hbmmsg1080p","sensor","l","compliance","get","except","if","corners","str","implied","centernet3ddetectionnode","支持","1920","publish"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"hhp/6.1_SLAM%E5%BB%BA%E5%9B%BE/","text":"SLAM建图 从这一节开始，我们开始尝试将 TogetherROS 与机器人联系起来做一些小项目。 第一节将开始学习 SLAM 技术。SLAM一般指即时定位与地图构建，即时定位与地图构建（Simultaneous Localization and Mapping，简称SLAM） 这个章节，我们将联系ROS2 和 TogetherROS ，使用 ROS2 的 SLAM-Toolbox 作为建图算法，在仿真环境中构建地图。 准备工作 1、安装 SLAM - Toolbox建立软链接 $ sudo apt-get install ros-foxy-slam-toolbox $ cd /opt/tros $ sudo python3 create_soft_link.py --foxy /opt/ros/foxy/ --tros /opt/tros/ 2、搭载仿真环境，此处采用 turtlebot3 仿真环境 $ sudo apt-get install ros-foxy-gazebo-* $ sudo apt install ros-foxy-turtlebot3 $ sudo apt install ros-foxy-turtlebot3-bringup $ sudo apt install ros-foxy-turtlebot3-simulations $ sudo apt install ros-foxy-teleop-twist-keyboard 使用介绍 首先在 PC 端启动仿真环境 $ source /opt/ros/foxy/setup.bash $ export TURTLEBOT3_MODEL = burger $ ros2 launch turtlebot3_gazebo turtlebot3_world.launch.py Attention 第一次加载可能比较慢，原因是正在下载部分需要的插件。 打开后，即可看到如图: 在PC端打开一个新终端： $ source /opt/ros/foxy/setup.bash $ ros2 launch turtlebot3_bringup rviz2.launch.py 此时会打开一个RVIZ2 ，需要添加“map” 如下图： 旭日X3 派运行 SLAM-Toolbox： # 配置TogetherROS环境 $ source /opt/tros/setup.bash #启动SLAM launch文件 $ ros2 launch slam_toolbox online_sync_launch.py 此处有可能会遇到缺少lib文件问题，如果发生的话如下操作： $ sudo vi /etc/ld.so.conf #在其后增加： /usr/local/lib #保存退出： $ sudo ldconfig PC端再打开一个新终端，遥控建图： $ source /opt/ros/foxy/setup.bash $ ros2 run teleop_twist_keyboard teleop_twist_keyboard 效果如图： 建图结果","text_tokens":["python3","run","/","etc","togetherros","ros2","配置","、","即时","发生","开始","地图","py","章节","create",".","usr","后","可能","localization","attention","机器人","”","link","twist","运行","终端","缺少","起来","--","opt","正在","添加","第一节","install","=","bash","rviz2","旭日","sudo","采用","ros","问题","将","cd","toolbox","工作","online","退出","搭载","-","$","简称","world","会","model","#","比较","如果","x3","一次","tros","构建","下载","simulations","加载","export","需要","启动","*","是","这个","有","机器","文件","so","的"," ","操作","技术","conf","保存","launch","在","遥控","图","再","建立","sync","即可","做","联系","部分","如下","软","中","看到","source","pc","ldconfig","simultaneous","小","新","建图","使用","“","结果","指","_","学习","项目","首先","较慢","apt","原因","和","teleop","这","遇到","）","算法","链接","bringup","仿真","第一次","介绍","的话","第一","尝试","（",":","增加","准备","此处","一节","foxy","其后","keyboard","。","gazebo","一个","与","从","2","比较慢","burger","打开","mapping","local","lib","一般","vi","and","我们","ld","soft","插件","环境","定位","get","map","turtlebot3","端","：","setup","派","slam","安装","一些","此时","效果","，","作为","如图","1"],"title":"SLAM地图构建","title_tokens":["slam","构建","地图"]},{"location":"hhp/6.1_SLAM%E5%BB%BA%E5%9B%BE/#slam","text":"从这一节开始，我们开始尝试将 TogetherROS 与机器人联系起来做一些小项目。 第一节将开始学习 SLAM 技术。SLAM一般指即时定位与地图构建，即时定位与地图构建（Simultaneous Localization and Mapping，简称SLAM） 这个章节，我们将联系ROS2 和 TogetherROS ，使用 ROS2 的 SLAM-Toolbox 作为建图算法，在仿真环境中构建地图。","text_tokens":["仿真","第一节","机器","第一","尝试","（","的"," ","技术","一节","togetherros","ros2","在","将","。","即时","与","从","开始","地图","做","联系","章节","toolbox","mapping","中","一般","and","我们","localization","-","simultaneous","简称","环境","机器人","小","定位","建图","使用","指","slam","学习","项目","一些","构建","和","起来","，","这","）","算法","这个","作为"],"title":"SLAM建图","title_tokens":["slam","建图"]},{"location":"hhp/6.1_SLAM%E5%BB%BA%E5%9B%BE/#_1","text":"1、安装 SLAM - Toolbox建立软链接 $ sudo apt-get install ros-foxy-slam-toolbox $ cd /opt/tros $ sudo python3 create_soft_link.py --foxy /opt/ros/foxy/ --tros /opt/tros/ 2、搭载仿真环境，此处采用 turtlebot3 仿真环境 $ sudo apt-get install ros-foxy-gazebo-* $ sudo apt install ros-foxy-turtlebot3 $ sudo apt install ros-foxy-turtlebot3-bringup $ sudo apt install ros-foxy-turtlebot3-simulations $ sudo apt install ros-foxy-teleop-twist-keyboard","text_tokens":["bringup","仿真","python3","install"," ","/","此处","sudo","采用","、","ros","foxy","keyboard","cd","建立","gazebo","2","py","toolbox","create",".","*","软","soft","-","搭载","$","get","环境","link","turtlebot3","twist","slam","_","安装","tros","apt","teleop","simulations","，","--","opt","1","链接"],"title":"准备工作","title_tokens":["准备","工作"]},{"location":"hhp/6.1_SLAM%E5%BB%BA%E5%9B%BE/#_2","text":"首先在 PC 端启动仿真环境 $ source /opt/ros/foxy/setup.bash $ export TURTLEBOT3_MODEL = burger $ ros2 launch turtlebot3_gazebo turtlebot3_world.launch.py Attention 第一次加载可能比较慢，原因是正在下载部分需要的插件。 打开后，即可看到如图: 在PC端打开一个新终端： $ source /opt/ros/foxy/setup.bash $ ros2 launch turtlebot3_bringup rviz2.launch.py 此时会打开一个RVIZ2 ，需要添加“map” 如下图： 旭日X3 派运行 SLAM-Toolbox： # 配置TogetherROS环境 $ source /opt/tros/setup.bash #启动SLAM launch文件 $ ros2 launch slam_toolbox online_sync_launch.py 此处有可能会遇到缺少lib文件问题，如果发生的话如下操作： $ sudo vi /etc/ld.so.conf #在其后增加： /usr/local/lib #保存退出： $ sudo ldconfig PC端再打开一个新终端，遥控建图： $ source /opt/ros/foxy/setup.bash $ ros2 run teleop_twist_keyboard teleop_twist_keyboard 效果如图：","text_tokens":["run","/","etc","ros2","配置","togetherros","发生","py",".","usr","后","可能","attention","”","twist","运行","终端","缺少","opt","正在","添加","=","bash","rviz2","旭日","sudo","ros","问题","toolbox","online","退出","-","$","world","#","会","model","比较","如果","x3","一次","tros","下载","加载","export","需要","启动","是","有","文件","so","的"," ","操作","conf","保存","launch","在","遥控","图","再","sync","即可","部分","如下","看到","source","pc","ldconfig","新","建图","“","_","首先","较慢","原因","teleop","遇到","bringup","仿真","第一次","的话","第一",":","增加","此处","foxy","其后","keyboard","gazebo","。","一个","比较慢","burger","打开","local","lib","vi","ld","插件","环境","map","turtlebot3","端","：","setup","派","slam","此时","效果","，","如图"],"title":"使用介绍","title_tokens":["介绍","使用"]},{"location":"hhp/6.1_SLAM%E5%BB%BA%E5%9B%BE/#_3","text":"","text_tokens":[],"title":"建图结果","title_tokens":["建图","结果"]},{"location":"hhp/6.2_%E5%B0%8F%E8%BD%A6%E4%BA%BA%E4%BD%93%E8%B7%9F%E9%9A%8F/","text":"小车人体跟随 之前我们介绍了如何利用 X3派 进行人体检测和跟踪，那么加入我们想要将体检测和跟踪和真实机器人做一个结合会是一种什么样的体验呢？ 这里，我们将通过X3派检测到的人体目标进行一个移动跟踪，最终的一个效果就是当装配着X3派和摄像头的小车面前出现一个人物时，小车将会跟随着人体一起移动。接下来，让我们一起来体验一下吧。 编程开发方法 先来看整个程序的流程图： 这里，我们将通过 Gazebo 仿真环境下的虚拟小车作为真实机器，首先，让我们来做一些准备工作。 在PC端搭建一个仿真环境： $ sudo apt-get install ros-foxy-gazebo-* $ sudo apt install ros-foxy-turtlebot3 $ sudo apt install ros-foxy-turtlebot3-simulations 使用介绍 首先在 PC 端启动仿真环境 $ source /opt/ros/foxy/setup.bash $ export TURTLEBOT3_MODEL = burger $ ros2 launch turtlebot3_gazebo empty_world.launch.py Attention 第一次加载可能比较慢，原因是正在下载部分需要的插件。 如下图所见： 旭日X3 派运行 如下指令： # 配置TogetherROS环境 $ source /opt/tros/setup.bash # 从TogetherROS的安装路径中拷贝出运行示例需要的配置文件。 $ cp -r /opt/tros/lib/mono2d_body_detection/config/ . #启动launch文件 $ ros2 launch body_tracking hobot_body_tracking_without_gesture.launch.py 接下来，只需要你站在摄像头面前左右前后移动，就会发现仿真环境下的小车也会跟着你移动。 再来看终端输出的信息： $ ros2 topic echo /cmd_vel linear: x: 0.5 y: 0.0 z: 0.0 angular: x: 0.0 y: 0.0 z: -0.5 --- linear: x: 0.5 y: 0.0 z: 0.0 angular: x: 0.0 y: 0.0 z: -0.5 --- 跟随效果","text_tokens":["config","跟着","一","一下","小车","跟踪","就","/","拷贝","将体","也","信息","ros2","配置","togetherros","angular","mono2d","如何","像头","装配","摄像头","echo","py","来看",".","出","吧","hobot","可能","只","attention","进行","最终","机器人","r","随着","流程","面前","站","body","运行","empty","终端","图所见","起来","检测","这里","z","opt","开发方法","正在","install","=","bash","示例","着","旭日","人体","sudo","ros","你","将","到","跟","detection","时","cmd","人物","工作","流程图","-","$","world","#","会","model","gesture","比较","x3","一次","tros","输出","下载","了","simulations","加载","export","需要","启动","*","是","前后","路径","机器","文件","？","的"," ","摄像","编程","0.0","出现","整个","launch","先","在","再","vel","做","x","部分","搭建","结合","如下","所见","想要","中","将会","source","pc","方法","左右","跟随","使用","真实","呢","移动","首先","_","较慢","apt","topic","y","程序","和","原因","linear","一种","目标","之前","仿真","第一次","介绍","第一","一起",":","来","接下来","准备","0.5","cp","通过","体验","foxy","。","就是","一个","什么","gazebo","从","比较慢","burger","指令","lib","虚拟","我们","什么样","接下","插件","利用","环境","get","without","那么","开发","turtlebot3","端","：","派","下","setup","下来","安装","tracking","一些","让","---","效果","加入","当","，","作为","发现","配置文件"],"title":"小车人体跟随","title_tokens":["跟随","人体","小车"]},{"location":"hhp/6.2_%E5%B0%8F%E8%BD%A6%E4%BA%BA%E4%BD%93%E8%B7%9F%E9%9A%8F/#_1","text":"之前我们介绍了如何利用 X3派 进行人体检测和跟踪，那么加入我们想要将体检测和跟踪和真实机器人做一个结合会是一种什么样的体验呢？ 这里，我们将通过X3派检测到的人体目标进行一个移动跟踪，最终的一个效果就是当装配着X3派和摄像头的小车面前出现一个人物时，小车将会跟随着人体一起移动。接下来，让我们一起来体验一下吧。","text_tokens":["介绍","机器","一起","一","？","小车","跟踪","的","一下"," ","着","将体","摄像","接下来","出现","人体","通过","体验","将","如何","到","像头","跟","就是","一个","什么","。","装配","摄像头","时","做","人物","结合","想要","将会","我们","什么样","吧","接下","进行","利用","最终","机器人","会","那么","随着","x3","派","面前","真实","呢","移动","下来","和","让","了","一种","加入","目标","效果","检测","，","这里","当","起来","是","之前"],"title":"小车人体跟随","title_tokens":["跟随","人体","小车"]},{"location":"hhp/6.2_%E5%B0%8F%E8%BD%A6%E4%BA%BA%E4%BD%93%E8%B7%9F%E9%9A%8F/#_2","text":"先来看整个程序的流程图： 这里，我们将通过 Gazebo 仿真环境下的虚拟小车作为真实机器，首先，让我们来做一些准备工作。 在PC端搭建一个仿真环境： $ sudo apt-get install ros-foxy-gazebo-* $ sudo apt install ros-foxy-turtlebot3 $ sudo apt install ros-foxy-turtlebot3-simulations","text_tokens":["仿真","机器","install","小车","的","来"," ","准备","整个","先","sudo","通过","在","ros","foxy","将","gazebo","。","一个","做","来看","搭建","*","工作","虚拟","我们","流程图","pc","-","$","环境","get","turtlebot3","流程","端","：","下","真实","首先","apt","一些","程序","让","simulations","，","这里","作为"],"title":"编程开发方法","title_tokens":["方法","编程","开发方法","开发"]},{"location":"hhp/6.2_%E5%B0%8F%E8%BD%A6%E4%BA%BA%E4%BD%93%E8%B7%9F%E9%9A%8F/#_3","text":"首先在 PC 端启动仿真环境 $ source /opt/ros/foxy/setup.bash $ export TURTLEBOT3_MODEL = burger $ ros2 launch turtlebot3_gazebo empty_world.launch.py Attention 第一次加载可能比较慢，原因是正在下载部分需要的插件。 如下图所见： 旭日X3 派运行 如下指令： # 配置TogetherROS环境 $ source /opt/tros/setup.bash # 从TogetherROS的安装路径中拷贝出运行示例需要的配置文件。 $ cp -r /opt/tros/lib/mono2d_body_detection/config/ . #启动launch文件 $ ros2 launch body_tracking hobot_body_tracking_without_gesture.launch.py 接下来，只需要你站在摄像头面前左右前后移动，就会发现仿真环境下的小车也会跟着你移动。 再来看终端输出的信息： $ ros2 topic echo /cmd_vel linear: x: 0.5 y: 0.0 z: 0.0 angular: x: 0.0 y: 0.0 z: -0.5 --- linear: x: 0.5 y: 0.0 z: 0.0 angular: x: 0.0 y: 0.0 z: -0.5 ---","text_tokens":["config","跟着","小车","就","/","拷贝","也","信息","ros2","配置","togetherros","angular","mono2d","像头","摄像头","echo","py","来看",".","出","hobot","可能","只","attention","r","面前","站","body","运行","empty","终端","图所见","z","opt","正在","=","bash","示例","旭日","ros","你","detection","cmd","-","$","world","#","会","model","gesture","比较","x3","一次","tros","输出","下载","加载","export","需要","启动","是","前后","路径","文件","的"," ","摄像","0.0","launch","在","再","vel","x","部分","如下","所见","中","source","pc","左右","_","移动","首先","较慢","y","topic","原因","linear","仿真","第一次","第一",":","接下来","0.5","cp","foxy","gazebo","。","从","比较慢","burger","指令","lib","接下","插件","环境","without","turtlebot3","端","：","setup","派","下","下来","安装","tracking","---","，","发现","配置文件"],"title":"使用介绍","title_tokens":["介绍","使用"]},{"location":"hhp/6.2_%E5%B0%8F%E8%BD%A6%E4%BA%BA%E4%BD%93%E8%B7%9F%E9%9A%8F/#_4","text":"","text_tokens":[],"title":"跟随效果","title_tokens":["跟随","效果"]}]}